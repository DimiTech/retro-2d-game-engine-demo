{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/infrastructure/game/Game.ts","webpack:///./src/app/infrastructure/game/game_states/GameStates.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/infrastructure/FrameRate.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/Gamepads.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/ConcreteEnemy.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack:///./src/app/infrastructure/GameAssets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","AudioLoader_1","Canvas_1","FrameRate_1","GameStates_1","GameStateManager_1","GameAssets_1","Game","window","onfocus","restart","load","percentage","gameAssetLoaded","Audio","stateManager","getState","PAUSED","setState","PLAYING","loadInterval","setInterval","loaded","clearInterval","MAIN_MENU","gameLoop","asset","loadedPercentage","update","nextFrameRenderingShouldBeSkipped","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","GameStateLoading_1","GameStateMainMenu_1","GameStatePlaying_1","GameStatePaused_1","GAME_STATES","LOADING","ConcreteEnemy_1","GameObjectFactory_1","Map01","getEnemiesOnScreen","playerX","playerY","enemies","filter","e","isOnScreen","gameObjects","grid","player","loadMap","forEach","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","length","createGameObject","push","healthPercentage","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","Promise","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","AudioContext","KEYBOARD_KEYS","ENTER","ESC","w","a","halfWidth","halfHeight","MapKeys","isBox","mapKey","startsWith","SoundFX_1","loadCallback","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","lastFrameTime","frameDeltaTime","frameOverstepTime","ONE_FRAME_LENGTH_IN_SECONDS","FPS_ARR","FPS","skipNextFrameRendering","now","performance","unshift","pop","reduce","sum","current","beginPath","fillStyle","font","fillText","toFixed","stroke","Game_1","drawLoadingDialog","KeyCodes_1","animationCounter","animationInterval","instructionsVisible","handleMenuSelection","removeEventListener","drawMainMenu","keyCode","Keyboard_1","Gamepads_1","Grid_1","Map_1","Player_1","previousState","startNewGame","nextState","onblur","updateMousePosition","init","moving","up","left","down","right","togglePause","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","CollisionBox_1","Point_1","Enemy_1","super","updateMapPosition","adjustCollisionWithGameObjects","moveTowardsPlayer","move","updateTileDeltas","drawCollisionBox","damageAmount","playEnemyHit","health","die","playEnemyDeath","collisionBox","mapX","SWVertexRow","dxRight","NWVertexRow","dyBottom","SEVertexRow","NEVertexRow","mapY","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","pointToPointDistance","moveTowards","maxSpeedDiagonal","maxSpeed","strokeStyle","getHealthColor","lineWidth","moveTo","lineTo","p1","p2","sqrt","maxHealth","initializeHealth","round","sin","abs","playerCollisionBox","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","Error","GameObject_1","color","playCrateHit","destructable","Raycaster_1","Crosshair_1","Projectile_1","rotation","sightLineLength","shooting","shootingCooldown","projectiles","shoot","dx","dy","xVel","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","checkForCollisionWithEnemies","atan2","cos","hitPoint","hitObject","cast","drawRay","collidesWithPlayer","Raycaster","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","yIntercept","tileStepX","hitPointVertical","objectHitVertical","RAYCASTER","DEBUG","arc","PI","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","gameObjectHit","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","drawPauseMenu","currentState","exit","enter","GameAssets"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0 // 0.0 to 1.0\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  public static togglePause(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PAUSED) {\n      Game.stateManager.setState(GAME_STATES.PLAYING)\n    } else {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n  }\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n    AudioLoader.load(percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop()\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const audioWeight = 1.0 // TODO: Audio is 100% of all loaded assets for now\n    if (asset === GameAssets.Audio) {\n      Game.loadedPercentage = audioWeight * percentage\n    }\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(): void {\n    this.update()\n\n    if (FrameRate.nextFrameRenderingShouldBeSkipped() === false) {\n      this.render()\n    }\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    FrameRate.drawFPS() // TODO: Remove this, used just for debugging\n  }\n}\n","import GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStatePaused from './GameStatePaused'\n\n// TODO: Add a IGameState type definition\nconst GAME_STATES = {\n  LOADING   : new GameStateLoading(),\n  MAIN_MENU : new GameStateMainMenu(),\n  PLAYING   : new GameStatePlaying(),\n  PAUSED    : new GameStatePaused(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport ConcreateEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport function getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n  return enemies.filter(e => e.isOnScreen(playerX, playerY))\n}\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update(this.player)\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach(e => enemies.push(new ConcreateEnemy(e.x, e.y, e.healthPercentage)))\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","export default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameDeltaTime: number\nlet frameOverstepTime: number = 0\n\nconst ONE_FRAME_LENGTH_IN_SECONDS = 0.01667\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\nlet skipNextFrameRendering = false\n\nexport default class FrameRate {\n  public static nextFrameRenderingShouldBeSkipped(): boolean {\n    return skipNextFrameRendering\n  }\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameDeltaTime = (now - lastFrameTime) / 1000\n      if (frameDeltaTime > ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime += frameDeltaTime - ONE_FRAME_LENGTH_IN_SECONDS\n      }\n\n      FPS_ARR.unshift(1 / (frameDeltaTime + frameOverstepTime))\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      if (frameOverstepTime >= ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime = frameOverstepTime - ONE_FRAME_LENGTH_IN_SECONDS\n        skipNextFrameRendering = true\n      } else {\n        skipNextFrameRendering = false\n      }\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationInterval: number = 100\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationInterval\n    if (this.animationCounter >= this.animationInterval / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText(`Retro 2D Top-Down Game Engine`, CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press ENTER to start', CONFIG.CANVAS_WIDTH / 2 - 120, CONFIG.CANVAS_HEIGHT / 2 - 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection(e: KeyboardEvent): void {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      Game.stateManager.setState(GAME_STATES.PLAYING)\n      document.removeEventListener('keydown', e => this.handleMenuSelection(e))\n    }\n  }\n}\n","import IGameState from './IGameState'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport GAME_STATES from './GameStates';\n\nexport default class GameStatePlaying implements IGameState {\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n  }\n\n  public exit(nextState: IGameState): void {\n    if (nextState !== GAME_STATES.PAUSED) {\n      window.onblur = null\n    }\n  }\n\n  public update(): void {\n    Canvas.updateMousePosition()\n    Gamepads.update(this.player)\n    this.player.update()\n    this.map.update()\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n\n  private startNewGame(): void {\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n  }\n}\n","import Game from '@app/infrastructure/game/Game'\nimport FrameRate from '@app/infrastructure/FrameRate'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    document.addEventListener('keydown', e => {\n      // TODO: Move Player logic to Player class\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.ESC:\n        case KEYBOARD_KEYS.p:\n          Game.togglePause()\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class Grid {\n  rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport { gameObjects } from '@app/domain/map/Map'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default class ConcreateEnemy extends Enemy {\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number\n  ) {\n    super(x, y, new CollisionBox(16, 16), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player): void {\n    this.adjustCollisionWithGameObjects()\n    this.moveTowardsPlayer(player)\n    this.move()\n    this.updateTileDeltas()\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  private moveTowardsPlayer(player: Player): void {\n    const distanceFromPlayer = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x, y: this.y }\n    )\n    if (distanceFromPlayer > 1) {\n      this.moveTowards(player.x, player.y)\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n}\n","export default interface Point {\n  x: number\n  y: number\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Player from '@app/domain/player/Player'\n\nexport default abstract class Enemy {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected maxSpeedDiagonal: number\n\n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    protected maxSpeed: number,\n    healthPercentage: number\n  ) {\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed)\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    return (\n      Math.abs(this.x - playerX) < (CONFIG.CANVAS_WIDTH  / 2) + CONFIG.TILE_SIZE &&\n      Math.abs(this.y - playerY) < (CONFIG.CANVAS_HEIGHT / 2) + CONFIG.TILE_SIZE\n    )\n  }\n\n  public collidesWithPlayer(playerX: number, playerY: number, playerCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < playerX + playerCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > playerX - playerCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < playerY + playerCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > playerY - playerCollisionBox.halfHeight\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  private initializeHealth(healthPercentage: number): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects, getEnemiesOnScreen } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\nimport Game from '@app/infrastructure/game/Game'\nimport GameStateManager from '@app/infrastructure/game/game_states/GameStateManager'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nexport default class Player {\n  public alive: boolean = true\n  public rotation: number = 0\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public sightLineLength = 10\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  private collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed: number = 3\n  private maxSpeedDiagonal: number = Math.round(Math.sin(45) * this.maxSpeed)\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.adjustCollisionWithGameObjects()\n    this.checkForCollisionWithEnemies()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = Math.atan2(\n      (Canvas.mousePosition.y - Canvas.center.y),\n      (Canvas.mousePosition.x - Canvas.center.x)\n    )\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = '10px Monospace'\n\n      context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Generalize collision physics\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  private checkForCollisionWithEnemies(): void {\n    if (getEnemiesOnScreen(this.x, this.y)\n      .filter(e => e.collidesWithPlayer(this.x, this.y, this.collisionBox))\n      .length > 0) {\n        this.die()\n      }\n  }\n\n  private die(): void {\n    this.alive = false\n    Game.stateManager.setState(GAME_STATES.PAUSED)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Raycaster {\n  /**\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   // TODO: Make the hit point the edge of the screen in worst case so the player can't see what's beyond (+ some offset maybe if you want the player to see beyond)\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const yInt = p.deltas.dyBottom\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta)\n      }\n    } else { // North\n      const yInt = p.deltas.dyTop\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(\n        Canvas.center.x + hitPoint.x,\n        Canvas.center.y + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + p.deltas.dxRight + tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + tileStepX + p.deltas.dxRight,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static getInterceptPointNW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - tileStepX - p.deltas.dxLeft,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - p.deltas.dxLeft - tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (-xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport { context } from '@app/infrastructure/Canvas'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","\nenum GameAssets {\n  Audio,\n}\n\nexport default GameAssets"],"sourceRoot":""}