{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/SpriteZerg.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Map from '@app/domain/map/Map'\nimport { Directions } from '@app/infrastructure/Directions'\n\nexport default abstract class Creature {\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n  public x: number\n  public y: number\n  public nextX: number\n  public nextY: number\n  public row: number\n  public col: number\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number\n  public maxSpeedDiagonal: number\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationPosition: number = 0\n\n  public direction: Directions\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX -= this.maxSpeedDiagonal\n      } else {\n        this.nextX -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX += this.maxSpeedDiagonal\n      } else {\n        this.nextX += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY -= this.maxSpeedDiagonal\n      } else {\n        this.nextY -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY += this.maxSpeedDiagonal\n      } else {\n        this.nextY += this.maxSpeed\n      }\n    }\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n    if (Map.walls[this.row]) {\n      if (this.moving.left) {\n        wall = Map.walls[this.row][this.col - 1] // West\n        if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n          this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          wall = Map.walls[SWVertexRow][this.col - 1] // South West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          wall = Map.walls[NWVertexRow][this.col - 1] // North West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        wall = Map.walls[this.row][this.col + 1] // East\n        if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n          this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          wall = Map.walls[SEVertexRow][this.col + 1] // South East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          wall = Map.walls[NEVertexRow][this.col + 1] // North East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row - 1]) {\n      if (this.moving.up) {\n        wall = Map.walls[this.row - 1][this.col] // North\n        if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n          this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NEVertexCol] // North East\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NWVertexCol] // North West\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row + 1]) {\n      if (this.moving.down) {\n        wall = Map.walls[this.row + 1][this.col] // South\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SEVertexCol] // South East\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SWVertexCol] // South West\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > 5) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > 5) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    const dx = this.prevX[this.prevX.length - 1] - this.prevX[this.prevX.length - 2]\n    const dy = this.prevY[this.prevY.length - 1] - this.prevY[this.prevY.length - 2]\n\n    if (dy > 0) {\n      direction.push(Directions.S)\n    }\n    else if (dy < 0) {\n      direction.push(Directions.N)\n    }\n\n    if (dx > 0) {\n      direction.push(Directions.E)\n    }\n    else if (dx < 0) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    const xUnchanged = this.prevX[this.prevX.length - 1] === this.prevX[this.prevX.length - 2]\n    const yUnchanged = this.prevY[this.prevY.length - 1] === this.prevY[this.prevY.length - 2]\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  protected resetAnimation() {\n    this.animationPosition = 0\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimation()\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n}\n\nexport default CreatureState\n","import { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n  }\n\n  public static nextLevel() {\n    Level.currentLevel++\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  protected target: Point\n\n  protected attackSpeed = 32\n\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number,\n    protected pathfindingInterval: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player, enemies: Enemy[]): void {\n    if (this.state === CreatureState.Dying) {\n      return\n    }\n    if (this.state === CreatureState.Decaying) {\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.adjustCollisionWithWalls()\n    this.checkForCollisionWithPlayer(player)\n    this.checkForCollisionWithOtherEnemies(player)\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateDirection() // TODO: This is based on movement, which is incorrect - fix it\n    this.updateTileDeltas()\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      this.debug_drawCollisionBox(player)\n    }\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Decaying)\n  }\n\n  protected advanceAnimation(): void {\n    if (this.state === CreatureState.Attacking) {\n      this.animationPosition = (this.animationPosition + 0.15) % this.sprite.numberOfSpritesInAnimation.attacking\n    } else if (this.state === CreatureState.Moving) {\n     this.animationPosition = (this.animationPosition + 0.25) % this.sprite.numberOfSpritesInAnimation.walking\n    }\n  }\n\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingInterval === 0) {\n        this.pathfindingNodes = generatePathNodes(\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingInterval = (this.pathfindingInterval + 1) % this.pathfindingPeriod\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left && !this.blocked.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right && !this.blocked.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up && !this.blocked.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down && !this.blocked.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Creature from '@app/domain/Creature'\nimport Player from '@app/domain/player/Player'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Map from '../map/Map'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingInterval: number = 0\n  protected pathfindingPeriod: number = 30\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  protected readonly attackSpeed: number // Frames\n  protected attackCooldown: number\n\n  constructor(\n    public x: number,\n    public y: number,\n    collisionBox: CollisionBox,\n    maxSpeed: number,\n    healthPercentage: number,\n  ) {\n    super()\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeed = maxSpeed\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed)\n\n    this.collisionBox = collisionBox\n\n    this.attackCooldown = this.attackSpeed // TODO: Extract to initializeAttackParameters() or somehting...\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player, enemies: Enemy[]): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n  \n  protected resetAttackCooldown() {\n    this.attackCooldown = this.attackSpeed\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG() // TODO: Change the SFX\n      this.dealDamage(p)\n    } else {\n      --this.attackCooldown\n    }\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      e.update(this.player, Map.enemies)\n      if (e.state === CreatureState.Decaying) {\n        Map.enemies.splice(i, 1) // Remove the enemy\n        this.openPortalWhenAllEnemiesAreKilled()\n      }\n    })\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (Map.exitPortal.isOpen === false && Map.enemies.length === 0) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = 'rgba(50, 120, 50, 0.2)'\n  protected static closedColor = 'rgba(180, 50, 50, 0.2)'\n\n  draw(): void {\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return Portal.openColor\n    }\n    else {\n      return Portal.closedColor\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super()\n    this.initializeHealth()\n\n    this.maxSpeed = 2\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed) // TODO: Extract function\n\n    this.collisionBox = new CollisionBox(12, 12)\n\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls()\n    this.updateMapPosition()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n    if (this.health <= 0) {\n      this.die()\n    }\n  }\n\n  private move(): void {\n    if (this.moving.left && !this.blocked.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right && !this.blocked.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up && !this.blocked.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down && !this.blocked.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Map from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract numberOfSpritesInAnimation: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public numberOfSpritesInAnimation = {\n    walking: 7,\n    attacking: 5,\n  }\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n  private spriteSize = 32\n  private spriteStep: Point\n\n  constructor() {\n    super()\n    this.spriteStep = { x: this.spriteSize + 11, y: this.spriteSize + 10 }\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n    const spriteOffsets: Point = this.getSpriteOffsets(enemy.state, this.spriteStep)\n\n    const spriteLocation = this.spriteLocations[enemy.direction]\n\n    this.drawSprite(enemy, playerCoordinates, spriteOffsets, spriteLocation)\n  }\n\n  private getSpriteOffsets(enemyState: CreatureState, SPRITE_STEP: Point) {\n    switch (enemyState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return {\n          x: 7,\n          y: 5\n        }\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: 7,\n          y: 5 + (ATTACK_SPRITES_ROW * SPRITE_STEP.y)\n        }\n    }\n  }\n\n  private drawSprite(\n    enemy: Enemy,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteLocation: { col: number, flip: boolean },\n  ) {\n\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + this.spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + this.spriteStep.y * Math.floor(enemy.animationPosition),\n      this.spriteSize,\n      this.spriteSize,\n      spriteLocation.flip ? 0 - this.spriteSize / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                       : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      enemy.collisionBox.width  + 2, // Draw width\n      enemy.collisionBox.height + 2, // Draw height\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameElapsedTime: number\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameElapsedTime = (now - lastFrameTime)\n\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Math.PI / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Math.PI / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Math.PI / 2 && angleBetweenNodes < Math.PI) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === 3.14) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI && angleBetweenNodes < -Math.PI / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -1.57) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop()\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private toggleRender = true\n\n  private gameLoop(): void {\n    if (this.toggleRender) {\n      this.update()\n      this.render()\n\n      FrameRate.calculateFrameRate()\n    }\n    this.toggleRender = !this.toggleRender\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  // private gameLoop(): void {\n  //   this.update()\n  //   this.render()\n\n  //   FrameRate.calculateFrameRate()\n\n  //   window.requestAnimationFrame(() => this.gameLoop())\n  // }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationPosition: number = 100\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationPosition\n    if (this.animationCounter >= this.animationPosition / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","SMG_INDEX","gainNode","createGain","gain","value","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","prevX","prevY","maxHealth","state","Idling","previousState","animationPosition","moving","left","right","up","down","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","resetMoving","resetBlocked","calculateNextCoordinates","nextX","x","nextY","y","maxSpeedDiagonal","maxSpeed","checkIfBlockedByCreature","c","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","collisionBox","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","row","col","mapX","width","SWVertexRow","Math","floor","CONFIG","TILE_SIZE","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","direction","dx","dy","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","yUnchanged","initializeHealth","healthPercentage","health","getHealthColor","resetAnimation","setState","newState","CreatureState","Level","currentLevel","startingLevel","lastLevel","totalNumberOfMaps","ConcreteEnemy","constructor","pathfindingInterval","super","sprite","Zerg","attackSpeed","updateMapPosition","update","player","enemies","Dying","Decaying","target","stuck","checkIfStuck","Attacking","checkForCollisionWithPlayer","checkForCollisionWithOtherEnemies","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","Moving","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","move","updateTileDeltas","stateManager","getState","PLAYING","advanceAnimation","draw","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","ENEMY_STATE","debug_drawState","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","takeDamage","damageAmount","playEnemyHit","die","playEnemyDeath","numberOfSpritesInAnimation","attacking","walking","generatePathNodes","round","abs","findShortestPath","pathfindingPeriod","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","beginPath","moveTo","center","lineTo","stroke","fillStyle","font","fillText","toString","p","forEach","n","i","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Enemy","sin","attackCooldown","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","CANVAS_HEIGHT","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","every","yIsStatic","playSMG","dealDamage","getDamage","Map","mapData","loadMap","filter","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","Object","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","getColor","rect","fill","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","shootingCooldown","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","a","s","d","keyupHandler","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","xVel","yVel","FEATURES","SCATTER_PROJECTILES","randomFactorX","random","randomFactorY","setShooting","isShooting","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","PI","intermediateIntervalX","intermediateIntervalY","point","Sprites","callback","_reject","spriteSheet","Image","src","url","SpriteZerg","spriteLocations","flip","NE","SE","SW","NW","spriteSize","spriteStep","enemy","playerCoordinates","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","enemyState","SPRITE_STEP","cBox","px","py","save","translate","scale","drawImage","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","lastFrameTime","frameElapsedTime","FPS_ARR","FPS","now","performance","unshift","reduce","sum","current","GameAssets","startRow","startCol","path","rowEnd","colEnd","PathNode","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","toggleRender","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","animationCounter","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","GAME_OVER","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}