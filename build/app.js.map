{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/AnimationState.ts","webpack://retro-2d-game-engine/./src/app/domain/AttackEdgeCases.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationAttacking.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationDecaying.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationDying.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationIdling.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationMoving.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/index.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/domain/widgets/DamageNumbers.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/DecaySprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/ZergSprite.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameTime.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/math/MathUtils.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static PLAYER_DEATH: AudioBuffer[] = []\n\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static PLAYER_HIT: AudioBuffer[] = []\n  private static PLAYER_HIT_INDEX = 0\n  private static PLAYER_HIT_READY: boolean = true\n\n  private static ENEMY_ATTACK: AudioBuffer[] = []\n  private static ENEMY_ATTACK_MISS: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/player_death_1.wav'),\n\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/player_hit_1.mp3'),\n      load('./audio/player_hit_2.mp3'),\n      load('./audio/player_hit_3.mp3'),\n      load('./audio/player_hit_4.mp3'),\n      load('./audio/player_hit_5.mp3'),\n\n      load('./audio/enemy_attack_1.wav'),\n      load('./audio/enemy_attack_2.wav'),\n      load('./audio/enemy_attack_miss.wav'),\n\n      load('./audio/enemy_hit_1.wav'),\n      load('./audio/enemy_hit_2.wav'),\n      load('./audio/enemy_hit_3.wav'),\n\n      load('./audio/enemy_death_1.wav'),\n      load('./audio/enemy_death_2.wav'),\n      load('./audio/enemy_death_3.wav'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.PLAYER_DEATH[0] = soundFxFiles[0]\n\n    this.SMG[0] = soundFxFiles[1]\n    this.SMG[1] = soundFxFiles[2]\n    this.SMG[2] = soundFxFiles[3]\n    this.SMG[3] = soundFxFiles[4]\n    this.SMG[4] = soundFxFiles[5]\n\n    this.CRATE_HIT[0] = soundFxFiles[6]\n\n    this.PLAYER_HIT[0] = soundFxFiles[7]\n    this.PLAYER_HIT[1] = soundFxFiles[8]\n    this.PLAYER_HIT[2] = soundFxFiles[9]\n    this.PLAYER_HIT[3] = soundFxFiles[10]\n    this.PLAYER_HIT[4] = soundFxFiles[11]\n\n    setLoadedPercentage(0.5)\n\n    this.ENEMY_ATTACK[0] = soundFxFiles[12]\n    this.ENEMY_ATTACK[1] = soundFxFiles[13]\n\n    this.ENEMY_ATTACK_MISS[0] = soundFxFiles[14]\n\n    this.ENEMY_HIT[0] = soundFxFiles[15]\n    this.ENEMY_HIT[1] = soundFxFiles[16]\n    this.ENEMY_HIT[2] = soundFxFiles[17]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[18]\n    this.ENEMY_DEATH[2] = soundFxFiles[19]\n    this.ENEMY_DEATH[2] = soundFxFiles[20]\n\n    setLoadedPercentage(1.0)\n  }\n\n  public static playPlayerDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.PLAYER_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playPlayerHit(): void {\n    if (this.PLAYER_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.PLAYER_HIT[this.PLAYER_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.PLAYER_HIT_INDEX = ++this.PLAYER_HIT_INDEX % this.PLAYER_HIT.length // Shuffle\n\n    this.PLAYER_HIT_READY = false\n    setTimeout(() => { this.PLAYER_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyAttack(): void {\n    const playSound = context.createBufferSource()\n\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_ATTACK.length)\n    playSound.buffer = this.ENEMY_ATTACK[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playEnemyAttackMiss(): void {\n    const playSound = context.createBufferSource()\n\n    playSound.buffer = this.ENEMY_ATTACK_MISS[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_HIT.length)\n    playSound.buffer = this.ENEMY_HIT[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 200)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_DEATH.length)\n    playSound.buffer = this.ENEMY_DEATH[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport GameTime from '@app/infrastructure/GameTime'\n\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\n\nexport default abstract class AnimationState {\n  protected sprite: CreatureSprite\n\n  protected animationLength   : number // ms\n  protected animationProgress : number // ms\n\n  protected numberOfSpritesInAnimation : number // integer\n  protected animationSpritePosition    : number // integer\n\n  public animationFinished: boolean\n  \n  public advanceAnimation(): void {\n    this.animationProgress = this.animationProgress + GameTime.elapsedTimeFactor\n    const animationProgressPercentage = this.animationProgress / this.animationLength\n    this.animationSpritePosition = Math.floor(animationProgressPercentage * this.numberOfSpritesInAnimation) % this.numberOfSpritesInAnimation\n\n    this.animationFinished = animationProgressPercentage >= 1.0\n  }\n\n  public resetAnimation(): void {\n    this.animationProgress = 0\n    this.animationSpritePosition = 0\n  }\n\n  public draw(c: Creature, playerCoordinates: Point): void {\n    this.sprite.draw(c, playerCoordinates, this.animationSpritePosition)\n  }\n}\n","enum AttackEdgeCases {\n  Miss     = 'Miss',\n  Critical = 'Critical', // TODO: Implement critical strike\n}\n\nexport default AttackEdgeCases","import * as CONFIG from '@app/configuration/config.json'\n\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\nimport { Directions, MovingDirections, getDirectionBasedOnAngle } from '@app/infrastructure/Directions'\n\nimport Map from '@app/domain/map/Map'\nimport CreatureState from '@app/domain/CreatureState'\nimport { Widget } from '@app/domain/widgets/DamageNumbers'\n\nexport default abstract class Creature {\n  private prevHistoryLength = 8\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n\n  public nextX: number\n  public nextY: number\n\n  public row: number\n  public col: number\n\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number         // Derived from this.speed\n  public maxSpeedDiagonal: number // Derived from this.speed\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationSpritePosition: number = 0\n\n  public direction: Directions\n\n  // Used for sprite orientation\n  // TODO: Find a better name\n  public movingDirections: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public moving: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected widgets: { [key: string]: Widget } = {}\n  \n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    private speed: number,\n    healthPercentage: number,\n  ) {\n    this.maxSpeed = this.speed\n    this.maxSpeedDiagonal = Math.sin(45) * this.speed\n\n    this.initializeHealth(healthPercentage)\n    this.updateMapPosition()\n  }\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    this.movingDirections.left  = false\n    this.movingDirections.right = false\n    this.movingDirections.up    = false\n    this.movingDirections.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  // TODO: This is not 100% correct, it's just an estimation based on previous frame's length\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement, false)\n    }\n    if (this.moving.right) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement, false)\n    }\n    if (this.moving.up) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement, false)\n    }\n    if (this.moving.down) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement, false)\n    }\n  }\n\n  protected move(): void {\n\n    if (this.moving.left && !this.blocked.left && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement)\n    }\n    if (this.moving.right && !this.blocked.right && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement)\n    }\n\n    if (this.moving.up && !this.blocked.up && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement)\n    }\n    if (this.moving.down && !this.blocked.down && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement)\n    }\n\n    this.updateMapPosition()\n  }\n\n  // TODO: Maybe find a better solution for this\n  private horizontalMovementControlsAreNotJammed() { // Detect control jamming by pressing `left` & `right` at the same time\n    return (this.moving.left && this.moving.right) === false\n  }\n  private verticalMovementControlsAreNotJammed() { // Detect control jamming by pressing `up` & `down` at the same time\n    return (this.moving.up && this.moving.down) === false\n  }\n\n  private movementAccumulator: { [key in MovingDirections]: number } = {\n    left  : 0.0,\n    right : 0.0,\n    up    : 0.0,\n    down  : 0.0,\n  }\n\n  /**\n   * For this Game Engine we want pixelated movement, meaning that the movement amounts are Integer values\n   *\n   * Slow game speed:\n   *   When the game is slowed down enough that one frame worth of movement is below 1,\n   *   the `movementAmountDecimalPart` is sent to the `movementAccumulator`, and the `movementAccumulator`\n   *   is added to the next movement calculation.\n   *   This means that it can take, for example, 3 frames to move 1 pixel.\n   *\n   * Fast game speed:\n   *   When the game is sped up so that one frame worht of movement is above 1,\n   *   we want to preserve the spillover `movementAmountDecimalPart` and add it to\n   *   the next movement calculation.\n   *\n   * This functions makes that happen - and the result is smooth Player/Creature movement :)\n   *\n   * @param direction  - One of four possible `MovingDirections`\n   * @param isDiagonalMovement - Specifies whether the movement is diagonal or not\n   * @param accumulate - We don't want to accumulate when calling from `calculateNextCoordinates()`\n   * @returns - Integer number of pixels to move\n   */\n  private calculateMovementAmountPixels(direction: MovingDirections, isDiagonalMovement: boolean, accumulate = true): number {\n    const movementAmount = isDiagonalMovement\n      ? (GameTime.elapsedTimeFactor * this.maxSpeedDiagonal) + this.movementAccumulator[direction]\n      : (GameTime.elapsedTimeFactor * this.maxSpeed        ) + this.movementAccumulator[direction]\n    const movementAmountPixels = Math.floor(movementAmount)\n\n    if (accumulate) {\n      const movementAmountDecimalPart = (movementAmount % 1)\n      this.movementAccumulator[direction] = movementAmountDecimalPart\n    }\n\n    return movementAmountPixels\n  }\n\n  protected updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  protected updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n\n    ///////////////////////////////////////////////////////////////////////////\n    // West\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.left) {\n      wall = Map.walls[this.row][this.col - 1] // West\n      if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n        this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        this.movingDirections.left = false\n      }\n\n      const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the Creature's Tile\n        wall = Map.walls[SWVertexRow][this.col - 1] // South West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n\n      const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[NWVertexRow][this.col - 1] // North West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // East\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.right) {\n      wall = Map.walls[this.row][this.col + 1] // East\n      if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n        this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        this.movingDirections.right = false\n      }\n\n      const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the Creature's Tile\n        wall = Map.walls[SEVertexRow][this.col + 1] // South East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n\n      const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[NEVertexRow][this.col + 1] // North East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // North\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.up) {\n      wall = Map.walls[this.row - 1][this.col] // North\n      if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n        this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        this.movingDirections.up = false\n      }\n\n      const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NEVertexCol] // North East\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n\n      const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NWVertexCol] // North West\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // South \n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.down) {\n      wall = Map.walls[this.row + 1][this.col] // South\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        this.movingDirections.down = false\n      }\n    }\n\n    const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n    if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SEVertexCol] // South East\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n\n    const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n    if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SWVertexCol] // South West\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > this.prevHistoryLength) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > this.prevHistoryLength) { this.prevY.shift() }\n  }\n\n  protected updateDirection(targetCreature: Creature): void {\n    if (this.state === CreatureState.Attacking) {\n      this.updateDirectionWhenAttacking(targetCreature)\n    }\n    else {\n      this.updateDirectionWhenMoving()\n    }\n  }\n\n  private updateDirectionWhenMoving(): void {\n    const direction: string[] = []\n\n    if (this.movingDirections.down && this.blocked.down === false) {\n      direction.push(Directions.S)\n    }\n    else if (this.movingDirections.up && this.blocked.up === false) {\n      direction.push(Directions.N)\n    }\n\n    if (this.movingDirections.right && this.blocked.right === false) {\n      direction.push(Directions.E)\n    }\n    else if (this.movingDirections.left && this.blocked.left === false) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  private updateDirectionWhenAttacking(targetCreature: Creature): void {\n    const theta = angleBetweenPoints(targetCreature, this)\n    this.direction = getDirectionBasedOnAngle(theta)\n  }\n\n  protected checkIfMoving(): boolean {\n    // Check if all of the recorded prevX & prevY positions are the same\n    const xUnchanged = this.prevX.every((prevX, i) => (i === 0) ? true : (prevX === this.prevX[0]))\n    const yUnchanged = this.prevY.every((prevY, i) => (i === 0) ? true : (prevY === this.prevY[0]))\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n  Removed,\n}\n\nexport default CreatureState\n","import Map from '@app/domain/map/Map'\n\nimport { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n\n    LevelTimer.reset()\n  }\n\n  public static nextLevel() {\n    Map.clear()\n\n    Level.currentLevel++\n\n    LevelTimer.reset()\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n\nimport * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\n\nexport class LevelTimer {\n  public static timeSpentOnCurrentLevel = 0 // ms\n\n  public static incrementTimeSpentOnCurrentLevel() {\n    LevelTimer.timeSpentOnCurrentLevel += GameTime.frameElapsedTime\n  }\n\n  public static reset() {\n    LevelTimer.timeSpentOnCurrentLevel = 0\n  }\n\n  public static debug_displayTimeSpentOnCurrentLevel() {\n    context.beginPath()\n      context.fillStyle = '#9999ff'\n      context.font = '8px Monospace'\n      const levelTimeInSeconds = Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)\n      context.fillText(`Level ${Level.currentLevel} Time: ${levelTimeInSeconds}`, 10, CONFIG.CANVAS_HEIGHT - 24)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport {\n  ConcreteEnemyAnimationIdling,\n  ConcreteEnemyAnimationMoving,\n  ConcreteEnemyAnimationAttacking,\n  ConcreteEnemyAnimationDying,\n  ConcreteEnemyAnimationDecaying,\n} from './animations'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected target: Point\n\n  // TODO: Extract to CreatureState objects\n  // TODO: Adjust the feeling of enemy attack & animation\n  protected attackSpeed = 0.45 // seconds\n\n  protected maxAttackCooldown: number = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n\n  constructor(\n    x: number,\n    y: number,\n    speed: number,\n    healthPercentage: number,\n    pathfindingTimerStart: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), speed, healthPercentage)\n\n    this.pathfindingTimer = (9 * pathfindingTimerStart) % this.pathfindingInterval\n\n    this.animations = {\n      [CreatureState.Idling   ]: new ConcreteEnemyAnimationIdling(),\n      [CreatureState.Moving   ]: new ConcreteEnemyAnimationMoving(),\n      [CreatureState.Attacking]: new ConcreteEnemyAnimationAttacking(),\n      [CreatureState.Dying    ]: new ConcreteEnemyAnimationDying(),\n      [CreatureState.Decaying ]: new ConcreteEnemyAnimationDecaying(),\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.update()`\n  public update(player: Player): void {\n\n    if (this.state >= CreatureState.Dying) {\n      super.update(player)\n\n      if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n        this.advanceAnimation()\n      }\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      this.attack(player)\n\n      const attackInProgress = this.attackCooldown !== this.maxAttackCooldown\n\n      if (\n        targetIsInRange  === false &&\n        attackInProgress === false\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n    this.checkForCollisionWithOtherEnemies(player) // Must come before move()\n    this.checkForCollisionWithPlayer(player)       // Must come before move()\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateTileDeltas()\n\n    this.adjustCollisionWithWalls() // Must come after move()\n\n    this.updateDirection(player) // Must come after adjustCollisionWithWalls()\n\n    super.update(player)\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.draw()`\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      if (this.state < CreatureState.Dying) {\n        this.debug_drawCollisionBox(player)\n      }\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n\n    super.draw(player)\n\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n  }\n\n  // TODO: Extract to ConcreteEnemyAnimationLifecycle object (or something like that)\n  protected advanceAnimation(): void {\n    if (this.state === CreatureState.Attacking) {\n      this.animations[this.state].advanceAnimation()\n    }\n    else if (this.state === CreatureState.Moving) {\n      this.animations[this.state].advanceAnimation()\n    }\n    else if (this.state === CreatureState.Dying) {\n      this.animations[this.state].advanceAnimation()\n      if (this.animations[this.state].animationFinished) {\n        this.setState(CreatureState.Decaying)\n      }\n    }\n    else if (this.state === CreatureState.Decaying) {\n      this.animations[this.state].advanceAnimation()\n      if (this.animations[this.state].animationFinished) {\n        this.setState(CreatureState.Removed)\n      }\n    }\n  }\n\n  // TODO: Move to Enemy\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingTimer === 0) {\n        this.pathfindingNodes = generatePathNodes( // TODO: Move to Pathfinding or Player\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingTimer += GameTime.frameElapsedTime // Game speed independent\n      if (this.pathfindingTimer > this.pathfindingInterval) {\n        this.pathfindingTimer = 0\n      }\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n      this.movingDirections.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n      this.movingDirections.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n      this.movingDirections.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n      this.movingDirections.up = true\n    }\n  }\n\n  // TODO: Move to Creature since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n         0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n         0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationAttacking extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 420\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 5\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationDecaying extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Decay\n\n  protected animationLength   = 10000\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 3\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationDying extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 500\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 7\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationIdling extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 0\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 0\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationMoving extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 330\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 7\n}","import ConcreteEnemyAnimationIdling from './ConcreteEnemyAnimationIdling'\nimport ConcreteEnemyAnimationMoving from './ConcreteEnemyAnimationMoving'\nimport ConcreteEnemyAnimationAttacking from './ConcreteEnemyAnimationAttacking'\nimport ConcreteEnemyAnimationDying from './ConcreteEnemyAnimationDying'\nimport ConcreteEnemyAnimationDecaying from './ConcreteEnemyAnimationDecaying'\n\nexport {\n  ConcreteEnemyAnimationIdling,\n  ConcreteEnemyAnimationMoving,\n  ConcreteEnemyAnimationAttacking,\n  ConcreteEnemyAnimationDying,\n  ConcreteEnemyAnimationDecaying,\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport AnimationState from '@app/domain/AnimationState'\nimport AttackEdgeCases from '@app/domain/AttackEdgeCases'\nimport Player from '@app/domain/player/Player'\nimport Map from '@app/domain/map/Map'\nimport DamageNumbers, { DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingTimer: number = 0\n  protected pathfindingInterval: number = 500 // ms\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  // TODO: Move this to Weapon\n  protected readonly attackSpeed: number // seconds\n  protected attackCooldown    : number // ms\n  protected maxAttackCooldown : number // ms\n\n  protected animations: { [key in CreatureState]?: AnimationState }\n\n  constructor(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, collisionBox, speed, healthPercentage)\n\n    // TODO: Move this function to Weapon\n    this.resetAttackCooldown()\n\n    // Widgets\n    this.widgets.damageNumbers = new DamageNumbers()\n  }\n\n  public draw(player: Player): void {\n    this.animations[this.state].draw(this, { x: player.x, y: player.y })\n\n    Object.values(this.widgets).forEach(widget => widget.render(player.x, player.y)) // Render widgets\n\n  }\n\n  public update(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (e.state >= CreatureState.Dying) {\n        return\n      }\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n\n  protected targetInEffectiveRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    const outerRangeMultiplier = 4\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals * outerRangeMultiplier\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      if (\n        this.targetInEffectiveRange(p) &&\n        this.thereAreObstaclesBetweenPlayerAndThisEnemy === false // Miss when target goes behind an obstacle!\n      ) {\n        SoundFX.playEnemyAttack()\n        this.dealDamage(p)\n      }\n      else { // Attack is a miss!\n        SoundFX.playEnemyAttackMiss()\n        this.dealDamage(p, AttackEdgeCases.Miss)\n      }\n\n    }\n    else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected attackIsMiss(): boolean {\n    return Math.random() >= 0.7\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = this.maxAttackCooldown\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health -= damageAmount\n\n    this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount))\n\n    if (this.health <= 0) {\n      this.die()\n    }\n    else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Dying)\n  }\n\n  protected dealDamage(p: Player, attackEdgeCase: AttackEdgeCases = null) {\n    if (attackEdgeCase === AttackEdgeCases.Miss) {\n      p.takeDamage(0, attackEdgeCase)\n    }\n    else {\n      p.takeDamage(this.getDamage())\n    }\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimations()\n  }\n\n  protected resetAnimations() {\n    Object.values(this.animations).forEach(( a: AnimationState ) => a.resetAnimation())\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static enemiesDecaying: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static getDecayingOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemiesDecaying.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  public static clear(): void {\n    Map.enemiesDecaying = []\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      if (e.state === CreatureState.Decaying) {\n        // Remove from `enemies` & add to `enemiesDecaying`\n        Map.enemies.splice(i, 1)\n        Map.enemiesDecaying.push(e)\n      }\n      e.update(this.player)\n    })\n\n    Map.enemiesDecaying.forEach((e, i) => {\n      e.update(this.player)\n      if (e.state === CreatureState.Removed) {\n        Map.enemiesDecaying.splice(i, 1)\n      }\n    })\n\n    this.openPortalWhenAllEnemiesAreKilled()\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (\n      Map.exitPortal.isOpen === false &&\n      (\n        Map.enemies.length === 0 ||\n        Map.enemies.every(e => e.state >= CreatureState.Dying)\n      )\n    ) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n\n    // First draw decaying enemies\n    Map.getDecayingOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n\n    // Then draw alive enemies on top\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .filter(e => e.state !== CreatureState.Removed)\n      .forEach(e => {\n        if (e.state === CreatureState.Removed) {\n          return\n        }\n        e.draw(this.player)\n      })\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, 0.125, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = '50, 120, 50'\n  protected static closedColor = '180, 50, 50'\n  protected static opacityBaseline = 0.05\n  protected static opacityRange    = 0.2\n\n  private opacity = Portal.opacityRange\n\n  // Adjust for animation feel\n  private animationElapsed              = 0    // Milliseconds\n  private animationLength               = 4000 // Milliseconds\n  private animationCompletionPercentage = 0.0  // 0.0 - 1.0\n\n  draw(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public advanceAnimation() {\n    this.animationElapsed = (this.animationElapsed + GameTime.elapsedTimeFactor) % this.animationLength\n\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n\n    const sineFunction = Math.sin(this.animationCompletionPercentage * (Math.PI * 2)) // returns: -1 to 1 (approximately, because of float arithmetic)\n\n    this.opacity = Portal.opacityBaseline + ((sineFunction + 1) / 2) * Portal.opacityRange\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return `rgba(${Portal.openColor}, ${this.opacity})`\n    }\n    else {\n      return `rgba(${Portal.closedColor}, ${this.opacity})`\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport AttackEdgeCases from '@app/domain/AttackEdgeCases'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport DamageNumbers, { DamageNumberColors, DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n\n  // TODO: Adjust for attack feeling\n  private attackSpeed = 0.1 // seconds\n  private attackCooldown = 0\n  private maxAttackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super(x, y, new CollisionBox(12, 12), 0.18, 1)\n\n    // Widgets\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_ON_PLAYER) {\n      this.widgets.damageNumbers = new DamageNumbers() // TODO: Move to Creature?\n    }\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls() // Must come after move()\n    this.updateTileDeltas()         // Must come after adjustCollisionWithWalls()\n    this.updateMapPosition()        // Must come after adjustCollisionWithWalls()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        this.movingDirections.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        this.movingDirections.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        this.movingDirections.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        this.movingDirections.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public shoot(): void {\n    if (this.attackCooldown >= 0) {\n      this.attackCooldown -= GameTime.frameElapsedTime\n      if (this.attackCooldown < 0) {\n        this.attackCooldown = 0\n      }\n    }\n\n    if (this.shooting === false) {\n      return\n    }\n\n    if (this.attackCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG()\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = this.maxAttackCooldown\n  }\n\n  public takeDamage(damageAmount: number, attackEdgeCase: AttackEdgeCases = null): void {\n    this.health = this.health - damageAmount\n\n    if (this.widgets.damageNumbers) {\n      this.widgets.damageNumbers.push(\n        DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount, DamageNumberColors.gray, attackEdgeCase)\n      )\n    }\n\n    if (this.health <= 0) {\n      this.die()\n    }\n    else {\n      switch (attackEdgeCase) {\n        case null:\n          SoundFX.playPlayerHit()\n          break\n      }\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n\n    Object.values(this.widgets).forEach(widget => widget.render(this.x, this.y)) // Render widgets\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n       0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n       0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        if (e.state >= CreatureState.Dying) {\n          return\n        }\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n\n    SoundFX.playPlayerDeath()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport CreatureState from '@app/domain/CreatureState'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n\n        if (e.state >= CreatureState.Dying) {\n          return\n        }\n\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from \"@app/infrastructure/game/Game\"\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport GAME_STATES from \"@app/infrastructure/game/game_states/GameStates\"\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport AttackEdgeCases from '@app/domain/AttackEdgeCases'\nexport interface IWidget {\n  update(): void\n  render(playerX: number, playerY: number): void\n}\n\nexport enum DamageNumberColors {\n  red    = '220, 50, 50',\n  yellow = '180, 180, 50',\n  gray   = '180, 180, 180',\n}\n\nexport class DamageNumberFactory {\n  public static create(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    damage: number,\n    color: DamageNumberColors = DamageNumberColors.red,\n    attackEdgeCase: AttackEdgeCases = null,\n  ): DamageNumber {\n    return new DamageNumber(\n      x,\n      y - collisionBox.halfHeight * 0.9,\n      (Math.random() * collisionBox.height)       - collisionBox.halfHeight,\n      (Math.random() * collisionBox.width  / 1.5) - collisionBox.halfWidth / 1.5,\n      attackEdgeCase ? attackEdgeCase : damage.toString(),\n      color\n    )\n  }\n}\n\nexport class DamageNumber {\n  constructor(\n    public x: number,\n    public y: number,\n    protected randomFactorX: number,\n    protected randomFactorY: number,\n    private damage: string,\n    private color: string\n  ) {\n    this.damageTextHalfWidth = (this.damage.length * this.fontWidth) / 2\n  }\n\n  public animationFinished = false\n\n  // Adjust for animation feel\n  private animationElapsed              = 0   // Milliseconds\n  private animationLength               = 800 // Milliseconds\n  private animationCompletionPercentage = 0.0 // 0.0 - 1.0\n  private maxHeight                     = 30  // px\n\n  public advanceAnimation() {\n    this.animationElapsed += GameTime.elapsedTimeFactor\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n    if (this.animationHasFinished()) {\n      this.animationFinished = true\n    }\n  }\n  public animationHasFinished() {\n    return (this.animationElapsed >= this.animationLength)\n  }\n\n  private fontSize = 8\n  private font = `${this.fontSize}px Monospace`\n  private fontWidth = this.fontSize / 2\n  private damageTextHalfWidth: number = 0\n\n  public draw(playerX: number, playerY: number) {\n    context.beginPath()\n      const opacity = 1 - this.animationCompletionPercentage\n      context.fillStyle = `rgba(${this.color}, ${opacity})`\n      context.font = this.font\n      context.fillText(\n        `${this.damage}`,\n        this.randomFactorX + (this.x + Canvas.center.x - playerX) - this.damageTextHalfWidth,\n        this.randomFactorY + (this.y + Canvas.center.y - playerY) - (this.animationCompletionPercentage * this.maxHeight),\n      )\n    context.stroke()\n  }\n}\n\nexport default class DamageNumbers implements IWidget {\n\n  private damageNumbers: DamageNumber[] = []\n\n  public update(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.damageNumbers.forEach((dmgNum, i) => {\n        dmgNum.advanceAnimation()\n\n        if (dmgNum.animationFinished === true) {\n          this.damageNumbers.splice(i, 1) // Remove the DamageNumber\n        }\n      })\n    }\n  }\n\n  public render(playerX: number, playerY: number): void {\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_SHOW) {\n      this.feature_drawDamageNumbers(playerX, playerY)\n    }\n  }\n\n  public push(damageNumber: DamageNumber): void {\n    this.damageNumbers.push(damageNumber)\n  }\n\n\n  public feature_drawDamageNumbers(playerX: number, playerY: number) {\n    this.damageNumbers.forEach(dmgNumber => dmgNumber.draw(playerX, playerY))\n  }\n}\n\nexport type Widget = IWidget & DamageNumbers","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport ZergSprite from './sprites/ZergSprite'\nimport DecaySprite from './sprites/DecaySprite'\n\nexport default class Sprites {\n  public static Zerg : CreatureSprite = new ZergSprite()\n  public static Decay: CreatureSprite = new DecaySprite()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Decay.load(() => setLoadedPercentage(0.5))\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Creature from '@app/domain/Creature'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  protected abstract url: string\n  public abstract draw(c: Creature, playerCoordinates: Point, animationSpritePosition?: number): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\n\nimport CreatureSprite from './CreatureSprite'\nimport Creature from '@app/domain/Creature'\n\nexport default class DecaySprite extends CreatureSprite {\n  public url: string = './graphics/spritesheets/decay.png'\n\n\n  private spriteProperties = {\n    decay: {\n      width: 56,\n      height: 56,\n      gapX: 3,\n      gapY: 3,\n    }\n  }\n\n  private manuallyCalculatedSprites = {\n    decay: [\n      {\n        sy: 2 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n      {\n        sy: 1 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n      {\n        sy: 0 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n    ]\n  }\n\n  constructor() {\n    super()\n  }\n\n  public draw(creature: Creature, playerCoordinates: Point, animationSpritePosition: number) {\n    this.drawSpritedecay(creature, playerCoordinates, animationSpritePosition)\n  }\n\n  private drawSpritedecay(\n    creature: Creature,\n    playerCoordinates: Point,\n    animationSpritePosition: number\n  ) {\n\n    const { x, y } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    const desinationWidth  = Math.floor(this.spriteProperties.decay.width  * (creature.collisionBox.width  / 15))\n    const desinationHeight = Math.floor(this.spriteProperties.decay.height * (creature.collisionBox.height / 20))\n\n    const totalColumnsInSprite = 4\n    const randomSxColumn = (creature.x + creature.y) % totalColumnsInSprite\n    const randomSx = 2 + (randomSxColumn * (this.spriteProperties.decay.width + this.spriteProperties.decay.gapX))\n\n    context.drawImage(\n      this.spriteSheet,\n      randomSx,\n      this.manuallyCalculatedSprites.decay[animationSpritePosition].sy,\n      this.spriteProperties.decay.width,  // Draw width\n      this.spriteProperties.decay.height, // Draw height\n      Canvas.center.x + (x - px - desinationWidth  / 2), // Canvas Desination X\n      Canvas.center.y + (y - py - desinationHeight / 2), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\n\nimport CreatureSprite from './CreatureSprite'\nimport Creature from '@app/domain/Creature'\n\nexport default class ZergSprite extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n\n  private spriteProperties = {\n    default: {\n      width: 32,\n      height: 32,\n    },\n    dying: {\n      width: 65,\n      height: 53,\n      gapX: 3,\n      sy: 548,\n    }\n  }\n\n  private manuallyCalculatedSprites = {\n    dying: [\n      {\n        sx: 0 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 1 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 2 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 3 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 4 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 5 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 6 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n    ]\n  }\n\n  constructor() {\n    super()\n  }\n\n  public draw(creature: Creature, playerCoordinates: Point, animationSpritePosition: number) {\n    if (creature.state === CreatureState.Dying) {\n      this.drawSpriteDying(creature, playerCoordinates, animationSpritePosition)\n    }\n    else {\n      const spriteWidth  = this.spriteProperties.default.width\n      const spriteHeight = this.spriteProperties.default.height\n      const spriteStep: Point = { x: spriteWidth + 11, y: spriteHeight + 10 }\n      const spriteOffsets: Point = this.getSpriteOffsets(creature.state, spriteStep)\n      const spriteLocation = this.spriteLocations[creature.direction]\n      this.drawSprite(creature, playerCoordinates, spriteOffsets, spriteStep, spriteLocation, spriteWidth, spriteHeight, animationSpritePosition)\n    }\n  }\n\n  private getSpriteOffsets(creatureState: CreatureState, spriteStep: Point) {\n    const defaultSpriteOffset = {\n      x: 7,\n      y: 5\n    }\n    switch (creatureState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return defaultSpriteOffset\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: defaultSpriteOffset.x,\n          y: defaultSpriteOffset.y + (ATTACK_SPRITES_ROW * spriteStep.y)\n        }\n    }\n  }\n\n  private drawSpriteDying(\n    creature: Creature,\n    playerCoordinates: Point,\n    animationSpritePosition: number\n  ) {\n\n    const { x, y } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    const desinationWidth  = Math.floor(this.spriteProperties.dying.width  * (creature.collisionBox.width  / 20))\n    const desinationHeight = Math.floor(this.spriteProperties.dying.height * (creature.collisionBox.height / 20))\n\n    context.drawImage(\n      this.spriteSheet,\n      this.manuallyCalculatedSprites.dying[animationSpritePosition].sx,\n      this.manuallyCalculatedSprites.dying[animationSpritePosition].sy,\n      this.spriteProperties.dying.width,  // Draw width\n      this.spriteProperties.dying.height, // Draw height\n      Canvas.center.x + (x - px - desinationWidth  / 2), // Canvas Desination X\n      Canvas.center.y + (y - py - desinationHeight / 2), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n  }\n\n  private drawSprite(\n    creature: Creature,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteStep: Point,\n    spriteLocation: { col: number, flip: boolean },\n    spriteWidth: number,\n    spriteHeight: number,\n    animationSpritePosition: number,\n  ) {\n\n    const { x, y, collisionBox: cBox } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    const desinationWidth  = creature.collisionBox.width  + 2\n    const desinationHeight = creature.collisionBox.height + 2\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + spriteStep.y * Math.floor(animationSpritePosition),\n      spriteWidth,\n      spriteHeight,\n      spriteLocation.flip ? 0 - spriteWidth / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                   : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\ncontext.imageSmoothingEnabled = false // Disables anti-aliasing on Chrome\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","import { Pi2Decimals, radiansToDegrees } from '@app/infrastructure/math/MathUtils'\n\nexport enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n\nexport enum MovingDirections {\n  up    = 'up',\n  right = 'right',\n  down  = 'down',\n  left  = 'left',\n}\n\nconst directionsAngleRangesLUT: { [key in Directions]: { min: number, max: number }} = {\n  [Directions.E ]: { min: 337, max: 22,  }, // min & max are degrees\n  [Directions.SE]: { min: 22,  max: 67,  },\n  [Directions.S ]: { min: 67,  max: 112, },\n  [Directions.SW]: { min: 112, max: 157, },\n  [Directions.W ]: { min: 157, max: 202, },\n  [Directions.NW]: { min: 202, max: 247, },\n  [Directions.N ]: { min: 247, max: 292, },\n  [Directions.NE]: { min: 292, max: 337, },\n}\n\n/*\n * Angles:\n *            N\n *            |\n *           270\n *   W - 180     0 - E\n *           90\n *            |\n *            S\n*/\nexport function getDirectionBasedOnAngle(theta: number): Directions {\n  if (theta < 0) {\n    theta = 2 * Math.PI - Math.abs(theta)\n  }\n  theta = radiansToDegrees(theta)\n\n  if (\n    theta >= 0 && theta < directionsAngleRangesLUT[Directions.E].max ||\n    theta >= directionsAngleRangesLUT[Directions.E].min && theta < 360 // deg\n  ) {\n    return Directions.E\n  }\n\n  const [ direction ] = Object.entries(directionsAngleRangesLUT).find(([direction, angleRange]) => {\n    return (theta >= angleRange.min && theta < angleRange.max)\n  })\n  return Directions[direction as Directions]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(lastFrameTime: number, frameElapsedTime: number): void {\n    if (!lastFrameTime) {\n      FPS = 0\n    } else {\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n    }\n  }\n\n  public static debug_drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class GameTime {\n  public static readonly ONE_SECOND = 1000\n\n  public static previousTimestamp = 0 // Milliseconds\n  public static frameElapsedTime  = 0 // Milliseconds\n\n  // Determines the game & animation speed\n  public static elapsedTimeFactor: number\n\n  public static setFrameElapsedTime(t: number) {\n    GameTime.frameElapsedTime  = t\n    GameTime.elapsedTimeFactor = CONFIG.GAME_SPEED * GameTime.frameElapsedTime\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\nimport { Pi2Decimals } from './math/MathUtils'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Pi2Decimals / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Pi2Decimals / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Pi2Decimals / 2 && angleBetweenNodes < Pi2Decimals) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === Pi2Decimals) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals && angleBetweenNodes < -Pi2Decimals / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -Pi2Decimals / 2) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\nimport GameTime from '../GameTime'\nimport FrameRate from '../FrameRate'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop(0)\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(timestamp: number): void {\n\n    if (GameTime.previousTimestamp === undefined) {\n      GameTime.previousTimestamp = timestamp\n    }\n    GameTime.setFrameElapsedTime(timestamp - GameTime.previousTimestamp)\n  \n    this.update()\n    this.render()\n    FrameRate.calculateFrameRate(GameTime.previousTimestamp, GameTime.frameElapsedTime)\n  \n    GameTime.previousTimestamp = timestamp\n    window.requestAnimationFrame((ts) => this.gameLoop(ts))\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.debug_drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      // Title\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n      \n      // Level Time\n      context.font = '16px Monospace'\n      context.fillStyle = '#9999ff'\n      context.fillText(\n        `Time: ${Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)} seconds`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2) + 30\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationProgress: number = 0\n  private animationLength: number = GameTime.ONE_SECOND\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationProgress = (this.animationProgress + GameTime.frameElapsedTime) % this.animationLength\n    if (this.animationProgress >= this.animationLength / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n\n      LevelTimer.incrementTimeSpentOnCurrentLevel()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n    if (CONFIG.DEBUG.SHOW_LEVEL_TIME) {\n      LevelTimer.debug_displayTimeSpentOnCurrentLevel()\n    }\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","export const Pi2Decimals = +Math.PI.toFixed(2)\n\nexport function random(min: number, max: number) {\n  return min + Math.floor(Math.random() * (max - min + 1))\n}\n\nexport function radiansToDegrees(radians: number) {\n  return radians * (180 / Math.PI)\n}","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n      player.movingDirections.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n      player.movingDirections.left = true\n    }\n    else {\n      player.moving.left = false\n      player.movingDirections.left = false\n\n      player.moving.right = false\n      player.movingDirections.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n      player.movingDirections.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n      player.movingDirections.up = true\n    }\n    else {\n      player.moving.up = false\n      player.movingDirections.up = false\n\n      player.moving.down = false\n      player.movingDirections.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","PLAYER_DEATH","SMG","CRATE_HIT","PLAYER_HIT","ENEMY_ATTACK","ENEMY_ATTACK_MISS","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","gainNode","createGain","gain","value","connect","destination","start","SMG_INDEX","length","PLAYER_HIT_READY","PLAYER_HIT_INDEX","setTimeout","randomIndex","Math","floor","random","ENEMY_HIT_READY","advanceAnimation","animationProgress","elapsedTimeFactor","animationProgressPercentage","animationLength","animationSpritePosition","numberOfSpritesInAnimation","animationFinished","resetAnimation","draw","c","playerCoordinates","sprite","AttackEdgeCases","constructor","x","y","collisionBox","speed","healthPercentage","prevHistoryLength","prevX","prevY","maxHealth","state","Idling","previousState","movingDirections","left","right","up","down","moving","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","widgets","movementAccumulator","maxSpeed","maxSpeedDiagonal","sin","initializeHealth","updateMapPosition","resetMoving","resetBlocked","calculateNextCoordinates","nextX","nextY","isDiagonalMovement","calculateMovementAmountPixels","MovingDirections","move","horizontalMovementControlsAreNotJammed","verticalMovementControlsAreNotJammed","direction","accumulate","movementAmount","movementAmountPixels","movementAmountDecimalPart","row","CONFIG","TILE_SIZE","col","updateTileDeltas","checkIfBlockedByCreature","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","mapX","width","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","targetCreature","Attacking","updateDirectionWhenAttacking","updateDirectionWhenMoving","Directions","S","N","E","W","directionString","join","theta","angleBetweenPoints","getDirectionBasedOnAngle","checkIfMoving","xUnchanged","every","i","yUnchanged","health","getHealthColor","CreatureState","Level","currentLevel","startingLevel","LevelTimer","reset","clear","lastLevel","totalNumberOfMaps","timeSpentOnCurrentLevel","frameElapsedTime","beginPath","fillStyle","font","levelTimeInSeconds","round","fillText","CANVAS_HEIGHT","stroke","ConcreteEnemy","pathfindingTimerStart","super","attackSpeed","maxAttackCooldown","GAME_SPEED","pathfindingTimer","pathfindingInterval","animations","ConcreteEnemyAnimationIdling","Moving","ConcreteEnemyAnimationMoving","ConcreteEnemyAnimationAttacking","Dying","ConcreteEnemyAnimationDying","Decaying","ConcreteEnemyAnimationDecaying","update","player","stateManager","getState","PLAYING","target","stuck","checkIfStuck","setState","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","attackInProgress","attackCooldown","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","checkForCollisionWithOtherEnemies","checkForCollisionWithPlayer","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","ENEMY_STATE","debug_drawState","Removed","generatePathNodes","abs","findShortestPath","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","moveTo","center","lineTo","toString","p","forEach","n","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Zerg","Decay","Enemy","damageNumbers","Object","values","widget","render","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","targetInEffectiveRange","xIsStatic","yIsStatic","playEnemyAttack","dealDamage","playEnemyAttackMiss","Miss","attackIsMiss","takeDamage","damageAmount","DamageNumberFactory","create","die","playEnemyHit","playEnemyDeath","attackEdgeCase","getDamage","newState","resetAnimations","a","Map","mapData","loadMap","enemies","filter","enemiesDecaying","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","getDecayingOnScreen","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","opacity","opacityRange","animationElapsed","animationCompletionPercentage","getColor","rect","fill","sineFunction","PI","opacityBaseline","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","s","d","keyupHandler","FEATURES","DAMAGE_NUMBERS_ON_PLAYER","checkForCollisionWithEnemies","shoot","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","setShooting","isShooting","dx","dy","xVel","yVel","SCATTER_PROJECTILES","randomFactorX","randomFactorY","playSMG","DamageNumberColors","gray","playPlayerHit","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","playPlayerDeath","directionX","directionY","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","intermediateIntervalX","intermediateIntervalY","point","red","DamageNumber","maxHeight","fontSize","fontWidth","damageTextHalfWidth","animationHasFinished","dmgNum","DAMAGE_NUMBERS_SHOW","feature_drawDamageNumbers","damageNumber","dmgNumber","Sprites","callback","_reject","spriteSheet","Image","src","url","DecaySprite","spriteProperties","decay","gapX","gapY","manuallyCalculatedSprites","sy","creature","drawSpritedecay","px","py","desinationWidth","desinationHeight","randomSx","drawImage","ZergSprite","spriteLocations","flip","NE","SE","SW","NW","default","dying","sx","drawSpriteDying","spriteWidth","spriteHeight","spriteStep","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","creatureState","defaultSpriteOffset","cBox","save","translate","scale","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","directionsAngleRangesLUT","min","max","radiansToDegrees","entries","find","angleRange","FPS_ARR","FPS","lastFrameTime","unshift","reduce","sum","current","GameAssets","GameTime","t","ONE_SECOND","previousTimestamp","startRow","startCol","path","rowEnd","colEnd","PathNode","enemy","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","Pi2Decimals","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","timestamp","undefined","setFrameElapsedTime","calculateFrameRate","requestAnimationFrame","ts","debug_drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","incrementTimeSpentOnCurrentLevel","GAME_OVER","SHOW_LEVEL_TIME","debug_displayTimeSpentOnCurrentLevel","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","radians","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}