{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/infrastructure/Game.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/peripherals/Gamepads.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","Enemy_1","Canvas_1","GameObjectFactory_1","Map01","gameObjects","enemies","grid","player","loadMap","forEach","e","update","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","length","createGameObject","push","healthPercentage","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","window","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","AudioLoader_1","Grid_1","Map_1","Player_1","Keyboard_1","Gamepads_1","Game","load","init","requestAnimationFrame","gameLoop","paused","render","clear","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","AudioContext","halfWidth","halfHeight","MapKeys","isBox","mapKey","startsWith","SoundFX_1","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","CollisionBox_1","Point_1","maxHealth","moving","left","right","up","down","collisionBox","maxSpeed","targetPathNodeIndex","health","console","log","movementPath","moveTowardsNode","move","drawCollisionBox","damageAmount","playEnemyHit","die","playEnemyDeath","pointToPointDistance","moveTowardsNextNode","strokeStyle","getHealthColor","lineWidth","beginPath","moveTo","lineTo","stroke","p1","p2","sqrt","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","Error","GameObject_1","color","playCrateHit","destructable","mapX","mapY","Raycaster_1","Crosshair_1","Projectile_1","rotation","sightLineLength","dyBottom","dxRight","shooting","shootingCooldown","projectiles","updateMapPosition","updateTileDeltas","shoot","dx","dy","xVel","abs","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","adjustCollisionWithGameObjects","atan2","fillStyle","fillText","font","cos","sin","hitPoint","hitObject","cast","drawRay","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","Raycaster","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","yIntercept","tileStepX","hitPointVertical","objectHitVertical","RAYCASTER","DEBUG","arc","PI","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","gameObjectHit","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","playerX","playerY","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","filter","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","Game_1","KeyCodes_1","keyCode","KEYBOARD_KEYS","w","a","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","toFixed","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static update() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update()\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    enemies.forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach(e => enemies.push(new Enemy(e.x, e.y, e.healthPercentage)))\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Canvas from '@app/infrastructure/Canvas'\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nexport default class Game {\n  public static paused: boolean = false\n\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  constructor() {\n    AudioLoader.load()\n\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n  }\n\n  public start(): void {\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private gameLoop(): void {\n    if (Game.paused === false) {\n      this.update()\n      this.render()\n    }\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Gamepads.update(this.player)\n    Canvas.update()\n    this.player.update()\n    this.map.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    this.map.draw()\n    this.player.draw()\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(): Promise<void> {\n    this.SMG[0] = await load('./audio/smg_1.wav')\n    this.SMG[1] = await load('./audio/smg_2.wav')\n    this.SMG[2] = await load('./audio/smg_3.wav')\n    this.SMG[3] = await load('./audio/smg_4.wav')\n    this.SMG[4] = await load('./audio/smg_5.wav')\n\n    this.CRATE_HIT[0] = await load('./audio/crate_hit_1.wav')\n\n    this.ENEMY_HIT[0] = await load('./audio/enemy_hit_1.mp3')\n    this.ENEMY_HIT[1] = await load('./audio/enemy_hit_2.mp3')\n    this.ENEMY_HIT[2] = await load('./audio/enemy_hit_3.mp3')\n    this.ENEMY_HIT[3] = await load('./audio/enemy_hit_4.mp3')\n    this.ENEMY_HIT[4] = await load('./audio/enemy_hit_5.mp3')\n\n    this.ENEMY_DEATH[0] = await load('./audio/enemy_die_1.mp3')\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","export default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load() {\n    await SoundFX.load()\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class Grid {\n  rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\n\nexport default class Enemy {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public collisionBox: CollisionBox = new CollisionBox(16, 16)\n  private maxSpeed = 1\n  private movementPath: Point[]\n  private targetPathNodeIndex: number = 1\n\n  constructor(\n    public x: number,\n    public y: number,\n    healthPercentage: number\n  ) {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n    console.log(this.health)\n\n    this.movementPath = [ // TODO: Delete this temp placeholder, get paths from the Map JSON\n      { x: this.x, y: this.y },\n      { x: this.x, y: this.y + 50 },\n    ]\n    this.moving.down = true // TODO: Remove this temp placeholder\n  }\n\n  public update(): void {\n    this.moveTowardsNode()\n    this.move()\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n  }\n\n  public takeDamage(damageAmount: number) {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  private moveTowardsNode(): void {\n    const distanceFromTargetNode = pointToPointDistance(\n      { x: this.movementPath[this.targetPathNodeIndex].x, y: this.movementPath[this.targetPathNodeIndex].y },\n      { x: this.x, y: this.y }\n    )\n    if (distanceFromTargetNode < 1) {\n      this.moveTowardsNextNode()\n    }\n  }\n\n  private moveTowardsNextNode(): void {\n    this.targetPathNodeIndex = (this.targetPathNodeIndex + 1) % this.movementPath.length\n\n    this.moving.down = !this.moving.down // TODO: Remove this temp placeholder\n    this.moving.up   = !this.moving.up   // TODO: Remove this temp placeholder\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      this.x -= this.maxSpeed\n    }\n    if (this.moving.right) {\n      this.x += this.maxSpeed\n    }\n    if (this.moving.up) {\n      this.y -= this.maxSpeed\n    }\n    if (this.moving.down) {\n      this.y += this.maxSpeed\n    }\n  }\n\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","export default interface Point {\n  x: number\n  y: number\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player {\n  public rotation: number = 0\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public sightLineLength = 10\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  private collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed = 3\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      this.x -= this.maxSpeed\n    }\n    if (this.moving.right) {\n      this.x += this.maxSpeed\n    }\n    if (this.moving.up) {\n      this.y -= this.maxSpeed\n    }\n    if (this.moving.down) {\n      this.y += this.maxSpeed\n    }\n    this.adjustCollisionWithGameObjects()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = Math.atan2(\n      (Canvas.mousePosition.y - Canvas.center.y),\n      (Canvas.mousePosition.x - Canvas.center.x)\n    )\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = \"10px Monospace\"\n\n      context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Generalize collision physics\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n    }\n  }\n\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Raycaster {\n  /**\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   // TODO: Make the hit point the edge of the screen in worst case so the player can't see what's beyond (+ some offset maybe if you want the player to see beyond)\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const yInt = p.deltas.dyBottom\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta)\n      }\n    } else { // North\n      const yInt = p.deltas.dyTop\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(\n        Canvas.center.x + hitPoint.x,\n        Canvas.center.y + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + p.deltas.dxRight + tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + tileStepX + p.deltas.dxRight,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static getInterceptPointNW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - tileStepX - p.deltas.dxLeft,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - p.deltas.dxLeft - tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (-xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x || this.x > playerX + Canvas.center.x ||\n      this.y < playerY - Canvas.center.y || this.y > playerY + Canvas.center.y\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import Game from '@app/infrastructure/Game'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    // TODO: Move Player logic to Player class\n    document.addEventListener('keydown', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.p: // Pause, only for debugging\n          Game.paused = !Game.paused\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","export const KEYBOARD_KEYS = {\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n"],"sourceRoot":""}