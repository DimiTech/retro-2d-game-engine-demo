{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/domain/widgets/DamageNumbers.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/SpriteZerg.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameTime.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/math/MathUtils.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\nimport { Directions, MovingDirections } from '@app/infrastructure/Directions'\n\nimport Map from '@app/domain/map/Map'\nimport CreatureState from '@app/domain/CreatureState'\nimport { Widget } from '@app/domain/widgets/DamageNumbers'\n\nexport default abstract class Creature {\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n  public nextX: number\n  public nextY: number\n  public row: number\n  public col: number\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number         // Derived from this.speed\n  public maxSpeedDiagonal: number // Derived from this.speed\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationSpritePosition: number = 0\n\n  public direction: Directions\n\n  // Used for sprite orientation\n  // TODO: Find a better name\n  public movingDirections: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public moving: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected widgets: { [key: string]: Widget } = {}\n  \n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    private speed: number,\n    healthPercentage: number,\n  ) {\n    this.maxSpeed = this.speed\n    this.maxSpeedDiagonal = Math.sin(45) * this.speed\n\n    this.initializeHealth(healthPercentage)\n    this.updateMapPosition()\n  }\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    this.movingDirections.left  = false\n    this.movingDirections.right = false\n    this.movingDirections.up    = false\n    this.movingDirections.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  // TODO: This is not 100% correct, it's just an estimation based on previous frame's length\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement, false)\n    }\n    if (this.moving.right) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement, false)\n    }\n    if (this.moving.up) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement, false)\n    }\n    if (this.moving.down) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement, false)\n    }\n  }\n\n  protected move(): void {\n\n    if (this.moving.left && !this.blocked.left && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement)\n    }\n    if (this.moving.right && !this.blocked.right && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement)\n    }\n\n    if (this.moving.up && !this.blocked.up && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement)\n    }\n    if (this.moving.down && !this.blocked.down && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement)\n    }\n\n    this.updateMapPosition()\n  }\n\n  // TODO: Maybe find a better solution for this\n  private horizontalMovementControlsAreNotJammed() { // Detect control jamming by pressing `left` & `right` at the same time\n    return (this.moving.left && this.moving.right) === false\n  }\n  private verticalMovementControlsAreNotJammed() { // Detect control jamming by pressing `up` & `down` at the same time\n    return (this.moving.up && this.moving.down) === false\n  }\n\n  private movementAccumulator: { [key in MovingDirections]: number } = {\n    left  : 0.0,\n    right : 0.0,\n    up    : 0.0,\n    down  : 0.0,\n  }\n\n  /**\n   * For this Game Engine we want pixelated movement, meaning that the movement amounts are Integer values\n   *\n   * Slow game speed:\n   *   When the game is slowed down enough that one frame worth of movement is below 1,\n   *   the `movementAmountDecimalPart` is sent to the `movementAccumulator`, and the `movementAccumulator`\n   *   is added to the next movement calculation.\n   *   This means that it can take, for example, 3 frames to move 1 pixel.\n   *\n   * Fast game speed:\n   *   When the game is sped up so that one frame worht of movement is above 1,\n   *   we want to preserve the spillover `movementAmountDecimalPart` and add it to\n   *   the next movement calculation.\n   *\n   * This functions makes that happen - and the result is smooth Player/Creature movement :)\n   *\n   * @param direction  - One of four possible `MovingDirections`\n   * @param isDiagonalMovement - Specifies whether the movement is diagonal or not\n   * @param accumulate - We don't want to accumulate when calling from `calculateNextCoordinates()`\n   * @returns - Integer number of pixels to move\n   */\n  private calculateMovementAmountPixels(direction: MovingDirections, isDiagonalMovement: boolean, accumulate = true): number {\n    const movementAmount = isDiagonalMovement\n      ? (GameTime.elapsedTimeFactor * this.maxSpeedDiagonal) + this.movementAccumulator[direction]\n      : (GameTime.elapsedTimeFactor * this.maxSpeed        ) + this.movementAccumulator[direction]\n    const movementAmountPixels = Math.floor(movementAmount)\n\n    if (accumulate) {\n      const movementAmountDecimalPart = (movementAmount % 1)\n      this.movementAccumulator[direction] = movementAmountDecimalPart\n    }\n\n    return movementAmountPixels\n  }\n\n  protected updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  protected updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n\n    ///////////////////////////////////////////////////////////////////////////\n    // West\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.left) {\n      wall = Map.walls[this.row][this.col - 1] // West\n      if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n        this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        this.movingDirections.left = false\n      }\n\n      const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the Creature's Tile\n        wall = Map.walls[SWVertexRow][this.col - 1] // South West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n\n      const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[NWVertexRow][this.col - 1] // North West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // East\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.right) {\n      wall = Map.walls[this.row][this.col + 1] // East\n      if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n        this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        this.movingDirections.right = false\n      }\n\n      const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the Creature's Tile\n        wall = Map.walls[SEVertexRow][this.col + 1] // South East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n\n      const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[NEVertexRow][this.col + 1] // North East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // North\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.up) {\n      wall = Map.walls[this.row - 1][this.col] // North\n      if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n        this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        this.movingDirections.up = false\n      }\n\n      const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NEVertexCol] // North East\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n\n      const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NWVertexCol] // North West\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // South \n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.down) {\n      wall = Map.walls[this.row + 1][this.col] // South\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        this.movingDirections.down = false\n      }\n    }\n\n    const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n    if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SEVertexCol] // South East\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n\n    const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n    if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SWVertexCol] // South West\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > 5) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > 5) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    if (this.movingDirections.down) {\n      direction.push(Directions.S)\n    }\n    else if (this.movingDirections.up) {\n      direction.push(Directions.N)\n    }\n\n    if (this.movingDirections.right) {\n      direction.push(Directions.E)\n    }\n    else if (this.movingDirections.left) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    const xUnchanged =\n      this.prevX[0] === this.prevX[this.prevX.length - 4] &&\n      this.prevX[0] === this.prevX[this.prevX.length - 3] &&\n      this.prevX[0] === this.prevX[this.prevX.length - 2] &&\n      this.prevX[0] === this.prevX[this.prevX.length - 1]\n    const yUnchanged =\n      this.prevY[0] === this.prevY[this.prevY.length - 4] &&\n      this.prevY[0] === this.prevY[this.prevY.length - 3] &&\n      this.prevY[0] === this.prevY[this.prevY.length - 2] &&\n      this.prevY[0] === this.prevY[this.prevY.length - 1]\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n}\n\nexport default CreatureState\n","import { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n\n    LevelTimer.reset()\n  }\n\n  public static nextLevel() {\n    Level.currentLevel++\n\n    LevelTimer.reset()\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n\nimport * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\n\nexport class LevelTimer {\n  public static timeSpentOnCurrentLevel = 0 // ms\n\n  public static incrementTimeSpentOnCurrentLevel() {\n    LevelTimer.timeSpentOnCurrentLevel += GameTime.frameElapsedTime\n  }\n\n  public static reset() {\n    LevelTimer.timeSpentOnCurrentLevel = 0\n  }\n\n  public static debug_displayTimeSpentOnCurrentLevel() {\n    context.beginPath()\n      context.fillStyle = '#9999ff'\n      context.font = '8px Monospace'\n      const levelTimeInSeconds = Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)\n      context.fillText(`Level ${Level.currentLevel} Time: ${levelTimeInSeconds}`, 10, CONFIG.CANVAS_HEIGHT - 24)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  protected target: Point\n\n  // TODO: Extract to CreatureState objects\n  // TODO: Adjust the feeling of enemy attack & animation\n  protected attackSpeed = 0.45 // seconds\n  protected animationLengthAttack   = 420 // ms\n  protected animationProgressAttack = 0   // ms\n  protected animationLengthMove     = 330 // ms\n  protected animationProgressMove   = 0   // ms\n\n  constructor(\n    x: number,\n    y: number,\n    speed: number,\n    healthPercentage: number,\n    pathfindingTimerStart: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), speed, healthPercentage)\n\n    this.pathfindingTimer = (9 * pathfindingTimerStart) % this.pathfindingInterval\n  }\n\n  // TODO: See what more can be moved to `Enemy.update()`\n  public update(player: Player): void {\n    if (this.state === CreatureState.Dying) {\n      return\n    }\n    if (this.state === CreatureState.Decaying) {\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateTileDeltas()\n\n    this.adjustCollisionWithWalls()                // Must come after move()\n    this.checkForCollisionWithPlayer(player)       // Must come after adjustCollisionWithWalls()\n    this.checkForCollisionWithOtherEnemies(player) // Must come after adjustCollisionWithWalls()\n\n    this.updateDirection() // Must come after adjustCollisionWithWalls()\n\n    super.update(player)\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.draw()`\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      this.debug_drawCollisionBox(player)\n    }\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n\n    super.draw(player)\n  }\n\n  protected advanceAnimation(): void {\n    // TODO: Extract to CreatureState objects\n    if (this.state === CreatureState.Attacking) {\n      this.animationProgressAttack = (this.animationProgressAttack + GameTime.elapsedTimeFactor) % this.animationLengthAttack\n      this.animationSpritePosition = Math.round((this.animationProgressAttack / this.animationLengthAttack) * this.sprite.numberOfSpritesInAnimation.attacking) % this.sprite.numberOfSpritesInAnimation.attacking\n    } else if (this.state === CreatureState.Moving) {\n      this.animationProgressMove = (this.animationProgressMove + GameTime.elapsedTimeFactor) % this.animationLengthMove\n      this.animationSpritePosition = Math.round((this.animationProgressMove / this.animationLengthMove) * this.sprite.numberOfSpritesInAnimation.walking) % this.sprite.numberOfSpritesInAnimation.walking\n    }\n  }\n\n  // TODO: Move to Enemy\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingTimer === 0) {\n        this.pathfindingNodes = generatePathNodes( // TODO: Move to Pathfinding or Player\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingTimer += GameTime.frameElapsedTime // Game speed independent\n      if (this.pathfindingTimer > this.pathfindingInterval) {\n        this.pathfindingTimer = 0\n      }\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n      this.movingDirections.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n      this.movingDirections.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n      this.movingDirections.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n      this.movingDirections.up = true\n    }\n  }\n\n  // TODO: Move to Creature since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n         0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n         0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Map from '@app/domain//map/Map'\nimport DamageNumbers, { DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingTimer: number = 0\n  protected pathfindingInterval: number = 500 // ms\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  // TODO: Move this to Weapon\n  protected readonly attackSpeed: number // seconds\n  protected attackCooldown: number       // ms\n\n  protected animationLengthAttack   : number // ms\n  protected animationProgressAttack : number // ms\n  protected animationLengthMove     : number // ms\n  protected animationProgressMove   : number // ms\n\n  constructor(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, collisionBox, speed, healthPercentage)\n\n    // TODO: Move this function to Weapon\n    this.resetAttackCooldown()\n\n    // Widgets\n    this.widgets.damageNumbers = new DamageNumbers()\n  }\n\n  public draw(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.render(player.x, player.y)) // Render widgets\n  }\n\n  public update(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG() // TODO: Change the SFX\n      this.dealDamage(p)\n    } else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n\n    this.health -= damageAmount\n\n    this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount))\n\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Decaying)\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimation()\n  }\n\n  // Move to Animation objects\n  protected resetAnimation() {\n    this.animationSpritePosition = 0\n    this.animationProgressAttack = 0\n    this.animationProgressMove = 0\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      e.update(this.player)\n      if (e.state === CreatureState.Decaying) {\n        Map.enemies.splice(i, 1) // Remove the enemy\n        this.openPortalWhenAllEnemiesAreKilled()\n      }\n    })\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (Map.exitPortal.isOpen === false && Map.enemies.length === 0) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, 0.125, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = '50, 120, 50'\n  protected static closedColor = '180, 50, 50'\n  protected static opacityBaseline = 0.05\n  protected static opacityRange    = 0.2\n\n  private opacity = Portal.opacityRange\n\n  // Adjust for animation feel\n  private animationElapsed              = 0    // Milliseconds\n  private animationLength               = 4000 // Milliseconds\n  private animationCompletionPercentage = 0.0  // 0.0 - 1.0\n\n  draw(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public advanceAnimation() {\n    this.animationElapsed = (this.animationElapsed + GameTime.elapsedTimeFactor) % this.animationLength\n\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n\n    const sineFunction = Math.sin(this.animationCompletionPercentage * (Math.PI * 2)) // returns: -1 to 1 (approximately, because of float arithmetic)\n\n    this.opacity = Portal.opacityBaseline + ((sineFunction + 1) / 2) * Portal.opacityRange\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return `rgba(${Portal.openColor}, ${this.opacity})`\n    }\n    else {\n      return `rgba(${Portal.closedColor}, ${this.opacity})`\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport DamageNumbers, { DamageNumberColors, DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n\n  // TODO: Adjust for attack feeling\n  private attackSpeed = 0.1 // seconds\n  private attackCooldown = 0\n  private maxAttackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super(x, y, new CollisionBox(12, 12), 0.18, 1)\n\n    // Widgets\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_ON_PLAYER) {\n      this.widgets.damageNumbers = new DamageNumbers() // TODO: Move to Creature?\n    }\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls() // Must come after move()\n    this.updateTileDeltas()         // Must come after adjustCollisionWithWalls()\n    this.updateMapPosition()        // Must come after adjustCollisionWithWalls()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        this.movingDirections.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        this.movingDirections.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        this.movingDirections.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        this.movingDirections.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public shoot(): void {\n    if (this.attackCooldown >= 0) {\n      this.attackCooldown -= GameTime.frameElapsedTime\n      if (this.attackCooldown < 0) {\n        this.attackCooldown = 0\n      }\n    }\n\n    if (this.shooting === false) {\n      return\n    }\n\n    if (this.attackCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG()\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = this.maxAttackCooldown\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n\n    if (this.widgets.damageNumbers) {\n      this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount, DamageNumberColors.gray))\n    }\n\n    if (this.health <= 0) {\n      this.die()\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n\n    Object.values(this.widgets).forEach(widget => widget.render(this.x, this.y)) // Render widgets\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n       0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n       0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Map from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from \"@app/infrastructure/game/Game\"\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport GAME_STATES from \"@app/infrastructure/game/game_states/GameStates\"\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport interface IWidget {\n  update(): void\n  render(playerX: number, playerY: number): void\n}\n\nexport enum DamageNumberColors {\n  red    = '220, 50, 50',\n  yellow = '180, 180, 50',\n  gray   = '180, 180, 180',\n}\n\nexport class DamageNumberFactory {\n  public static create(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    damage: number,\n    color: DamageNumberColors = DamageNumberColors.red\n  ): DamageNumber {\n    return new DamageNumber(\n      x,\n      y - collisionBox.halfHeight * 0.9,\n      (Math.random() * collisionBox.height)       - collisionBox.halfHeight,\n      (Math.random() * collisionBox.width  / 1.5) - collisionBox.halfWidth / 1.5,\n      damage.toString(),\n      color\n    )\n  }\n}\n\nexport class DamageNumber {\n  constructor(\n    public x: number,\n    public y: number,\n    protected randomFactorX: number,\n    protected randomFactorY: number,\n    private damage: string,\n    private color: string\n  ) {\n    this.damageTextHalfWidth = (this.damage.length * this.fontWidth) / 2\n  }\n\n  public animationFinished = false\n\n  // Adjust for animation feel\n  private animationElapsed              = 0   // Milliseconds\n  private animationLength               = 800 // Milliseconds\n  private animationCompletionPercentage = 0.0 // 0.0 - 1.0\n  private maxHeight                     = 30  // px\n\n  public advanceAnimation() {\n    this.animationElapsed += GameTime.elapsedTimeFactor\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n    if (this.animationHasFinished()) {\n      this.animationFinished = true\n    }\n  }\n  public animationHasFinished() {\n    return (this.animationElapsed >= this.animationLength)\n  }\n\n  private fontSize = 8\n  private font = `${this.fontSize}px Monospace`\n  private fontWidth = this.fontSize / 2\n  private damageTextHalfWidth: number = 0\n\n  public draw(playerX: number, playerY: number) {\n    context.beginPath()\n      const opacity = 1 - this.animationCompletionPercentage\n      context.fillStyle = `rgba(${this.color}, ${opacity})`\n      context.font = this.font\n      context.fillText(\n        `${this.damage}`,\n        this.randomFactorX + (this.x + Canvas.center.x - playerX) - this.damageTextHalfWidth,\n        this.randomFactorY + (this.y + Canvas.center.y - playerY) - (this.animationCompletionPercentage * this.maxHeight),\n      )\n    context.stroke()\n  }\n}\n\nexport default class DamageNumbers implements IWidget {\n\n  private damageNumbers: DamageNumber[] = []\n\n  public update(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.damageNumbers.forEach((dmgNum, i) => {\n        dmgNum.advanceAnimation()\n\n        if (dmgNum.animationFinished === true) {\n          this.damageNumbers.splice(i, 1) // Remove the DamageNumber\n        }\n      })\n    }\n  }\n\n  public render(playerX: number, playerY: number): void {\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_SHOW) {\n      this.feature_drawDamageNumbers(playerX, playerY)\n    }\n  }\n\n  public push(damageNumber: DamageNumber): void {\n    this.damageNumbers.push(damageNumber)\n  }\n\n\n  public feature_drawDamageNumbers(playerX: number, playerY: number) {\n    this.damageNumbers.forEach(dmgNumber => dmgNumber.draw(playerX, playerY))\n  }\n}\n\nexport type Widget = IWidget & DamageNumbers","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract numberOfSpritesInAnimation: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public numberOfSpritesInAnimation = {\n    walking: 7,\n    attacking: 5,\n  }\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n  private spriteSize = 32\n  private spriteStep: Point\n\n  constructor() {\n    super()\n    this.spriteStep = { x: this.spriteSize + 11, y: this.spriteSize + 10 }\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n    const spriteOffsets: Point = this.getSpriteOffsets(enemy.state, this.spriteStep)\n\n    const spriteLocation = this.spriteLocations[enemy.direction]\n\n    this.drawSprite(enemy, playerCoordinates, spriteOffsets, spriteLocation)\n  }\n\n  private getSpriteOffsets(enemyState: CreatureState, SPRITE_STEP: Point) {\n    switch (enemyState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return {\n          x: 7,\n          y: 5\n        }\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: 7,\n          y: 5 + (ATTACK_SPRITES_ROW * SPRITE_STEP.y)\n        }\n    }\n  }\n\n  private drawSprite(\n    enemy: Enemy,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteLocation: { col: number, flip: boolean },\n  ) {\n\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + this.spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + this.spriteStep.y * Math.floor(enemy.animationSpritePosition),\n      this.spriteSize,\n      this.spriteSize,\n      spriteLocation.flip ? 0 - this.spriteSize / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                       : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      enemy.collisionBox.width  + 2, // Draw width\n      enemy.collisionBox.height + 2, // Draw height\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\ncontext.imageSmoothingEnabled = false // Disables anti-aliasing on Chrome\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n\nexport enum MovingDirections {\n  up    = 'up',\n  right = 'right',\n  down  = 'down',\n  left  = 'left',\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(lastFrameTime: number, frameElapsedTime: number): void {\n    if (!lastFrameTime) {\n      FPS = 0\n    } else {\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n    }\n  }\n\n  public static debug_drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class GameTime {\n  public static readonly ONE_SECOND = 1000\n\n  public static previousTimestamp = 0 // Milliseconds\n  public static frameElapsedTime  = 0 // Milliseconds\n\n  // Determines the game & animation speed\n  public static elapsedTimeFactor: number\n\n  public static setFrameElapsedTime(t: number) {\n    GameTime.frameElapsedTime  = t\n    GameTime.elapsedTimeFactor = CONFIG.GAME_SPEED * GameTime.frameElapsedTime\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\nimport { Pi2Decimals } from './math/MathUtils'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Pi2Decimals / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Pi2Decimals / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Pi2Decimals / 2 && angleBetweenNodes < Pi2Decimals) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === Pi2Decimals) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals && angleBetweenNodes < -Pi2Decimals / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -Pi2Decimals / 2) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\nimport GameTime from '../GameTime'\nimport FrameRate from '../FrameRate'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop(0)\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(timestamp: number): void {\n\n    if (GameTime.previousTimestamp === undefined) {\n      GameTime.previousTimestamp = timestamp\n    }\n    GameTime.setFrameElapsedTime(timestamp - GameTime.previousTimestamp)\n  \n    this.update()\n    this.render()\n    FrameRate.calculateFrameRate(GameTime.previousTimestamp, GameTime.frameElapsedTime)\n  \n    GameTime.previousTimestamp = timestamp\n    window.requestAnimationFrame((ts) => this.gameLoop(ts))\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.debug_drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      // Title\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n      \n      // Level Time\n      context.font = '16px Monospace'\n      context.fillStyle = '#9999ff'\n      context.fillText(\n        `Time: ${Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)} seconds`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2) + 30\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationProgress: number = 0\n  private animationLength: number = GameTime.ONE_SECOND\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationProgress = (this.animationProgress + GameTime.frameElapsedTime) % this.animationLength\n    if (this.animationProgress >= this.animationLength / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n\n      LevelTimer.incrementTimeSpentOnCurrentLevel()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n    if (CONFIG.DEBUG.SHOW_LEVEL_TIME) {\n      LevelTimer.debug_displayTimeSpentOnCurrentLevel()\n    }\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","export const Pi2Decimals = +Math.PI.toFixed(2)\n\nexport function random(min: number, max: number) {\n  return min + Math.floor(Math.random() * (max - min + 1))\n}","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n      player.movingDirections.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n      player.movingDirections.left = true\n    }\n    else {\n      player.moving.left = false\n      player.movingDirections.left = false\n\n      player.moving.right = false\n      player.movingDirections.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n      player.movingDirections.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n      player.movingDirections.up = true\n    }\n    else {\n      player.moving.up = false\n      player.movingDirections.up = false\n\n      player.moving.down = false\n      player.movingDirections.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","SMG_INDEX","gainNode","createGain","gain","value","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","constructor","x","y","collisionBox","speed","healthPercentage","prevX","prevY","maxHealth","state","Idling","previousState","animationSpritePosition","movingDirections","left","right","up","down","moving","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","widgets","movementAccumulator","maxSpeed","maxSpeedDiagonal","Math","sin","initializeHealth","updateMapPosition","resetMoving","resetBlocked","calculateNextCoordinates","nextX","nextY","isDiagonalMovement","calculateMovementAmountPixels","MovingDirections","move","horizontalMovementControlsAreNotJammed","verticalMovementControlsAreNotJammed","direction","accumulate","movementAmount","elapsedTimeFactor","movementAmountPixels","floor","movementAmountDecimalPart","row","CONFIG","TILE_SIZE","col","updateTileDeltas","checkIfBlockedByCreature","c","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","mapX","width","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","yUnchanged","health","getHealthColor","CreatureState","Level","currentLevel","startingLevel","LevelTimer","reset","lastLevel","totalNumberOfMaps","timeSpentOnCurrentLevel","frameElapsedTime","beginPath","fillStyle","font","levelTimeInSeconds","round","fillText","CANVAS_HEIGHT","stroke","ConcreteEnemy","pathfindingTimerStart","super","sprite","Zerg","attackSpeed","animationLengthAttack","animationProgressAttack","animationLengthMove","animationProgressMove","pathfindingTimer","pathfindingInterval","update","player","Dying","Decaying","target","stuck","checkIfStuck","Attacking","setState","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","Moving","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","checkForCollisionWithPlayer","checkForCollisionWithOtherEnemies","stateManager","getState","PLAYING","advanceAnimation","draw","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","ENEMY_STATE","debug_drawState","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","numberOfSpritesInAnimation","attacking","walking","generatePathNodes","abs","findShortestPath","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","moveTo","center","lineTo","toString","p","forEach","n","i","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Enemy","damageNumbers","Object","values","widget","render","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","every","yIsStatic","attackCooldown","playSMG","dealDamage","GAME_SPEED","takeDamage","damageAmount","playEnemyHit","DamageNumberFactory","create","die","playEnemyDeath","getDamage","newState","resetAnimation","Map","mapData","loadMap","enemies","filter","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","opacity","opacityRange","animationElapsed","animationLength","animationCompletionPercentage","getColor","rect","fill","sineFunction","PI","opacityBaseline","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","maxAttackCooldown","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","a","s","d","keyupHandler","FEATURES","DAMAGE_NUMBERS_ON_PLAYER","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","setShooting","isShooting","dx","dy","xVel","yVel","SCATTER_PROJECTILES","randomFactorX","random","randomFactorY","DamageNumberColors","gray","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","directionX","directionY","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","intermediateIntervalX","intermediateIntervalY","point","red","DamageNumber","animationFinished","maxHeight","fontSize","fontWidth","damageTextHalfWidth","animationHasFinished","dmgNum","DAMAGE_NUMBERS_SHOW","feature_drawDamageNumbers","damageNumber","dmgNumber","Sprites","callback","_reject","spriteSheet","Image","src","url","SpriteZerg","spriteLocations","flip","NE","SE","SW","NW","spriteSize","spriteStep","enemy","playerCoordinates","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","enemyState","SPRITE_STEP","cBox","px","py","save","translate","scale","drawImage","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","FPS_ARR","FPS","lastFrameTime","unshift","reduce","sum","current","GameAssets","GameTime","t","ONE_SECOND","previousTimestamp","startRow","startCol","path","rowEnd","colEnd","PathNode","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","Pi2Decimals","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","timestamp","undefined","setFrameElapsedTime","calculateFrameRate","requestAnimationFrame","ts","clear","debug_drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","animationProgress","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","incrementTimeSpentOnCurrentLevel","GAME_OVER","SHOW_LEVEL_TIME","debug_displayTimeSpentOnCurrentLevel","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","min","max","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}