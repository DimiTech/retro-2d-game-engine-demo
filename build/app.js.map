{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/infrastructure/game/Game.ts","webpack:///./src/app/infrastructure/game/game_states/GameStates.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/domain/Creature.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/infrastructure/FrameRate.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/peripherals/Gamepads.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/ConcreteEnemy.ts","webpack:///./src/app/infrastructure/Pathfinding.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack:///./src/app/infrastructure/GameAssets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","halfWidth","halfHeight","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","AudioLoader_1","Canvas_1","FrameRate_1","GameStates_1","GameStateManager_1","GameAssets_1","Game","window","onfocus","restart","load","percentage","gameAssetLoaded","Audio","stateManager","getState","PAUSED","setState","PLAYING","loadInterval","setInterval","loaded","clearInterval","MAIN_MENU","gameLoop","asset","loadedPercentage","update","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","GameStateLoading_1","GameStateMainMenu_1","GameStatePlaying_1","GameStatePaused_1","GAME_STATES","LOADING","ConcreteEnemy_1","GameObjectFactory_1","Map01","getEnemiesOnScreen","playerX","playerY","enemies","filter","e","isOnScreen","gameObjects","grid","player","loadMap","forEach","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","length","createGameObject","push","healthPercentage","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","Promise","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","pointToPointDistance","p1","p2","sqrt","angleBetweenPoints","atan2","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","Point_1","Map_1","Raycaster","theta","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","dyBottom","getInterceptPointSE","getInterceptPointSW","hitPoint","color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","angleBetweenTwoGivenPoints","results","cast","hitObject","yIntercept","tileStepX","hitPointVertical","objectHitVertical","dxRight","rangeHorizontal","rangeVertical","RAYCASTER","DEBUG","coordinates","arc","PI","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","round","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","gameObjectHit","fillText","xTile_leftByOnePixel","outsideOfScreenOffset","AudioContext","moving","left","right","up","down","collisionBox","mapX","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","MapKeys","isBox","mapKey","startsWith","SoundFX_1","loadCallback","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","lastFrameTime","frameDeltaTime","FPS_ARR","FPS","now","performance","unshift","pop","reduce","sum","current","fillStyle","font","toFixed","Game_1","drawLoadingDialog","animationCounter","animationInterval","instructionsVisible","handleMenuSelection","removeEventListener","drawMainMenu","Keyboard_1","Gamepads_1","Grid_1","Player_1","previousState","startNewGame","nextState","onblur","updateMousePosition","init","KeyCodes_1","keyCode","KEYBOARD_KEYS","w","a","ESC","togglePause","ENTER","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","CollisionBox_1","Raycaster_1","Pathfinding_1","Enemy_1","pathfindingInterval","super","updateMapPosition","adjustCollisionWithGameObjects","adjustCollisionWithOtherEnemies","distanceFromPlayer","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPoints","findPathToPlayer","move","updateTileDeltas","drawCollisionBox","shortestPath","drawNode","visited","drawRayToPoint","damageAmount","playEnemyHit","health","die","playEnemyDeath","pathfindingNodes","generatePathNodes","abs","findShortestPath","pathfindingPeriod","moveTowards","moveTowardsPlayer","maxSpeedDiagonal","maxSpeed","getHealthColor","generateNodesAroundGameObject","path","cBox","neighbours","N","NE","E","SE","S","SW","W","NW","nodeNE","PathNode","generateNodeNE","nodeSE","generateNodeSE","nodeSW","generateNodeSW","nodeNW","generateNodeNW","node","startRow","startCol","rowEnd","colEnd","drawPathNodes","enemy","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","b","shift","neighbourNodes","possiblyLowerLocalGoal","parent","Infinity","Creature_1","maxHealth","initializeHealth","sin","offScreenOffset","playerCollisionBox","enemyX","enemyY","enemyCollisionBox","collidesWithEnemy","intersectionX","intersectionY","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","Error","GameObject_1","playCrateHit","destructable","Crosshair_1","Projectile_1","rotation","sightLineLength","shooting","shootingCooldown","projectiles","shoot","dx","dy","xVel","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","checkForCollisionWithEnemies","cos","drawRay","collidesWithPlayer","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","drawPauseMenu","currentState","exit","enter","GameAssets"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0 // 0.0 to 1.0\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  public static togglePause(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PAUSED) {\n      Game.stateManager.setState(GAME_STATES.PLAYING)\n    } else {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n  }\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n    AudioLoader.load(percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop()\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const audioWeight = 1.0 // TODO: Audio is 100% of all loaded assets for now\n    if (asset === GameAssets.Audio) {\n      Game.loadedPercentage = audioWeight * percentage\n    }\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(): void {\n    this.update()\n    this.render()\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    FrameRate.drawFPS() // TODO: Remove this, used just for debugging\n  }\n}\n","import GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStatePaused from './GameStatePaused'\n\n// TODO: Add a IGameState type definition\nconst GAME_STATES = {\n  LOADING   : new GameStateLoading(),\n  MAIN_MENU : new GameStateMainMenu(),\n  PLAYING   : new GameStatePlaying(),\n  PAUSED    : new GameStatePaused(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport function getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n  return enemies.filter(e => e.isOnScreen(playerX, playerY))\n}\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update(this.player, enemies)\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach((e, i) => {\n      enemies.push(new ConcreteEnemy(e.x, e.y, e.healthPercentage, i))\n    })\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","export default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: Point, p2: Point): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.hitObject !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile_aboveByOnePixel][xTile]) {\n        gameObjectHit = gameObjects[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile][xTile_leftByOnePixel]) {\n        gameObjectHit = gameObjects[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile_aboveByOnePixel][xTile]) {\n        gameObjectHit = gameObjects[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","export default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects } from '@app/domain/map/Map'\n\nexport default abstract class Creature {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  protected collisionBox: CollisionBox\n\n  protected adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameDeltaTime: number\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameDeltaTime = (now - lastFrameTime) / 1000\n\n      FPS_ARR.unshift(1 / (frameDeltaTime))\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationInterval: number = 100\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationInterval\n    if (this.animationCounter >= this.animationInterval / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press any key to start', CONFIG.CANVAS_WIDTH / 2 - 132, CONFIG.CANVAS_HEIGHT / 2 - 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection(): void {\n    Game.stateManager.setState(GAME_STATES.PLAYING)\n  }\n}\n","import IGameState from './IGameState'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePlaying implements IGameState {\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n  }\n\n  public exit(nextState: IGameState): void {\n    if (nextState !== GAME_STATES.PAUSED) {\n      window.onblur = null\n    }\n  }\n\n  public update(): void {\n    Canvas.updateMousePosition()\n    Gamepads.update(this.player)\n    this.player.update()\n    this.map.update()\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n\n  private startNewGame(): void {\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n  }\n}\n","import Game from '@app/infrastructure/game/Game'\nimport FrameRate from '@app/infrastructure/FrameRate'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    document.addEventListener('keydown', e => {\n      // TODO: Move Player logic to Player class\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.ESC:\n        case KEYBOARD_KEYS.p:\n          Game.togglePause()\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\n// TODO: This class is useless?\nexport default class Grid {\n  public rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  public cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n\nexport interface Directions {\n    N  : (any | null)\n    NE : (any | null)\n    E  : (any | null)\n    SE : (any | null)\n    S  : (any | null)\n    SW : (any | null)\n    W  : (any | null)\n    NW : (any | null)\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, drawPathNodes, findShortestPath, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default class ConcreteEnemy extends Enemy {\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number,\n    protected pathfindingInterval: number\n  ) {\n    super(x, y, new CollisionBox(16, 16), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player, enemies: Enemy[]): void {\n    this.adjustCollisionWithGameObjects()\n    this.adjustCollisionWithOtherEnemies(enemies)\n    this.distanceFromPlayer = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   }\n    )\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(this, player)\n    this.findPathToPlayer(player)\n    this.move()\n    this.updateTileDeltas()\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n    // this.drawRayToPlayer(player) // TODO: Just for debugging\n    // drawPathNodes(this.pathfindingNodes, this.collisionBox, player, this.getHealthColor()) // TODO: Just for debugging\n\n    // TODO: Just for debugging\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, this.collisionBox, player, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.drawRayToPoint(this.shortestPath[this.shortestPath.length - 1], player)\n    }\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  private findPathToPlayer(player: Player): void {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingInterval === 0) {\n        this.pathfindingNodes = generatePathNodes(\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingInterval = (this.pathfindingInterval + 1) % this.pathfindingPeriod\n\n      if (this.shortestPath.length > 0) {\n        this.moveTowards(\n          this.shortestPath[this.shortestPath.length - 1].x,\n          this.shortestPath[this.shortestPath.length - 1].y\n        )\n      }\n    }\n    else {\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private moveTowardsPlayer(player: Player): void {\n    if (this.distanceFromPlayer > 1) {\n      this.moveTowards(player.x, player.y)\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  // TODO: Just for debugging\n  private drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  // TODO: Just for debugging\n  private drawRayToPoint(p: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x + (p.x - player.x), Canvas.center.y + (p.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { Directions } from '@app/domain/Grid'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from './Raycaster'\n\nimport { gameObjects } from '@app/domain/map/Map'\nimport GameObject from '@app/domain/objects/GameObject'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\n/**\n *   o      o     o      o   o     o     o\n *     ----         ----       ---- ----\n *    |    |       |    |     |    |    |\n *     ----       o ---- o     ---- ----\n *   o      o      |    |    o     o     o\n *                  ----\n *                o      o\n *\n *      o     o     o          o      o\n *        ---- ----              ----\n *       |    |    |      o   o |    |\n *      o ---- ---- o       ---- ----\n *       |    | o          |    | o   o\n *        ----              ----\n *      o      o          o      o\n */\n// TODO: cache path nodes for same collision box dimensions || don't generate path nodes every frame\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!gameObjects[row] || !gameObjects[row][col]) { continue }\n      generateNodesAroundGameObject(path, gameObjects[row][col], cBox)\n    }\n  }\n\n  return path\n}\n\nfunction generateNodesAroundGameObject(path: PathNode[], o: GameObject, cBox: CollisionBox): void {\n  const neighbours: Directions = {\n    N  : gameObjects[o.row - 1] ? gameObjects[o.row - 1][o.col    ] : null,\n    NE : gameObjects[o.row - 1] ? gameObjects[o.row - 1][o.col + 1] : null,\n    E  : gameObjects[o.row    ] ? gameObjects[o.row    ][o.col + 1] : null,\n    SE : gameObjects[o.row + 1] ? gameObjects[o.row + 1][o.col + 1] : null,\n    S  : gameObjects[o.row + 1] ? gameObjects[o.row + 1][o.col    ] : null,\n    SW : gameObjects[o.row + 1] ? gameObjects[o.row + 1][o.col - 1] : null,\n    W  : gameObjects[o.row    ] ? gameObjects[o.row    ][o.col - 1] : null,\n    NW : gameObjects[o.row - 1] ? gameObjects[o.row - 1][o.col - 1] : null,\n  }\n\n  let nodeNE = generateNodeNE(o, neighbours, cBox)\n  let nodeSE = generateNodeSE(o, neighbours, cBox)\n  let nodeSW = generateNodeSW(o, neighbours, cBox)\n  let nodeNW = generateNodeNW(o, neighbours, cBox)\n\n  if (nodeNE && (nodeNE.x < 0 || nodeNE.y < 0)) { nodeNE = null }\n  if (nodeSE && (nodeSE.x < 0 || nodeSE.y < 0)) { nodeSE = null }\n  if (nodeSW && (nodeSW.x < 0 || nodeSW.y < 0)) { nodeSW = null }\n  if (nodeNW && (nodeNW.x < 0 || nodeNW.y < 0)) { nodeNW = null }\n\n  path.forEach(node => {\n    if (nodeNE && (node.x === nodeNE.x && node.y === nodeNE.y)) { nodeNE = null }\n    if (nodeSE && (node.x === nodeSE.x && node.y === nodeSE.y)) { nodeSE = null }\n    if (nodeSW && (node.x === nodeSW.x && node.y === nodeSW.y)) { nodeSW = null }\n    if (nodeNW && (node.x === nodeNW.x && node.y === nodeNW.y)) { nodeNW = null }\n  })\n\n  if (nodeNE) { path.push(nodeNE) }\n  if (nodeSE) { path.push(nodeSE) }\n  if (nodeSW) { path.push(nodeSW) }\n  if (nodeNW) { path.push(nodeNW) }\n}\n\nfunction generateNodeNE(o: GameObject, neighbours: Directions, cBox: CollisionBox): PathNode {\n  if (neighbours.NE) {\n    return null\n  }\n  else {\n    if (!neighbours.N && !neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width + cBox.halfWidth,\n        y: o.mapY - cBox.halfHeight,\n      })\n    }\n    if (neighbours.N && !neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width + cBox.halfWidth,\n        y: o.mapY,\n      })\n    }\n    if (!neighbours.N && neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width,\n        y: o.mapY - cBox.halfHeight,\n      })\n    }\n  }\n}\nfunction generateNodeSE(o: GameObject, neighbours: Directions, cBox: CollisionBox): PathNode {\n  if (neighbours.SE) {\n    return null\n  }\n  else {\n    if (!neighbours.S && !neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width  + cBox.halfWidth,\n        y: o.mapY + o.height + cBox.halfHeight,\n      })\n    }\n    if (neighbours.S && !neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width  + cBox.halfWidth,\n        y: o.mapY + o.height,\n      })\n    }\n    if (!neighbours.S && neighbours.E) {\n      return new PathNode({\n        x: o.mapX + o.width,\n        y: o.mapY + o.height + cBox.halfHeight,\n      })\n    }\n  }\n}\nfunction generateNodeSW(o: GameObject, neighbours: Directions, cBox: CollisionBox): PathNode {\n  if (neighbours.SW) {\n    return null\n  }\n  else {\n    if (!neighbours.S && !neighbours.W) {\n      return new PathNode({\n        x: o.mapX - cBox.halfWidth,\n        y: o.mapY + o.height + cBox.halfHeight,\n      })\n    }\n    if (neighbours.S && !neighbours.W) {\n      return new PathNode({\n        x: o.mapX - cBox.halfWidth,\n        y: o.mapY + o.height,\n      })\n    }\n    if (!neighbours.S && neighbours.W) {\n      return new PathNode({\n        x: o.mapX,\n        y: o.mapY + o.height + cBox.halfHeight,\n      })\n    }\n  }\n}\nfunction generateNodeNW(o: GameObject, neighbours: Directions, cBox: CollisionBox): PathNode {\n  if (neighbours.NW) {\n    return null\n  }\n  else {\n    if (!neighbours.N && !neighbours.W) {\n      return new PathNode({\n        x: o.mapX - cBox.halfWidth,\n        y: o.mapY - cBox.halfHeight,\n      })\n    }\n    if (neighbours.N && !neighbours.W) {\n      return new PathNode({\n        x: o.mapX - cBox.halfWidth,\n        y: o.mapY,\n      })\n    }\n    if (!neighbours.N && neighbours.W) {\n      return new PathNode({\n        x: o.mapX,\n        y: o.mapY - cBox.halfHeight,\n      })\n    }\n  }\n}\n\nexport function drawPathNodes(path: PathNode[], cBox: CollisionBox, player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, cBox, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, cBox: CollisionBox, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - cBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - cBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + cBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - cBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + cBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + cBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - cBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + cBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - cBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - cBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player)\n  const nodeStart = new PathNode(enemy)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(nodeCurrent, node) === false\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements Point {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Creature from '@app/domain/Creature'\nimport Player from '@app/domain/player/Player'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\n\nexport default abstract class Enemy extends Creature {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n\n  protected maxSpeedDiagonal: number\n\n  protected distanceFromPlayer: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingInterval: number = 0\n  protected pathfindingPeriod: number = 30\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    protected maxSpeed: number,\n    healthPercentage: number,\n  ) {\n    super()\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed)\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player, enemies: Enemy[]): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < (CONFIG.CANVAS_WIDTH  / 2) + offScreenOffset &&\n      Math.abs(this.y - playerY) < (CONFIG.CANVAS_HEIGHT / 2) + offScreenOffset\n    )\n  }\n\n  public collidesWithPlayer(playerX: number, playerY: number, playerCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < playerX + playerCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > playerX - playerCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < playerY + playerCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > playerY - playerCollisionBox.halfHeight\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n\n  protected collidesWithEnemy(enemyX: number, enemyY: number, enemyCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < enemyX + enemyCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > enemyX - enemyCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < enemyY + enemyCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > enemyY - enemyCollisionBox.halfHeight\n    )\n  }\n\n  protected adjustCollisionWithOtherEnemies(enemies: Enemy[]): void {\n    enemies.forEach(e => {\n      if (this !== e && this.collidesWithEnemy(e.x, e.y, e.collisionBox)) {\n        let intersectionX: number\n        let intersectionY: number\n        if (this.x < e.x) {\n          intersectionX = (this.x + this.collisionBox.halfWidth) - (e.x - e.collisionBox.halfWidth)\n        } else if (this.x > e.x) {\n          intersectionX = (e.x + e.collisionBox.halfWidth) - (this.x - this.collisionBox.halfWidth)\n        }\n        if (this.y < e.y) {\n          intersectionY = (this.y + this.collisionBox.halfHeight) - (e.y - e.collisionBox.halfHeight)\n        } else if (this.y > e.y) {\n          intersectionY = (e.y + e.collisionBox.halfHeight) - (this.y - this.collisionBox.halfHeight)\n        }\n        if (!intersectionX || intersectionX >= intersectionY) {\n          if (this.y < e.y) {\n            e.y += intersectionY\n          } else {\n            e.y -= intersectionY\n          }\n        } else if (!intersectionY || intersectionX < intersectionY) {\n          if (this.x < e.x) {\n            e.x += intersectionX\n          } else {\n            e.x -= intersectionX\n          }\n        }\n      }\n    })\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  private initializeHealth(healthPercentage: number): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport { getEnemiesOnScreen } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\nimport Game from '@app/infrastructure/game/Game'\nimport GameStateManager from '@app/infrastructure/game/game_states/GameStateManager'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  public collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed: number = 2\n  private maxSpeedDiagonal: number = Math.round(Math.sin(45) * this.maxSpeed)\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    super()\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.adjustCollisionWithGameObjects()\n    this.checkForCollisionWithEnemies()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = '10px Monospace'\n\n      context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  private checkForCollisionWithEnemies(): void {\n    if (getEnemiesOnScreen(this.x, this.y)\n      .filter(e => e.collidesWithPlayer(this.x, this.y, this.collisionBox))\n      .length > 0) {\n        this.die()\n      }\n  }\n\n  private die(): void {\n    this.alive = false\n    Game.stateManager.setState(GAME_STATES.PAUSED)\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport { context } from '@app/infrastructure/Canvas'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","\nenum GameAssets {\n  Audio,\n}\n\nexport default GameAssets"],"sourceRoot":""}