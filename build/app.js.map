{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/domain/widgets/DamageNumbers.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/SpriteZerg.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameTime.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\nimport { Directions } from '@app/infrastructure/Directions'\n\nimport Map from '@app/domain/map/Map'\nimport CreatureState from '@app/domain/CreatureState'\nimport { Widget } from '@app/domain/widgets/DamageNumbers'\n\nexport default abstract class Creature {\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n  public nextX: number\n  public nextY: number\n  public row: number\n  public col: number\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number         // Derived from this.speed\n  public maxSpeedDiagonal: number // Derived from this.speed\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationSpritePosition: number = 0\n\n  public direction: Directions\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected widgets: { [key: string]: Widget } = {}\n  \n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    private speed: number,\n    healthPercentage: number,\n  ) {\n    this.maxSpeed = this.speed\n    this.maxSpeedDiagonal = Math.sin(45) * this.maxSpeed\n\n    this.initializeHealth(healthPercentage)\n    this.updateMapPosition()\n  }\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX -= this.maxSpeedDiagonal\n      } else {\n        this.nextX -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX += this.maxSpeedDiagonal\n      } else {\n        this.nextX += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY -= this.maxSpeedDiagonal\n      } else {\n        this.nextY -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY += this.maxSpeedDiagonal\n      } else {\n        this.nextY += this.maxSpeed\n      }\n    }\n  }\n\n  protected move(): void {\n    if (this.moving.left && !this.blocked.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= Math.round(GameTime.elapsedTimeFactor * this.maxSpeedDiagonal)\n      } else {\n        this.x -= Math.round(GameTime.elapsedTimeFactor * this.maxSpeed)\n      }\n    }\n    if (this.moving.right && !this.blocked.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += Math.round(GameTime.elapsedTimeFactor * this.maxSpeedDiagonal)\n      } else {\n        this.x += Math.round(GameTime.elapsedTimeFactor * this.maxSpeed)\n      }\n    }\n    if (this.moving.up && !this.blocked.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= Math.round(GameTime.elapsedTimeFactor * this.maxSpeedDiagonal)\n      } else {\n        this.y -= Math.round(GameTime.elapsedTimeFactor * this.maxSpeed)\n      }\n    }\n    if (this.moving.down && !this.blocked.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += Math.round(GameTime.elapsedTimeFactor * this.maxSpeedDiagonal)\n      } else {\n        this.y += Math.round(GameTime.elapsedTimeFactor * this.maxSpeed)\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  protected updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  protected updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n    if (Map.walls[this.row]) {\n      if (this.moving.left) {\n        wall = Map.walls[this.row][this.col - 1] // West\n        if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n          this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          wall = Map.walls[SWVertexRow][this.col - 1] // South West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          wall = Map.walls[NWVertexRow][this.col - 1] // North West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        wall = Map.walls[this.row][this.col + 1] // East\n        if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n          this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          wall = Map.walls[SEVertexRow][this.col + 1] // South East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          wall = Map.walls[NEVertexRow][this.col + 1] // North East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row - 1]) {\n      if (this.moving.up) {\n        wall = Map.walls[this.row - 1][this.col] // North\n        if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n          this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NEVertexCol] // North East\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NWVertexCol] // North West\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row + 1]) {\n      if (this.moving.down) {\n        wall = Map.walls[this.row + 1][this.col] // South\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SEVertexCol] // South East\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SWVertexCol] // South West\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > 5) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > 5) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    const dx = this.prevX[this.prevX.length - 1] - this.prevX[this.prevX.length - 2]\n    const dy = this.prevY[this.prevY.length - 1] - this.prevY[this.prevY.length - 2]\n\n    if (dy > 0) {\n      direction.push(Directions.S)\n    }\n    else if (dy < 0) {\n      direction.push(Directions.N)\n    }\n\n    if (dx > 0) {\n      direction.push(Directions.E)\n    }\n    else if (dx < 0) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    const xUnchanged = this.prevX[this.prevX.length - 1] === this.prevX[this.prevX.length - 2]\n    const yUnchanged = this.prevY[this.prevY.length - 1] === this.prevY[this.prevY.length - 2]\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n}\n\nexport default CreatureState\n","import { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n\n    LevelTimer.reset()\n  }\n\n  public static nextLevel() {\n    Level.currentLevel++\n\n    LevelTimer.reset()\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n\nimport * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\n\nexport class LevelTimer {\n  public static timeSpentOnCurrentLevel = 0 // ms\n\n  public static incrementTimeSpentOnCurrentLevel() {\n    LevelTimer.timeSpentOnCurrentLevel += GameTime.frameElapsedTime\n  }\n\n  public static reset() {\n    LevelTimer.timeSpentOnCurrentLevel = 0\n  }\n\n  public static debug_displayTimeSpentOnCurrentLevel() {\n    context.beginPath()\n      context.fillStyle = '#9999ff'\n      context.font = '8px Monospace'\n      const levelTimeInSeconds = Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)\n      context.fillText(`Level ${Level.currentLevel} Time: ${levelTimeInSeconds}`, 10, CONFIG.CANVAS_HEIGHT - 24)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  protected target: Point\n\n  // TODO: Extract to CreatureState objects\n  // TODO: Adjust the feeling of enemy attack & animation\n  protected attackSpeed = 0.45 // seconds\n  protected animationLengthAttack   = 420 // ms\n  protected animationProgressAttack = 0   // ms\n  protected animationLengthMove     = 330 // ms\n  protected animationProgressMove   = 0   // ms\n\n  constructor(\n    x: number,\n    y: number,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, new CollisionBox(14, 14), speed, healthPercentage)\n  }\n\n  // TODO: See what more can be moved to `Enemy.update()`\n  public update(player: Player): void {\n    if (this.state === CreatureState.Dying) {\n      return\n    }\n    if (this.state === CreatureState.Decaying) {\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.adjustCollisionWithWalls()\n    this.checkForCollisionWithPlayer(player)\n    this.checkForCollisionWithOtherEnemies(player)\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateDirection() // TODO: This is based on movement, which is incorrect - fix it\n    this.updateTileDeltas()\n\n    super.update(player)\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.draw()`\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      this.debug_drawCollisionBox(player)\n    }\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n\n    super.draw(player)\n  }\n\n  protected advanceAnimation(): void {\n    // TODO: Extract to CreatureState objects\n    if (this.state === CreatureState.Attacking) {\n      this.animationProgressAttack = (this.animationProgressAttack + GameTime.elapsedTimeFactor) % this.animationLengthAttack\n      this.animationSpritePosition = Math.round((this.animationProgressAttack / this.animationLengthAttack) * this.sprite.numberOfSpritesInAnimation.attacking) % this.sprite.numberOfSpritesInAnimation.attacking\n    } else if (this.state === CreatureState.Moving) {\n      this.animationProgressMove = (this.animationProgressMove + GameTime.elapsedTimeFactor) % this.animationLengthMove\n      this.animationSpritePosition = Math.round((this.animationProgressMove / this.animationLengthMove) * this.sprite.numberOfSpritesInAnimation.walking) % this.sprite.numberOfSpritesInAnimation.walking\n    }\n  }\n\n  // TODO: Move to Enemy\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingTimer === 0) {\n        this.pathfindingNodes = generatePathNodes(\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingTimer += GameTime.elapsedTimeFactor\n      if (this.pathfindingTimer > this.pathfindingInterval) {\n        this.pathfindingTimer = 0\n      }\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Move to Creature since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Map from '@app/domain//map/Map'\nimport DamageNumbers, { DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingTimer: number = 0\n  protected pathfindingInterval: number = 500 // ms\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  // TODO: Move this to Weapon\n  protected readonly attackSpeed: number // seconds\n  protected attackCooldown: number       // ms\n\n  protected animationLengthAttack   : number // ms\n  protected animationProgressAttack : number // ms\n  protected animationLengthMove     : number // ms\n  protected animationProgressMove   : number // ms\n\n  constructor(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, collisionBox, speed, healthPercentage)\n\n    // TODO: Move this function to Weapon\n    this.resetAttackCooldown()\n\n    // Widgets\n    this.widgets.damageNumbers = new DamageNumbers()\n  }\n\n  public draw(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.render(player.x, player.y)) // Render widgets\n  }\n\n  public update(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG() // TODO: Change the SFX\n      this.dealDamage(p)\n    } else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n\n    this.health -= damageAmount\n\n    this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount))\n\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Decaying)\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimation()\n  }\n\n  // Move to Animation objects\n  protected resetAnimation() {\n    this.animationSpritePosition = 0\n    this.animationProgressAttack = 0\n    this.animationProgressMove = 0\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      e.update(this.player)\n      if (e.state === CreatureState.Decaying) {\n        Map.enemies.splice(i, 1) // Remove the enemy\n        this.openPortalWhenAllEnemiesAreKilled()\n      }\n    })\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (Map.exitPortal.isOpen === false && Map.enemies.length === 0) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach(e => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, 0.125, e.healthPercentage))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = 'rgba(50, 120, 50, 0.2)'\n  protected static closedColor = 'rgba(180, 50, 50, 0.2)'\n\n  draw(): void {\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return Portal.openColor\n    }\n    else {\n      return Portal.closedColor\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport DamageNumbers, { DamageNumberColors, DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n\n  // TODO: Adjust for attack feeling\n  private attackSpeed = 0.1 // seconds\n  private attackCooldown = 0\n\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super(x, y, new CollisionBox(12, 12), 0.18, 1)\n\n    // Widgets\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_ON_PLAYER) {\n      this.widgets.damageNumbers = new DamageNumbers() // TODO: Move to Creature?\n    }\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls()\n    this.updateMapPosition()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public shoot(): void {\n    if (this.shooting === false) {\n      return\n    }\n    if (this.attackCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG()\n    } else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n\n    if (this.widgets.damageNumbers) {\n      this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount, DamageNumberColors.gray))\n    }\n\n    if (this.health <= 0) {\n      this.die()\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n\n    Object.values(this.widgets).forEach(widget => widget.render(this.x, this.y)) // Render widgets\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Map from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from \"@app/infrastructure/game/Game\"\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport GAME_STATES from \"@app/infrastructure/game/game_states/GameStates\"\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport interface IWidget {\n  update(): void\n  render(playerX: number, playerY: number): void\n}\n\nexport enum DamageNumberColors {\n  red    = '220, 50, 50',\n  yellow = '180, 180, 50',\n  gray   = '180, 180, 180',\n}\n\nexport class DamageNumberFactory {\n  public static create(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    damage: number,\n    color: DamageNumberColors = DamageNumberColors.red\n  ): DamageNumber {\n    return new DamageNumber(\n      x,\n      y - collisionBox.halfHeight * 0.9,\n      (Math.random() * collisionBox.height)       - collisionBox.halfHeight,\n      (Math.random() * collisionBox.width  / 1.5) - collisionBox.halfWidth / 1.5,\n      damage.toString(),\n      color\n    )\n  }\n}\n\nexport class DamageNumber {\n  constructor(\n    public x: number,\n    public y: number,\n    protected randomFactorX: number,\n    protected randomFactorY: number,\n    private damage: string,\n    private color: string\n  ) {\n    this.damageTextHalfWidth = (this.damage.length * this.fontWidth) / 2\n  }\n\n  public animationFinished = false\n\n  // Adjust for animation feel\n  private animationElapsed              = 0   // Milliseconds\n  private animationLength               = 800 // Milliseconds\n  private animationCompletionPercentage = 0.0 // 0.0 - 1.0\n  private maxHeight                     = 30  // px\n\n  public advanceAnimation() {\n    this.animationElapsed += GameTime.elapsedTimeFactor\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n    if (this.animationHasFinished()) {\n      this.animationFinished = true\n    }\n  }\n  public animationHasFinished() {\n    return (this.animationElapsed >= this.animationLength)\n  }\n\n  private fontSize = 8\n  private font = `${this.fontSize}px Monospace`\n  private fontWidth = this.fontSize / 2\n  private damageTextHalfWidth: number = 0\n\n  public draw(playerX: number, playerY: number) {\n    context.beginPath()\n      const opacity = 1 - this.animationCompletionPercentage\n      context.fillStyle = `rgba(${this.color}, ${opacity})`\n      context.font = this.font\n      context.fillText(\n        `${this.damage}`,\n        this.randomFactorX + (this.x + Canvas.center.x - playerX) - this.damageTextHalfWidth,\n        this.randomFactorY + (this.y + Canvas.center.y - playerY) - (this.animationCompletionPercentage * this.maxHeight),\n      )\n    context.stroke()\n  }\n}\n\nexport default class DamageNumbers implements IWidget {\n\n  private damageNumbers: DamageNumber[] = []\n\n  public update(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.damageNumbers.forEach((dmgNum, i) => {\n        dmgNum.advanceAnimation()\n\n        if (dmgNum.animationFinished === true) {\n          this.damageNumbers.splice(i, 1) // Remove the DamageNumber\n        }\n      })\n    }\n  }\n\n  public render(playerX: number, playerY: number): void {\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_SHOW) {\n      this.feature_drawDamageNumbers(playerX, playerY)\n    }\n  }\n\n  public push(damageNumber: DamageNumber): void {\n    this.damageNumbers.push(damageNumber)\n  }\n\n\n  public feature_drawDamageNumbers(playerX: number, playerY: number) {\n    this.damageNumbers.forEach(dmgNumber => dmgNumber.draw(playerX, playerY))\n  }\n}\n\nexport type Widget = IWidget & DamageNumbers","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract numberOfSpritesInAnimation: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public numberOfSpritesInAnimation = {\n    walking: 7,\n    attacking: 5,\n  }\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n  private spriteSize = 32\n  private spriteStep: Point\n\n  constructor() {\n    super()\n    this.spriteStep = { x: this.spriteSize + 11, y: this.spriteSize + 10 }\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n    const spriteOffsets: Point = this.getSpriteOffsets(enemy.state, this.spriteStep)\n\n    const spriteLocation = this.spriteLocations[enemy.direction]\n\n    this.drawSprite(enemy, playerCoordinates, spriteOffsets, spriteLocation)\n  }\n\n  private getSpriteOffsets(enemyState: CreatureState, SPRITE_STEP: Point) {\n    switch (enemyState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return {\n          x: 7,\n          y: 5\n        }\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: 7,\n          y: 5 + (ATTACK_SPRITES_ROW * SPRITE_STEP.y)\n        }\n    }\n  }\n\n  private drawSprite(\n    enemy: Enemy,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteLocation: { col: number, flip: boolean },\n  ) {\n\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + this.spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + this.spriteStep.y * Math.floor(enemy.animationSpritePosition),\n      this.spriteSize,\n      this.spriteSize,\n      spriteLocation.flip ? 0 - this.spriteSize / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                       : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      enemy.collisionBox.width  + 2, // Draw width\n      enemy.collisionBox.height + 2, // Draw height\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(lastFrameTime: number, frameElapsedTime: number): void {\n    if (!lastFrameTime) {\n      FPS = 0\n    } else {\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n    }\n  }\n\n  public static debug_drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class GameTime {\n  public static readonly ONE_SECOND = 1000\n\n  public static previousTimestamp = 0 // Milliseconds\n  public static frameElapsedTime  = 0 // Milliseconds\n\n  // Determines the game & animation speed\n  public static elapsedTimeFactor: number\n\n  public static setFrameElapsedTime(t: number) {\n    GameTime.frameElapsedTime  = t\n    GameTime.elapsedTimeFactor = CONFIG.GAME_SPEED * GameTime.frameElapsedTime\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Math.PI / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Math.PI / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Math.PI / 2 && angleBetweenNodes < Math.PI) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === 3.14) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI && angleBetweenNodes < -Math.PI / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -1.57) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\nimport GameTime from '../GameTime'\nimport FrameRate from '../FrameRate'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop(0)\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(timestamp: number): void {\n\n    if (GameTime.previousTimestamp === undefined) {\n      GameTime.previousTimestamp = timestamp\n    }\n    GameTime.setFrameElapsedTime(timestamp - GameTime.previousTimestamp)\n  \n    this.update()\n    this.render()\n    FrameRate.calculateFrameRate(GameTime.previousTimestamp, GameTime.frameElapsedTime)\n  \n    GameTime.previousTimestamp = timestamp\n    window.requestAnimationFrame((ts) => this.gameLoop(ts))\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.debug_drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      // Title\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n      \n      // Level Time\n      context.font = '16px Monospace'\n      context.fillStyle = '#9999ff'\n      context.fillText(\n        `Time: ${Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)} seconds`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2) + 30\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationProgress: number = 0\n  private animationLength: number = GameTime.ONE_SECOND\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationProgress = (this.animationProgress + GameTime.frameElapsedTime) % this.animationLength\n    if (this.animationProgress >= this.animationLength / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n\n      LevelTimer.incrementTimeSpentOnCurrentLevel()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n    if (CONFIG.DEBUG.SHOW_LEVEL_TIME) {\n      LevelTimer.debug_displayTimeSpentOnCurrentLevel()\n    }\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","SMG_INDEX","gainNode","createGain","gain","value","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","constructor","x","y","collisionBox","speed","healthPercentage","prevX","prevY","maxHealth","state","Idling","previousState","animationSpritePosition","moving","left","right","up","down","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","widgets","maxSpeed","maxSpeedDiagonal","Math","sin","initializeHealth","updateMapPosition","resetMoving","resetBlocked","calculateNextCoordinates","nextX","nextY","move","round","elapsedTimeFactor","row","floor","CONFIG","TILE_SIZE","col","updateTileDeltas","checkIfBlockedByCreature","c","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","mapX","width","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","direction","dx","dy","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","yUnchanged","health","getHealthColor","CreatureState","Level","currentLevel","startingLevel","LevelTimer","reset","lastLevel","totalNumberOfMaps","timeSpentOnCurrentLevel","frameElapsedTime","beginPath","fillStyle","font","levelTimeInSeconds","fillText","CANVAS_HEIGHT","stroke","ConcreteEnemy","super","sprite","Zerg","attackSpeed","animationLengthAttack","animationProgressAttack","animationLengthMove","animationProgressMove","update","player","Dying","Decaying","target","stuck","checkIfStuck","Attacking","setState","checkForCollisionWithPlayer","checkForCollisionWithOtherEnemies","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","Moving","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","stateManager","getState","PLAYING","advanceAnimation","draw","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","ENEMY_STATE","debug_drawState","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","numberOfSpritesInAnimation","attacking","walking","pathfindingTimer","generatePathNodes","abs","findShortestPath","pathfindingInterval","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","moveTo","center","lineTo","toString","p","forEach","n","i","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Enemy","damageNumbers","Object","values","widget","render","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","every","yIsStatic","attackCooldown","playSMG","dealDamage","GAME_SPEED","takeDamage","damageAmount","playEnemyHit","DamageNumberFactory","create","die","playEnemyDeath","getDamage","newState","resetAnimation","Map","mapData","loadMap","enemies","filter","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","getColor","rect","fill","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","a","s","d","keyupHandler","FEATURES","DAMAGE_NUMBERS_ON_PLAYER","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","setShooting","isShooting","xVel","yVel","SCATTER_PROJECTILES","randomFactorX","random","randomFactorY","DamageNumberColors","gray","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","directionX","directionY","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","PI","intermediateIntervalX","intermediateIntervalY","point","red","DamageNumber","animationFinished","animationElapsed","animationLength","animationCompletionPercentage","maxHeight","fontSize","fontWidth","damageTextHalfWidth","animationHasFinished","opacity","dmgNum","DAMAGE_NUMBERS_SHOW","feature_drawDamageNumbers","damageNumber","dmgNumber","Sprites","callback","_reject","spriteSheet","Image","src","url","SpriteZerg","spriteLocations","flip","NE","SE","SW","NW","spriteSize","spriteStep","enemy","playerCoordinates","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","enemyState","SPRITE_STEP","cBox","px","py","save","translate","scale","drawImage","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","FPS_ARR","FPS","lastFrameTime","unshift","reduce","sum","current","GameAssets","GameTime","t","ONE_SECOND","previousTimestamp","startRow","startCol","path","rowEnd","colEnd","PathNode","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","timestamp","undefined","setFrameElapsedTime","calculateFrameRate","requestAnimationFrame","ts","clear","debug_drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","animationProgress","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","incrementTimeSpentOnCurrentLevel","GAME_OVER","SHOW_LEVEL_TIME","debug_displayTimeSpentOnCurrentLevel","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}