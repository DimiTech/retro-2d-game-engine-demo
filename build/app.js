(()=>{"use strict";var t={706:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.load=void 0;const o=i(675);e.load=function(t){return new Promise(((e,i)=>{const s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType="arraybuffer",s.onload=()=>{o.default.decodeAudioData(s.response,(t=>e(t)))},s.send()}))}},675:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const i=new AudioContext;e.default=i},549:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(789);e.default=class{static async load(t){await o.default.load(t)}}},287:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class i{static get musicVolume(){return this._musicVolume}static set musicVolume(t){t>=0&&t<=1&&(this._musicVolume=t)}static get soundFxVolume(){return this._soundFxVolume}static set soundFxVolume(t){t>=0&&t<=1&&(this._soundFxVolume=t)}}e.default=i,i._musicVolume=.3,i._soundFxVolume=.15},789:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(287),s=i(675),a=i(706);class l{static async load(t){const e=[a.load("./audio/smg_1.wav"),a.load("./audio/smg_2.wav"),a.load("./audio/smg_3.wav"),a.load("./audio/smg_4.wav"),a.load("./audio/smg_5.wav"),a.load("./audio/crate_hit_1.wav"),a.load("./audio/enemy_hit_1.mp3"),a.load("./audio/enemy_hit_2.mp3"),a.load("./audio/enemy_hit_3.mp3"),a.load("./audio/enemy_hit_4.mp3"),a.load("./audio/enemy_hit_5.mp3"),a.load("./audio/enemy_die_1.mp3")],i=await Promise.all(e);this.SMG[0]=i[0],this.SMG[1]=i[1],this.SMG[2]=i[2],this.SMG[3]=i[3],this.SMG[4]=i[4],this.CRATE_HIT[0]=i[5],this.ENEMY_HIT[0]=i[6],this.ENEMY_HIT[1]=i[7],this.ENEMY_HIT[2]=i[8],this.ENEMY_HIT[3]=i[9],this.ENEMY_HIT[4]=i[10],this.ENEMY_DEATH[0]=i[11],t(1)}static playSMG(){const t=s.default.createBufferSource();t.buffer=this.SMG[this.SMG_INDEX];const e=s.default.createGain();e.gain.value=.2*o.default.soundFxVolume,t.connect(e),e.connect(s.default.destination),t.start(),this.SMG_INDEX=++this.SMG_INDEX%this.SMG.length}static playEnemyHit(){if(!1===this.ENEMY_HIT_READY)return;const t=s.default.createBufferSource();t.buffer=this.ENEMY_HIT[this.ENEMY_HIT_INDEX];const e=s.default.createGain();e.gain.value=o.default.soundFxVolume,t.connect(e),e.connect(s.default.destination),t.start(),this.ENEMY_HIT_INDEX=++this.ENEMY_HIT_INDEX%this.ENEMY_HIT.length,this.ENEMY_HIT_READY=!1,setTimeout((()=>{this.ENEMY_HIT_READY=!0}),500)}static playEnemyDeath(){const t=s.default.createBufferSource();t.buffer=this.ENEMY_DEATH[0];const e=s.default.createGain();e.gain.value=o.default.soundFxVolume,t.connect(e),e.connect(s.default.destination),t.start()}static playCrateHit(){const t=s.default.createBufferSource();t.buffer=this.CRATE_HIT[0];const e=s.default.createGain();e.gain.value=o.default.soundFxVolume,t.connect(e),e.connect(s.default.destination),t.start()}}e.default=l,l.SMG=[],l.SMG_INDEX=0,l.CRATE_HIT=[],l.ENEMY_HIT=[],l.ENEMY_HIT_INDEX=0,l.ENEMY_HIT_READY=!0,l.ENEMY_DEATH=[]},625:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(322),a=i(239),l=i(422);e.default=class{constructor(){this.prevX=[],this.prevY=[],this.maxHealth=100,this.animationInterval=0,this.isMoving=!1,this.moving={left:!1,right:!1,up:!1,down:!1},this.blocked={left:!1,right:!1,up:!1,down:!1},this.deltas={dyTop:0,dyBottom:0,dxLeft:0,dxRight:0}}resetMoving(){this.moving.left=!1,this.moving.right=!1,this.moving.up=!1,this.moving.down=!1}resetBlocked(){this.blocked.up=!1,this.blocked.down=!1,this.blocked.left=!1,this.blocked.right=!1}calculateNextCoordinates(){this.nextX=this.x,this.nextY=this.y,this.moving.left&&(this.moving.up||this.moving.down?this.nextX-=this.maxSpeedDiagonal:this.nextX-=this.maxSpeed),this.moving.right&&(this.moving.up||this.moving.down?this.nextX+=this.maxSpeedDiagonal:this.nextX+=this.maxSpeed),this.moving.up&&(this.moving.left||this.moving.right?this.nextY-=this.maxSpeedDiagonal:this.nextY-=this.maxSpeed),this.moving.down&&(this.moving.left||this.moving.right?this.nextY+=this.maxSpeedDiagonal:this.nextY+=this.maxSpeed)}checkIfBlockedByCreature(t,e){if(s.collisionBoxesIntersect(e,t)){let i,o;e.x<t.x?i=e.x+e.collisionBox.halfWidth-(t.x-t.collisionBox.halfWidth):e.x>t.x&&(i=t.x+t.collisionBox.halfWidth-(e.x-e.collisionBox.halfWidth)),e.y<t.y?o=e.y+e.collisionBox.halfHeight-(t.y-t.collisionBox.halfHeight):e.y>t.y&&(o=t.y+t.collisionBox.halfHeight-(e.y-e.collisionBox.halfHeight)),!i||i>=o?e.y<t.y?this.blocked.down=!0:this.blocked.up=!0:(!o||i<o)&&(e.x<t.x?this.blocked.right=!0:this.blocked.left=!0)}}adjustCollisionWithGameObjects(){let t;if(a.gameObjects[this.row]){if(this.moving.left){t=a.gameObjects[this.row][this.col-1],t&&this.x-this.collisionBox.halfWidth<=t.mapX+t.width&&(this.x=t.mapX+t.width+this.collisionBox.halfWidth+1);const e=Math.floor((this.y+this.collisionBox.halfHeight-1)/o.TILE_SIZE);e&&e!==this.row&&(t=a.gameObjects[e][this.col-1],t&&this.x-this.collisionBox.halfWidth<=t.mapX+t.width&&(this.moving.down&&this.deltas.dyTop<=this.deltas.dxRight||(this.x=t.mapX+t.width+this.collisionBox.halfWidth+1)));const i=Math.floor((this.y-this.collisionBox.halfHeight)/o.TILE_SIZE);i&&i!==this.row&&(t=a.gameObjects[i][this.col-1],t&&this.x-this.collisionBox.halfWidth<=t.mapX+t.width&&(this.moving.up&&this.deltas.dyBottom<=this.deltas.dxRight||(this.x=t.mapX+t.width+this.collisionBox.halfWidth+1)))}if(this.moving.right){t=a.gameObjects[this.row][this.col+1],t&&this.x+this.collisionBox.halfWidth>=t.mapX&&(this.x=t.mapX-this.collisionBox.halfWidth-1);const e=Math.floor((this.y+this.collisionBox.halfHeight-1)/o.TILE_SIZE);e&&e!==this.row&&(t=a.gameObjects[e][this.col+1],t&&this.x+this.collisionBox.halfWidth>=t.mapX&&(this.moving.down&&this.deltas.dyTop<=this.deltas.dxLeft||(this.x=t.mapX-this.collisionBox.halfWidth-1)));const i=Math.floor((this.y-this.collisionBox.halfHeight)/o.TILE_SIZE);e&&i!==this.row&&(t=a.gameObjects[i][this.col+1],t&&this.x+this.collisionBox.halfWidth>=t.mapX&&(this.moving.up&&this.deltas.dyBottom<=this.deltas.dxLeft||(this.x=t.mapX-this.collisionBox.halfWidth-1)))}}if(a.gameObjects[this.row-1]&&this.moving.up){t=a.gameObjects[this.row-1][this.col],t&&this.y-this.collisionBox.halfHeight<=t.mapY+t.height&&(this.y=t.mapY+t.height+this.collisionBox.halfHeight+1);const e=Math.floor((this.x+this.collisionBox.halfWidth-1)/o.TILE_SIZE);e&&e!==this.col&&(t=a.gameObjects[this.row-1][e],t&&this.y-this.collisionBox.halfHeight<=t.mapY+t.height&&(this.moving.right&&this.deltas.dyBottom>this.deltas.dxLeft||(this.y=t.mapY+t.height+this.collisionBox.halfHeight+1)));const i=Math.floor((this.x-this.collisionBox.halfWidth)/o.TILE_SIZE);i&&i!==this.col&&(t=a.gameObjects[this.row-1][i],t&&this.y-this.collisionBox.halfHeight<=t.mapY+t.height&&(this.moving.left&&this.deltas.dyBottom>this.deltas.dxRight||(this.y=t.mapY+t.height+this.collisionBox.halfHeight+1)))}if(a.gameObjects[this.row+1]){this.moving.down&&(t=a.gameObjects[this.row+1][this.col],t&&this.y+this.collisionBox.halfHeight>=t.mapY&&(this.y=t.mapY-this.collisionBox.halfHeight-1));const e=Math.floor((this.x+this.collisionBox.halfWidth-1)/o.TILE_SIZE);e&&e!==this.col&&(t=a.gameObjects[this.row+1][e],t&&this.y+this.collisionBox.halfHeight>=t.mapY&&(this.moving.right&&this.deltas.dyTop>this.deltas.dxLeft||(this.y=t.mapY-this.collisionBox.halfHeight-1)));const i=Math.floor((this.x-this.collisionBox.halfWidth)/o.TILE_SIZE);i&&i!==this.col&&(t=a.gameObjects[this.row+1][i],t&&this.y+this.collisionBox.halfHeight>=t.mapY&&(this.moving.left&&this.deltas.dyTop>this.deltas.dxRight||(this.y=t.mapY-this.collisionBox.halfHeight-1)))}}updatePreviousCoordinates(){this.prevX.push(this.x),this.prevX.length>5&&this.prevX.shift(),this.prevY.push(this.y),this.prevY.length>5&&this.prevY.shift()}updateDirection(){const t=[],e=this.prevX[this.prevX.length-1]-this.prevX[this.prevX.length-2],i=this.prevY[this.prevY.length-1]-this.prevY[this.prevY.length-2];i>0?t.push(l.Directions.S):i<0&&t.push(l.Directions.N),e>0?t.push(l.Directions.E):e<0&&t.push(l.Directions.W);const o=t.join("")||this.direction||"S";this.direction=l.Directions[o]}checkIfMoving(){const t=this.prevX[this.prevX.length-1]===this.prevX[this.prevX.length-2],e=this.prevY[this.prevY.length-1]===this.prevY[this.prevY.length-2];return!t||!e}initializeHealth(t=1){(t<0||t>1)&&(t=1),this.health=this.maxHealth*t}getHealthColor(){return this.health<=.1*this.maxHealth?"#FF5700":this.health<=.2*this.maxHealth?"#FF7B00":this.health<=.3*this.maxHealth?"#FF9E00":this.health<=.4*this.maxHealth?"#FFC100":this.health<=.5*this.maxHealth?"#FFE400":this.health<=.6*this.maxHealth?"#FFF600":this.health<=.7*this.maxHealth?"#E5FF00":this.health<=.8*this.maxHealth?"#D4FF00":this.health<=.9*this.maxHealth?"#B0FF00":this.health<this.maxHealth?"#8DFF00":this.health===this.maxHealth?"#6AFF00":void 0}}},384:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861);e.default=class{constructor(){this.rows=o.CANVAS_HEIGHT/o.TILE_SIZE,this.cols=o.CANVAS_WIDTH/o.TILE_SIZE}}},708:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(789),a=i(63),l=i(15),h=i(811),n=i(35),r=i(322),c=i(533),d=i(735),x=i(776),f=i(843);class u extends x.default{constructor(t,e,i,o){super(t,e,new r.default(14,14),1,i),this.pathfindingInterval=o,this.sprite=f.default.Zerg,this.attackSpeed=60,this.updateMapPosition()}update(t,e){this.target||(this.target=t),this.resetBlocked(),this.calculateNextCoordinates(),this.updatePreviousCoordinates(),this.stuck=this.checkIfStuck(),this.isMoving=this.checkIfMoving(),this.adjustCollisionWithGameObjects(),this.checkForCollisionWithPlayer(t),this.checkForCollisionWithOtherEnemies(t),this.distanceFromPlayer=n.pointToPointDistance({x:t.x,y:t.y},{x:this.x,y:this.y}),this.checkIfShouldAttack(t)?(this.attacking=!0,this.attack(t)):(this.attacking=!1,this.resetAttackCooldown()),this.thereAreObstaclesBetweenPlayerAndThisEnemy=c.default.determineIfThereAreObstaclesBetweenTwoPathNodes(this,t),this.findPathToPlayer(t),this.move(),this.updateDirection(),this.updateTileDeltas(),a.default.stateManager.getState()!==l.default.PAUSED&&this.advanceAnimation()}draw(t){o.DEBUG.ENEMY_COLLISION_BOX&&this.drawCollisionBox(t),o.DEBUG.RAY_TO_PLAYER&&this.drawRayToPlayer(t),o.DEBUG.PATHFINDING_NODES&&d.drawPathNodes(this.pathfindingNodes,t,this.getHealthColor()),o.DEBUG.SHORTEST_PATH_TO_PLAYER&&this.drawShortestPathToPlayer(t),this.sprite.draw(this,{x:t.x,y:t.y})}takeDamage(t){s.default.playEnemyHit(),this.health-=t,this.health<=0?this.die():s.default.playEnemyHit()}die(){s.default.playEnemyDeath(),this.alive=!1}advanceAnimation(){this.animationInterval=(this.animationInterval+.5)%this.sprite.animationPeriods.walking}findPathToPlayer(t){this.thereAreObstaclesBetweenPlayerAndThisEnemy?(0===this.pathfindingInterval&&(this.pathfindingNodes=d.generatePathNodes(Math.round(Math.abs(t.row+this.row)/2),Math.round(Math.abs(t.col+this.col)/2),this.collisionBox),this.shortestPath=d.findShortestPath(this,t,this.pathfindingNodes)),this.pathfindingInterval=(this.pathfindingInterval+1)%this.pathfindingPeriod,this.shortestPath.length>0&&this.followTheShortestPath()):(this.pathfindingNodes&&(this.pathfindingNodes=null),this.shortestPath&&(this.shortestPath=[]),this.moveTowardsPlayer(t))}followTheShortestPath(){let t=this.shortestPath[this.shortestPath.length-1].x,e=this.shortestPath[this.shortestPath.length-1].y;this.shortestPath.length>1&&Math.abs(t-this.x)<3&&Math.abs(e-this.y)<3&&(this.shortestPath.pop(),t=this.shortestPath[this.shortestPath.length-1].x,e=this.shortestPath[this.shortestPath.length-1].y),this.moveTowards(t,e)}moveTowardsPlayer(t){this.distanceFromPlayer>this.collisionBox.width?this.moveTowards(t.x,t.y):this.resetMoving()}moveTowards(t,e){this.resetMoving(),this.x<t?this.moving.right=!0:this.x>t&&(this.moving.left=!0),this.y<e?this.moving.down=!0:this.y>e&&(this.moving.up=!0)}move(){this.moving.left&&!this.blocked.left&&(this.moving.up||this.moving.down?this.x-=this.maxSpeedDiagonal:this.x-=this.maxSpeed),this.moving.right&&!this.blocked.right&&(this.moving.up||this.moving.down?this.x+=this.maxSpeedDiagonal:this.x+=this.maxSpeed),this.moving.up&&!this.blocked.up&&(this.moving.left||this.moving.right?this.y-=this.maxSpeedDiagonal:this.y-=this.maxSpeed),this.moving.down&&!this.blocked.down&&(this.moving.left||this.moving.right?this.y+=this.maxSpeedDiagonal:this.y+=this.maxSpeed),this.updateMapPosition()}updateMapPosition(){this.row=Math.floor(this.y/o.TILE_SIZE),this.col=Math.floor(this.x/o.TILE_SIZE)}updateTileDeltas(){this.deltas.dyTop=this.y%o.TILE_SIZE,this.deltas.dyBottom=o.TILE_SIZE-this.deltas.dyTop,this.deltas.dxLeft=this.x%o.TILE_SIZE,this.deltas.dxRight=o.TILE_SIZE-this.deltas.dxLeft}drawCollisionBox(t){h.context.strokeStyle=this.getHealthColor(),h.context.lineWidth=.2,h.context.beginPath(),h.context.moveTo(.5+h.default.center.x+(this.x-t.x)-this.collisionBox.halfWidth,.5+h.default.center.y+(this.y-t.y)-this.collisionBox.halfHeight),h.context.lineTo(-.5+h.default.center.x+(this.x-t.x)+this.collisionBox.halfWidth,.5+h.default.center.y+(this.y-t.y)-this.collisionBox.halfHeight),h.context.lineTo(-.5+h.default.center.x+(this.x-t.x)+this.collisionBox.halfWidth,-.5+h.default.center.y+(this.y-t.y)+this.collisionBox.halfHeight),h.context.lineTo(.5+h.default.center.x+(this.x-t.x)-this.collisionBox.halfWidth,-.5+h.default.center.y+(this.y-t.y)+this.collisionBox.halfHeight),h.context.lineTo(.5+h.default.center.x+(this.x-t.x)-this.collisionBox.halfWidth,.5+h.default.center.y+(this.y-t.y)-this.collisionBox.halfHeight),h.context.stroke()}drawRayToPlayer(t){this.thereAreObstaclesBetweenPlayerAndThisEnemy?h.context.strokeStyle="#FFFF44":h.context.strokeStyle="#00F0FF",h.context.lineWidth=.5,h.context.beginPath(),h.context.moveTo(h.default.center.x+(this.x-t.x),h.default.center.y+(this.y-t.y)),h.context.lineTo(h.default.center.x,h.default.center.y),h.context.stroke()}drawShortestPathToPlayer(t){this.shortestPath.forEach(((e,i)=>{d.drawNode(e,t,e.visited?"#FF0000":"#FF00FF")})),this.shortestPath.length>0&&this.shortestPath.forEach(((e,i)=>{this.drawRayFromPointToPoint(e,this.shortestPath[i-1]||t,t)}))}drawRayFromPointToPoint(t,e,i){h.context.strokeStyle="#FF00FF",h.context.lineWidth=.2,h.context.beginPath(),h.context.moveTo(h.default.center.x+(e.x-i.x),h.default.center.y+(e.y-i.y)),h.context.lineTo(h.default.center.x+(t.x-i.x),h.default.center.y+(t.y-i.y)),h.context.stroke()}}e.default=u},776:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(625),a=i(789),l=i(239);class h extends s.default{constructor(t,e,i,o,s){super(),this.x=t,this.y=e,this.alive=!0,this.pathfindingInterval=0,this.pathfindingPeriod=30,this.shortestPath=[],this.attacking=!1,this.initializeHealth(s),this.maxSpeed=o,this.maxSpeedDiagonal=Math.round(Math.sin(45)*this.maxSpeed),this.collisionBox=i,this.attackCooldown=this.attackSpeed}isOnScreen(t,e){const i=2*o.TILE_SIZE;return Math.abs(this.x-t)<o.CANVAS_WIDTH/2+i&&Math.abs(this.y-e)<o.CANVAS_HEIGHT/2+i}checkForCollisionWithPlayer(t){const e={x:this.nextX,y:this.nextY,collisionBox:this.collisionBox};this.checkIfBlockedByCreature(t,e)}checkForCollisionWithOtherEnemies(t){const e={x:this.nextX,y:this.nextY,collisionBox:this.collisionBox};l.getEnemiesOnScreen(this.x,this.y).forEach((t=>{this!==t&&this.checkIfBlockedByCreature(t,e)}))}checkIfShouldAttack(t){const e=(t.collisionBox.halfWidth+this.collisionBox.halfWidth)*Math.sqrt(2);return this.distanceFromPlayer<e}resetAttackCooldown(){this.attackCooldown=this.attackSpeed}checkIfStuck(){const t=this.prevX.every((t=>t===this.prevX[0])),e=this.prevY.every((t=>t===this.prevY[0]));return!(!t||!e)}attack(t){this.attacking&&this.attackCooldown<=0?(this.resetAttackCooldown(),a.default.playSMG(),t.takeDamage(this.getDamage())):--this.attackCooldown}getDamage(){return 10}}e.default=h},239:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEnemiesOnScreen=e.enemies=e.gameObjects=void 0;const o=i(861),s=i(708),a=i(811),l=i(30),h=i(309);function n(t,i){return e.enemies.filter((e=>e.isOnScreen(t,i)))}e.gameObjects=[],e.enemies=[],e.getEnemiesOnScreen=n,e.default=class{constructor(t,e){this.grid=t,this.player=e,this.loadMap(h)}update(){e.enemies.forEach(((t,i)=>{t.update(this.player,e.enemies),!1===t.alive&&e.enemies.splice(i,1)}))}draw(){this.drawGameObjects(),n(this.player.x,this.player.y).forEach((t=>t.draw(this.player)))}drawGameObjects(){const t=this.player.deltas.dxLeft-a.default.colRemainder,i=this.player.deltas.dyTop-a.default.rowRemainder,s=this.player.row-a.default.halfRows,l=this.player.col-a.default.halfCols;let h;for(let n=s;n<s+a.default.rows+1;++n)for(let r=l-1;r<l+a.default.cols+1;++r)e.gameObjects[n]&&e.gameObjects[n][r]&&(h=e.gameObjects[n][r],h.x=(r-l)*o.TILE_SIZE-t,h.y=(n-s)*o.TILE_SIZE-i,h.draw())}loadMap(t){for(let i=0;i<t.gameObjects.length;++i){e.gameObjects[i]=[];for(let o=0;o<t.gameObjects[i].length;++o)e.gameObjects[i][o]=l.default.createGameObject(i,o,t.gameObjects[i][o])}t.enemies.forEach(((t,i)=>{e.enemies.push(new s.default(t.x,t.y,t.healthPercentage,i))}))}}},179:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.isBox=void 0,function(t){t[t.Empty=0]="Empty",t[t.BoxGray=1]="BoxGray",t[t.BoxGreen=2]="BoxGreen",t[t.BoxBlue=3]="BoxBlue"}(i||(i={})),e.isBox=function(t){return i[t].startsWith("Box")},e.default=i},49:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861);e.default=class{constructor(t,e,i,s,a,l=!0){this.row=t,this.col=e,this.width=i,this.height=s,this.color=a,this.destructable=l,this.mapX=e*o.TILE_SIZE,this.mapY=t*o.TILE_SIZE}}},30:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(179),s=i(117);e.default=class{static createGameObject(t,e,i){return o.isBox(i)?s.default.createBox(t,e,i):null}}},343:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(811),a=i(789),l=i(49);class h extends l.default{draw(){s.context.strokeStyle=this.color,s.context.lineWidth=1,s.context.beginPath(),s.context.moveTo(.5+this.x,.5+this.y),s.context.lineTo(-.5+this.x+o.TILE_SIZE,.5+this.y),s.context.lineTo(-.5+this.x+o.TILE_SIZE,-.5+this.y+o.TILE_SIZE),s.context.lineTo(.5+this.x,-.5+this.y+o.TILE_SIZE),s.context.lineTo(.5+this.x,.5+this.y),s.context.moveTo(.5+this.x,.5+this.y),s.context.lineTo(-.5+this.x+o.TILE_SIZE,-.5+this.y+o.TILE_SIZE),s.context.moveTo(-.5+this.x+o.TILE_SIZE,.5+this.y),s.context.lineTo(.5+this.x,-.5+this.y+o.TILE_SIZE),s.context.stroke()}takeDamage(t){a.default.playCrateHit()}}e.default=h},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(343),a=i(179);e.default=class{static createBox(t,e,i){switch(i){case a.default.BoxGray:return new s.default(t,e,o.TILE_SIZE,o.TILE_SIZE,"#4B4B4B",!1);case a.default.BoxGreen:return new s.default(t,e,o.TILE_SIZE,o.TILE_SIZE,"#27531B");case a.default.BoxBlue:return new s.default(t,e,o.TILE_SIZE,o.TILE_SIZE,"#572F17");default:throw new Error("No such box!")}}}},144:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(811);e.default=class{static draw(){const t=o.default.mousePosition.x,e=o.default.mousePosition.y;let i,s;o.context.strokeStyle="#FFFFFF",o.context.lineWidth=.5,o.context.beginPath(),i=.5,s=-1.5,o.context.moveTo(t+i,e+s),s=-3.5,o.context.lineTo(t+i,e+s),s=2.5,o.context.moveTo(t+i,e+s),s=4.5,o.context.lineTo(t+i,e+s),s=.5,i=-3.5,o.context.moveTo(t+i,e+s),i=-1.5,o.context.lineTo(t+i,e+s),i=2.5,o.context.moveTo(t+i,e+s),i=4.5,o.context.lineTo(t+i,e+s),o.context.stroke()}}},645:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(811),a=i(533),l=i(322),h=i(35),n=i(625),r=i(239),c=i(144),d=i(537),x=i(789);class f extends n.default{constructor(t,e){super(),this.x=t,this.y=e,this.alive=!0,this.rotation=0,this.sightLineLength=10,this.shooting=!1,this.shootingCooldown=6,this.projectiles=[],this.initializeHealth(),this.maxSpeed=2,this.maxSpeedDiagonal=Math.round(Math.sin(45)*this.maxSpeed),this.collisionBox=new l.default(12,12),this.updateMapPosition()}update(){this.resetBlocked(),this.calculateNextCoordinates(),this.checkForCollisionWithEnemies(),this.move(),this.adjustCollisionWithGameObjects(),this.updateMapPosition(),this.updateTileDeltas(),this.shoot(),this.projectiles.forEach(((t,e)=>{t.update(this.x,this.y),!1===t.alive&&this.projectiles.splice(e,1)}))}draw(){const t=this.calculateTheta();this.drawPlayer(t),this.drawPlayerVisionRay(t),o.DEBUG.PLAYER_VISION_RAY_SHOTGUN&&(this.drawPlayerVisionRay(t-.45),this.drawPlayerVisionRay(t-.4),this.drawPlayerVisionRay(t-.35),this.drawPlayerVisionRay(t-.3),this.drawPlayerVisionRay(t-.25),this.drawPlayerVisionRay(t-.2),this.drawPlayerVisionRay(t-.15),this.drawPlayerVisionRay(t-.1),this.drawPlayerVisionRay(t-.05),this.drawPlayerVisionRay(t+.05),this.drawPlayerVisionRay(t+.1),this.drawPlayerVisionRay(t+.15),this.drawPlayerVisionRay(t+.2),this.drawPlayerVisionRay(t+.25),this.drawPlayerVisionRay(t+.3),this.drawPlayerVisionRay(t+.35),this.drawPlayerVisionRay(t+.4),this.drawPlayerVisionRay(t+.45)),c.default.draw(),this.drawProjectiles()}shoot(){if(this.shooting&&this.shootingCooldown<=0){const t=s.default.mousePosition.x-s.default.center.x,e=s.default.mousePosition.y-s.default.center.y;let i=t/(Math.abs(t)+Math.abs(e)),a=e/(Math.abs(t)+Math.abs(e));if(o.FEATURES.SCATTER_PROJECTILES){const t=.1*Math.random()-.05,e=.1*Math.random()-.05;i+=t,a+=e}this.projectiles.push(new d.default(this.x,this.y,i,a)),this.shootingCooldown=6,x.default.playSMG()}else--this.shootingCooldown}setShooting(t){this.shooting=t}takeDamage(t){this.health=this.health-t,this.health}move(){this.moving.left&&!this.blocked.left&&(this.moving.up||this.moving.down?this.x-=this.maxSpeedDiagonal:this.x-=this.maxSpeed),this.moving.right&&!this.blocked.right&&(this.moving.up||this.moving.down?this.x+=this.maxSpeedDiagonal:this.x+=this.maxSpeed),this.moving.up&&!this.blocked.up&&(this.moving.left||this.moving.right?this.y-=this.maxSpeedDiagonal:this.y-=this.maxSpeed),this.moving.down&&!this.blocked.down&&(this.moving.left||this.moving.right?this.y+=this.maxSpeedDiagonal:this.y+=this.maxSpeed)}calculateTheta(){const t=h.angleBetweenPoints(s.default.mousePosition,s.default.center);return s.context.fillStyle="#44FF44",s.context.fillText(`θ = ${t.toFixed(2)}`,10,56),t}drawPlayer(t){s.context.beginPath(),s.context.fillStyle="#00AA00",s.context.font="10px Monospace",s.context.fillText(`p (${this.x}, ${this.y})`,10,20),s.context.strokeStyle="#523DA5",s.context.lineWidth=2,s.context.moveTo(s.default.center.x,s.default.center.y),s.context.lineTo(s.default.center.x+this.sightLineLength*Math.cos(t),s.default.center.y+this.sightLineLength*Math.sin(t)),s.context.stroke(),o.DEBUG.PLAYER_COLLISION_BOX&&this.drawCollisionBox()}drawCollisionBox(){s.context.strokeStyle=this.getHealthColor(),s.context.lineWidth=.5,s.context.beginPath(),s.context.moveTo(-.5+s.default.center.x-this.collisionBox.halfWidth,-.5+s.default.center.y-this.collisionBox.halfHeight),s.context.lineTo(.5+s.default.center.x+this.collisionBox.halfWidth,-.5+s.default.center.y-this.collisionBox.halfHeight),s.context.lineTo(.5+s.default.center.x+this.collisionBox.halfWidth,.5+s.default.center.y+this.collisionBox.halfHeight),s.context.lineTo(-.5+s.default.center.x-this.collisionBox.halfWidth,.5+s.default.center.y+this.collisionBox.halfHeight),s.context.lineTo(-.5+s.default.center.x-this.collisionBox.halfWidth,-.5+s.default.center.y-this.collisionBox.halfHeight),s.context.stroke()}drawPlayerVisionRay(t){const{hitPoint:e,hitObject:i}=a.default.cast(this,t);e&&(i?a.default.drawRay(e,"#FF4444"):a.default.drawRay(e))}drawProjectiles(){this.projectiles.forEach((t=>t.draw(this.x,this.y)))}updateMapPosition(){this.row=Math.floor(this.y/o.TILE_SIZE),this.col=Math.floor(this.x/o.TILE_SIZE)}updateTileDeltas(){this.deltas.dyTop=this.y%o.TILE_SIZE,this.deltas.dyBottom=o.TILE_SIZE-this.deltas.dyTop,this.deltas.dxLeft=this.x%o.TILE_SIZE,this.deltas.dxRight=o.TILE_SIZE-this.deltas.dxLeft}checkForCollisionWithEnemies(){const t={x:this.nextX,y:this.nextY,collisionBox:this.collisionBox},e=r.getEnemiesOnScreen(this.x,this.y);e.some((e=>l.collisionBoxesIntersect(e,t)))&&e.forEach((e=>{this.checkIfBlockedByCreature(e,t)}))}die(){this.alive=!1}}e.default=f},537:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(811),a=i(239);e.default=class{constructor(t,e,i,o){this.x=t,this.y=e,this.directionX=i,this.directionY=o,this.speed=24,this.damage=10,this.alive=!0,this.numberOfIntermediatePositions=3,this.intermediatePositions=[];for(let t=0;t<this.numberOfIntermediatePositions;++t)this.intermediatePositions[t]={x:null,y:null,row:null,col:null}}update(t,e){this.previousX=this.x,this.previousY=this.y,this.x+=this.directionX*this.speed,this.y+=this.directionY*this.speed,this.row=Math.floor(this.y/o.TILE_SIZE),this.col=Math.floor(this.x/o.TILE_SIZE);const i=this.getNearbyEnemies();this.calculateIntermediatePoints(),this.isOffScreen(t,e)&&(this.alive=!1),this.intermediatePositions.forEach((t=>{this.alive&&(this.checkCollisionWithEnemies(i,t),this.checkCollisionWithGameObject(t))})),this.alive&&(this.checkCollisionWithEnemies(i),this.checkCollisionWithGameObject())}draw(t,e){this.x===t&&this.y===e||(s.context.strokeStyle="#8AFCFF",s.context.lineWidth=1,s.context.beginPath(),s.context.arc(this.x+s.default.center.x-t,this.y+s.default.center.y-e,2,0,2*Math.PI),s.context.stroke())}getNearbyEnemies(){return[...a.enemies].filter((t=>Math.abs(t.x-this.x)<=o.TILE_SIZE&&Math.abs(t.y-this.y)<=o.TILE_SIZE))}calculateIntermediatePoints(){const t=(this.x-this.previousX)/(this.numberOfIntermediatePositions+1),e=(this.y-this.previousY)/(this.numberOfIntermediatePositions+1);for(let i=this.numberOfIntermediatePositions-1;i>=0;--i)this.intermediatePositions[i].x=this.x-t*(i+1),this.intermediatePositions[i].y=this.y-e*(i+1),this.intermediatePositions[i].row=Math.floor(this.intermediatePositions[i].y/o.TILE_SIZE),this.intermediatePositions[i].col=Math.floor(this.intermediatePositions[i].x/o.TILE_SIZE)}isOffScreen(t,e){return this.x<t-s.default.center.x-o.TILE_SIZE||this.x>t+s.default.center.x+o.TILE_SIZE||this.y<e-s.default.center.y-o.TILE_SIZE||this.y>e+s.default.center.y+o.TILE_SIZE}checkCollisionWithEnemies(t,e){e||(e=this),t.forEach((t=>{e.x>=t.x-t.collisionBox.halfWidth&&e.x<=t.x+t.collisionBox.halfWidth&&e.y>=t.y-t.collisionBox.halfHeight&&e.y<=t.y+t.collisionBox.halfHeight&&(this.alive=!1,t.takeDamage(this.getDamage()))}))}checkCollisionWithGameObject(t){t||(t=this);const e=a.gameObjects[t.row][t.col];e&&(e.takeDamage(this.getDamage()),this.alive=!1,e.destructable&&(a.gameObjects[t.row][t.col]=null))}getDamage(){return this.damage}}},400:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(843);e.default=class{static async load(t){o.default.load(t)}}},843:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(945);class s{static async load(t){await s.Zerg.load((()=>t(1)))}}e.default=s,s.Zerg=new o.default},569:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{load(t){return new Promise(((e,i)=>{this.spriteSheet=new Image,this.spriteSheet.src=this.url,this.spriteSheet.onload=()=>{t(),e()}}))}}},945:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(811),s=i(569);class a extends s.default{constructor(){super(...arguments),this.url="./graphics/spritesheets/zergling.png",this.animationPeriods={walking:8}}draw(t,e){const i={N:{col:0,flip:!1},NE:{col:2,flip:!1},E:{col:4,flip:!1},SE:{col:6,flip:!1},S:{col:8,flip:!1},SW:{col:6,flip:!0},W:{col:4,flip:!0},NW:{col:2,flip:!0}}[t.direction],s=7,a=5,l=43,h=42,{x:n,y:r,collisionBox:c}=t,{x:d,y:x}=e;!1===t.isMoving&&(t.animationInterval=0),i.flip&&(o.context.save(),o.context.translate(o.default.center.x+(n-d-c.halfWidth),o.default.center.y+(r-x-c.halfHeight)),o.context.scale(-1,1)),o.context.drawImage(this.spriteSheet,s+l*i.col,a+h*Math.floor(t.animationInterval/2),32,32,i.flip?-16:o.default.center.x+(n-d-c.halfWidth),i.flip?0:o.default.center.y+(r-x-c.halfHeight),t.collisionBox.width+2,t.collisionBox.height+2),i.flip&&o.context.restore()}}e.default=a},811:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.context=void 0;const o=i(861),s=i(301),a=document.getElementById("canvas");a.width=o.CANVAS_WIDTH,a.height=o.CANVAS_HEIGHT,a.style.width=1!==o.SCALE?o.SCALE*o.CANVAS_WIDTH+"px":"auto",a.style.height=1!==o.SCALE?o.SCALE*o.CANVAS_HEIGHT+"px":"auto",e.context=a.getContext("2d");class l{static clear(){e.context.clearRect(0,0,a.width,a.height)}static updateMousePosition(){this.mousePosition={x:Math.floor((s.default.x-a.offsetLeft)/o.SCALE),y:Math.floor((s.default.y-a.offsetTop)/o.SCALE)}}}e.default=l,l.halfWidth=a.width/2,l.halfHeight=a.height/2,l.rows=Math.floor(a.height/o.TILE_SIZE),l.cols=Math.floor(a.width/o.TILE_SIZE),l.halfRows=Math.floor(a.height/2/o.TILE_SIZE),l.halfCols=Math.floor(a.width/2/o.TILE_SIZE),l.rowRemainder=a.height/2%o.TILE_SIZE,l.colRemainder=a.width/2%o.TILE_SIZE,l.center={x:o.CANVAS_WIDTH/2,y:o.CANVAS_HEIGHT/2},l.getCanvasDomElement=()=>a},322:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.collisionBoxesIntersect=void 0;const o=i(861);e.default=class{constructor(t,e){if(this.width=t,this.height=e,o.THROW_DEVELOPMENT_ERRORS&&(t%2!=0||e%2!=0))throw new Error("Always use even numbers for collision box dimensions!");this.halfWidth=this.width/2,this.halfHeight=this.height/2}},e.collisionBoxesIntersect=function(t,e){return t.x-t.collisionBox.halfWidth<e.x+e.collisionBox.halfWidth&&t.x+t.collisionBox.halfWidth>e.x-e.collisionBox.halfWidth&&t.y-t.collisionBox.halfHeight<e.y+e.collisionBox.halfHeight&&t.y+t.collisionBox.halfHeight>e.y-e.collisionBox.halfHeight}},422:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Directions=void 0,(i=e.Directions||(e.Directions={})).N="N",i.NE="NE",i.E="E",i.SE="SE",i.S="S",i.SW="SW",i.W="W",i.NW="NW"},829:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(811);let a,l;const h=[0,0,0,0,0,0,0,0,0,0,0];let n;e.default=class{static restart(){a=null;for(let t=0;t<h.length;++t)h[t]=0}static calculateFrameRate(){if(a){const t=performance.now();l=t-a,h.unshift(1e3/l),h.pop(),n=h.reduce(((t,e)=>t+e),0)/h.length,a=t}else a=performance.now(),n=0}static drawFPS(){s.context.beginPath(),s.context.fillStyle="#FFC100",s.context.font="8px Monospace",s.context.fillText(`FPS: ${n&&n.toFixed(2)||"unknown"}`,10,o.CANVAS_HEIGHT-10),s.context.stroke()}}},201:(t,e)=>{var i;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.Graphics=0]="Graphics",t[t.Audio=1]="Audio"}(i||(i={})),e.default=i},735:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PathNode=e.findShortestPath=e.drawNode=e.drawPathNodes=e.generatePathNodes=void 0;const o=i(861),s=i(35),a=i(322),l=i(811),h=i(239);function n(t,e,i){l.context.strokeStyle=i,l.context.lineWidth=.1,l.context.beginPath(),l.context.moveTo(.5+l.default.center.x+(t.x-e.x)-t.collisionBox.halfWidth,.5+l.default.center.y+(t.y-e.y)-t.collisionBox.halfHeight),l.context.lineTo(-.5+l.default.center.x+(t.x-e.x)+t.collisionBox.halfWidth,.5+l.default.center.y+(t.y-e.y)-t.collisionBox.halfHeight),l.context.lineTo(-.5+l.default.center.x+(t.x-e.x)+t.collisionBox.halfWidth,-.5+l.default.center.y+(t.y-e.y)+t.collisionBox.halfHeight),l.context.lineTo(.5+l.default.center.x+(t.x-e.x)-t.collisionBox.halfWidth,-.5+l.default.center.y+(t.y-e.y)+t.collisionBox.halfHeight),l.context.lineTo(.5+l.default.center.x+(t.x-e.x)-t.collisionBox.halfWidth,.5+l.default.center.y+(t.y-e.y)-t.collisionBox.halfHeight),l.context.stroke(),l.context.beginPath(),l.context.arc(l.default.center.x+(t.x-e.x),l.default.center.y+(t.y-e.y),1,0,2*Math.PI),l.context.stroke()}e.generatePathNodes=function(t,e,i){const s=[];let a=t-l.default.halfRows-3,n=e-l.default.halfCols-2;const c=t+l.default.halfRows+3,d=e+l.default.halfCols+2;a<0&&(a=0),n<0&&(n=0);for(let t=a;t<c;++t)for(let e=n-1;e<d;++e)h.gameObjects[t]&&h.gameObjects[t][e]||e>0&&t>0&&s.push(new r({x:e*o.TILE_SIZE+o.TILE_SIZE/2,y:t*o.TILE_SIZE+o.TILE_SIZE/2},i));return s},e.drawPathNodes=function(t,e,i){t&&t.forEach((t=>n(t,e,i)))},e.drawNode=n,e.findShortestPath=function(t,e,i){const o=new r(e,e.collisionBox),a=new r(t,t.collisionBox);i.push(o),a.f=0,a.g=a.heuristic(o);const l=[a];let n;for(;l.length>0||n===o;){for(l.sort(((t,e)=>t.g-e.g));l.length>0&&!0===l[0].visited;)l.shift();if(l.length<=0)break;n=l.shift(),n.visited=!0,n.neighbourNodes=[...i].filter((t=>!(!(t.col===n.col&&t.row===n.row||t.col===n.col&&t.row===n.row-1||t.col===n.col+1&&t.row===n.row||t.col===n.col&&t.row===n.row+1||t.col===n.col-1&&t.row===n.row)&&(t.col!==n.col-1||t.row!==n.row-1||h.gameObjects[t.row]&&null!==h.gameObjects[t.row][t.col+1]&&h.gameObjects[t.row+1]&&null!==h.gameObjects[t.row+1][t.col])&&(t.col!==n.col+1||t.row!==n.row-1||h.gameObjects[t.row]&&null!==h.gameObjects[t.row][t.col-1]&&h.gameObjects[t.row+1]&&null!==h.gameObjects[t.row+1][t.col])&&(t.col!==n.col+1||t.row!==n.row+1||h.gameObjects[t.row]&&null!==h.gameObjects[t.row][t.col-1]&&h.gameObjects[t.row-1]&&null!==h.gameObjects[t.row-1][t.col])&&(t.col!==n.col-1||t.row!==n.row+1||h.gameObjects[t.row]&&null!==h.gameObjects[t.row][t.col+1]&&h.gameObjects[t.row-1]&&null!==h.gameObjects[t.row-1][t.col])))),n.neighbourNodes.map((t=>{!1===t.visited&&l.push(t);const e=n.f+s.pointToPointDistance(n,t);return e<t.f&&(t.parent=n,t.f=e,t.g=t.f+t.heuristic(o)),t}))}const c=[];if(o.parent){let t=o;for(;t.parent;)c.push(t),t=t.parent}return c};class r{constructor(t,e){this.deltas={dyTop:0,dyBottom:0,dxLeft:0,dxRight:0},this.visited=!1,this.g=1/0,this.f=1/0,this.parent=null,this.x=t.x,this.y=t.y,this.collisionBox=new a.default(e.width,e.height),this.updateTileDeltas(),this.updateMapPosition()}heuristic(t){return s.pointToPointDistance(this,t)}updateTileDeltas(){this.deltas.dyTop=this.y%o.TILE_SIZE,this.deltas.dyBottom=o.TILE_SIZE-this.deltas.dyTop,this.deltas.dxLeft=this.x%o.TILE_SIZE,this.deltas.dxRight=o.TILE_SIZE-this.deltas.dxLeft}updateMapPosition(){this.row=Math.floor(this.y/o.TILE_SIZE),this.col=Math.floor(this.x/o.TILE_SIZE)}}e.PathNode=r},533:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(35),a=i(239),l=i(811);class h{static cast(t,e,i){if(!(e>=0)){const o=t.deltas.dyTop/Math.tan(-e),s=1/o>0;return o>=0&&s?h.getInterceptPointNE(t,e,i):h.getInterceptPointNW(t,e,i)}{const o=t.deltas.dyBottom/Math.tan(e);if(o>=0)return h.getInterceptPointSE(t,e,i);if(o<0)return h.getInterceptPointSW(t,e,i)}}static drawRay(t,e="#4444FF"){l.context.strokeStyle=e,l.context.lineWidth=.5,l.context.beginPath(),l.context.moveTo(l.default.halfWidth,l.default.halfHeight),l.context.lineTo(l.default.halfWidth+t.x,l.default.halfHeight+t.y),l.context.stroke(),l.context.lineWidth=1}static determineIfThereAreObstaclesBetweenTwoPoints(t,e){const i=s.angleBetweenPoints(e,t),o=h.cast(t,i,e);return!o||null!==o.hitObject}static determineIfThereAreObstaclesBetweenTwoPathNodes(t,e){const i=+s.angleBetweenPoints(e,t).toFixed(2);if(0===i){const[i,o]=m(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=I(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(i>0&&i<Math.PI/2){const[i,o]=m(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=p(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(i===Math.PI/2){const[i,o]=I(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=p(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(i>Math.PI/2&&i<Math.PI){const[i,o]=E(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=I(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(3.14===Math.abs(i)){const[i,o]=E(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=p(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(i>-Math.PI&&i<-Math.PI/2){const[i,o]=m(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=p(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(-1.57===i){const[i,o]=m(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=E(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}if(i>-Math.PI/2&&i<0){const[i,o]=E(t,e);if(h.determineIfThereAreObstaclesBetweenTwoPoints(i,o))return!0;const[s,a]=I(t,e);return!!h.determineIfThereAreObstaclesBetweenTwoPoints(s,a)}}static getInterceptPointSE(t,e,i){let s,a,n=null,r=null,c=0;for(;a=c*o.TILE_SIZE,s=0===e?0:(t.deltas.dxRight+a)*Math.tan(e),!(a+t.deltas.dxRight>h.rangeHorizontal||s>h.rangeVertical||i&&(a+t.deltas.dxRight>i.x-t.x||s>i.y-t.y));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)+t.deltas.dxRight+a,y:l.default.center.y-(i.y-t.y)+s}:{x:l.default.center.x+t.deltas.dxRight+a,y:l.default.center.y+s},l.context.strokeStyle="#4444FF",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(r=h.checkGameObjectCollisionVerticalSE(c,t,s),r){n={x:a+t.deltas.dxRight,y:s};break}++c}let d,x,f=null,u=null,y=0;for(;x=y*o.TILE_SIZE,!(0===e||(d=(t.deltas.dyBottom+x)/Math.tan(e),x+t.deltas.dyBottom>h.rangeVertical||d>h.rangeHorizontal)||i&&(x+t.deltas.dyBottom>i.y-t.y||Math.round(d)>i.x-t.x));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)+d,y:l.default.center.y-(i.y-t.y)+t.deltas.dyBottom+x}:{x:l.default.center.x+d,y:l.default.center.y+t.deltas.dyBottom+x},l.context.strokeStyle="#44FF44",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(s<x)break;if(u=h.checkGameObjectCollisionHorizontalSE(y,t,d),u){f={x:d,y:x+t.deltas.dyBottom};break}++y}if(n&&null===f)return{hitPoint:n,hitObject:r};if(f&&null===n)return{hitPoint:f,hitObject:u};if(f&&n)return Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2))>Math.sqrt(Math.pow(f.x,2)+Math.pow(f.y,2))?{hitPoint:f,hitObject:u}:{hitPoint:n,hitObject:r};if(null===f&&null===n){const e={x:d,y:x+t.deltas.dyBottom},i={x:a+t.deltas.dxRight,y:s};return Math.sqrt(Math.pow(i.x,2)+Math.pow(i.y,2))>Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))?{hitPoint:e,hitObject:u}:{hitPoint:i,hitObject:r}}}static getInterceptPointNE(t,e,i){let s,a,n=null,r=null,c=0;for(;a=c*o.TILE_SIZE,s=0===e?0:(t.deltas.dxRight+a)*Math.tan(-e),!(a+t.deltas.dxRight>h.rangeHorizontal||s>h.rangeVertical||i&&(a+t.deltas.dxRight>i.x-t.x||s>t.y-i.y));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)+t.deltas.dxRight+a,y:l.default.center.y-(i.y-t.y)-s}:{x:l.default.center.x+t.deltas.dxRight+a,y:l.default.center.y-s},l.context.strokeStyle="#4444FF",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(r=h.checkGameObjectCollisionVerticalNE(c,t,s),r){n={x:a+t.deltas.dxRight,y:-s};break}++c}let d,x,f=null,u=null,y=0;for(;x=y*o.TILE_SIZE,!(0===e||(d=(t.deltas.dyTop+x)/Math.tan(-e),x+t.deltas.dyTop>h.rangeVertical||d>h.rangeHorizontal)||i&&(x+t.deltas.dyTop>t.y-i.y||Math.round(d)>i.x-t.x));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)+d,y:l.default.center.y-(i.y-t.y)-t.deltas.dyTop-x}:{x:l.default.center.x+d,y:l.default.center.y-x-t.deltas.dyTop},l.context.strokeStyle="#44FF44",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(s<x)break;if(u=h.checkGameObjectCollisionHorizontalNE(y,t,d),u){f={x:d,y:-x-t.deltas.dyTop};break}++y}if(n&&null===f)return{hitPoint:n,hitObject:r};if(f&&null===n)return{hitPoint:f,hitObject:u};if(f&&n)return Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2))>Math.sqrt(Math.pow(f.x,2)+Math.pow(f.y,2))?{hitPoint:f,hitObject:u}:{hitPoint:n,hitObject:r};if(null===f&&null===n){const e={x:d,y:-x-t.deltas.dyTop},i={x:a+t.deltas.dxRight,y:-s};return Math.sqrt(Math.pow(i.x,2)+Math.pow(i.y,2))>Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))?{hitPoint:e,hitObject:u}:{hitPoint:i,hitObject:r}}}static getInterceptPointNW(t,e,i){let s,a,n=null,r=null,c=0;for(;a=c*o.TILE_SIZE,s=0===e?0:(t.deltas.dxLeft+a)*Math.tan(Math.PI- -e),!(a+t.deltas.dxLeft>h.rangeHorizontal||s>h.rangeVertical||i&&(a+t.deltas.dxLeft>t.x-i.x||s>t.y-i.y));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)-t.deltas.dxLeft-a,y:l.default.center.y-(i.y-t.y)-s}:{x:l.default.center.x-t.deltas.dxLeft-a,y:l.default.center.y-s},l.context.strokeStyle="#4444FF",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(r=h.checkGameObjectCollisionVerticalNW(c,t,s),r){n={x:-a-t.deltas.dxLeft,y:-s};break}++c}let d,x,f=null,u=null,y=0;for(;x=y*o.TILE_SIZE,!(0===e||(d=(t.deltas.dyTop+x)/Math.tan(Math.PI- -e),x+t.deltas.dyTop>h.rangeVertical||d>h.rangeHorizontal)||i&&(x+t.deltas.dyTop>t.y-i.y||Math.round(d)>t.x-i.x));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)-d,y:l.default.center.y-(i.y-t.y)-t.deltas.dyTop-x}:{x:l.default.center.x-d,y:l.default.center.y-t.deltas.dyTop-x},l.context.strokeStyle="#44FF44",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(s<x)break;if(u=h.checkGameObjectCollisionHorizontalNW(y,t,d),u){f={x:-d,y:-x-t.deltas.dyTop};break}++y}if(n&&null===f)return{hitPoint:n,hitObject:r};if(f&&null===n)return{hitPoint:f,hitObject:u};if(f&&n)return Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2))>Math.sqrt(Math.pow(f.x,2)+Math.pow(f.y,2))?{hitPoint:f,hitObject:u}:{hitPoint:n,hitObject:r};if(null===f&&null===n){const e={x:-d,y:-x-t.deltas.dyTop},i={x:-a-t.deltas.dxLeft,y:-s};return Math.sqrt(Math.pow(i.x,2)+Math.pow(i.y,2))>Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))?{hitPoint:e,hitObject:u}:{hitPoint:i,hitObject:r}}}static getInterceptPointSW(t,e,i){let s,a,n=null,r=null,c=0;for(;a=c*o.TILE_SIZE,s=0===e?0:(t.deltas.dxLeft+a)*Math.tan(Math.PI-e),!(a+t.deltas.dxLeft>h.rangeHorizontal||s>h.rangeVertical||i&&(a+t.deltas.dxLeft>t.x-i.x||s>i.y-t.y));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)-t.deltas.dxLeft-a,y:l.default.center.y-(i.y-t.y)+s}:{x:l.default.center.x-t.deltas.dxLeft-a,y:l.default.center.y+s},l.context.strokeStyle="#4444FF",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(r=h.checkGameObjectCollisionVerticalSW(c,t,s),r){n={x:-a-t.deltas.dxLeft,y:s};break}++c}let d,x,f=null,u=null,y=0;for(;x=y*o.TILE_SIZE,!(0===e||(d=(t.deltas.dyBottom+x)/Math.tan(e),x+t.deltas.dyBottom>h.rangeVertical||-d>h.rangeHorizontal)||i&&(x+t.deltas.dyBottom>i.y-t.y||-d>t.x-i.x));){if(o.DEBUG.RAYCASTER){let e;e=i?{x:l.default.center.x-(i.x-t.x)+d,y:l.default.center.y-(i.y-t.y)+t.deltas.dyBottom+x}:{x:l.default.center.x+d,y:l.default.center.y+t.deltas.dyBottom+x},l.context.strokeStyle="#44FF44",l.context.beginPath(),l.context.arc(e.x,e.y,2,0,2*Math.PI),l.context.stroke()}if(s<x)break;if(u=h.checkGameObjectCollisionHorizontalSW(y,t,d),u){f={x:d,y:x+t.deltas.dyBottom};break}++y}if(n&&null===f)return{hitPoint:n,hitObject:r};if(f&&null===n)return{hitPoint:f,hitObject:u};if(f&&n)return Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2))>Math.sqrt(Math.pow(f.x,2)+Math.pow(f.y,2))?{hitPoint:f,hitObject:u}:{hitPoint:n,hitObject:r};if(null===f&&null===n){const e={x:d,y:x+t.deltas.dyBottom},i={x:-a-t.deltas.dxLeft,y:s};return Math.sqrt(Math.pow(i.x,2)+Math.pow(i.y,2))>Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))?{hitPoint:e,hitObject:u}:{hitPoint:i,hitObject:r}}}static checkGameObjectCollisionVerticalSE(t,e,i){const s=1+e.col+t,h=e.row+Math.floor((e.deltas.dyTop+i)/o.TILE_SIZE),n=e.row+Math.floor((e.deltas.dyTop+i-1)/o.TILE_SIZE);let r=null;return a.gameObjects[h]&&(a.gameObjects[h][s]?r=a.gameObjects[h][s]:a.gameObjects[n][s]&&(r=a.gameObjects[n][s])),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${r?[r.row,r.col]:null}`,10,112+12*t),r}static checkGameObjectCollisionHorizontalSE(t,e,i){const s=e.col+Math.floor((e.deltas.dxLeft+i)/o.TILE_SIZE),h=e.row+t+1;let n=null;return a.gameObjects[h]&&a.gameObjects[h][s]&&(n=a.gameObjects[h][s]),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${n?[n.row,n.col]:null}`,10,212+12*t),n}static checkGameObjectCollisionVerticalNE(t,e,i){const s=1+e.col+t,h=e.row+Math.floor((e.deltas.dyTop-i)/o.TILE_SIZE);let n=null;return a.gameObjects[h]&&a.gameObjects[h][s]&&(n=a.gameObjects[h][s]),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${n?[n.row,n.col]:null}`,10,112+12*t),n}static checkGameObjectCollisionHorizontalNE(t,e,i){const s=e.col+Math.floor((e.deltas.dxLeft+i)/o.TILE_SIZE),h=e.col+Math.floor((e.deltas.dxLeft+i-1)/o.TILE_SIZE),n=e.row-t-1;let r=null;return a.gameObjects[n]&&(a.gameObjects[n][s]?r=a.gameObjects[n][s]:a.gameObjects[n][h]&&(r=a.gameObjects[n][h])),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${n}, hit: ${r?[r.row,r.col]:null}`,10,212+12*t),r}static checkGameObjectCollisionVerticalNW(t,e,i){const s=-1+e.col-t,h=e.row+Math.floor((e.deltas.dyTop-i)/o.TILE_SIZE);let n=null;return a.gameObjects[h]&&a.gameObjects[h][s]&&(n=a.gameObjects[h][s]),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${n?[n.row,n.col]:null}`,10,112+12*t),n}static checkGameObjectCollisionHorizontalNW(t,e,i){const s=e.col-Math.floor((e.deltas.dxRight+i)/o.TILE_SIZE),h=e.row-t-1;let n=null;return a.gameObjects[h]&&a.gameObjects[h][s]&&(n=a.gameObjects[h][s]),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${n?[n.row,n.col]:null}`,10,212+12*t),n}static checkGameObjectCollisionVerticalSW(t,e,i){const s=e.col-t-1,h=e.row+Math.floor((e.deltas.dyTop+i)/o.TILE_SIZE),n=e.row+Math.floor((e.deltas.dyTop+i-1)/o.TILE_SIZE);let r=null;return a.gameObjects[h]&&(a.gameObjects[h][s]?r=a.gameObjects[h][s]:a.gameObjects[n][s]&&(r=a.gameObjects[n][s])),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${r?[r.row,r.col]:null}`,10,112+12*t),r}static checkGameObjectCollisionHorizontalSW(t,e,i){const s=e.col-Math.floor((e.deltas.dxRight-i)/o.TILE_SIZE),h=e.row+t+1;let n=null;return a.gameObjects[h]&&a.gameObjects[h][s]&&(n=a.gameObjects[h][s]),o.DEBUG.RAYCASTER&&l.context.fillText(`col: ${s}, row: ${h}, hit: ${n?[n.row,n.col]:null}`,10,212+12*t),n}}e.default=h,h.outsideOfScreenOffset=2*o.TILE_SIZE,h.rangeHorizontal=l.default.halfWidth+h.outsideOfScreenOffset,h.rangeVertical=l.default.halfHeight+2*h.outsideOfScreenOffset;const n={x:0,y:0,deltas:{dyTop:0,dyBottom:0,dxLeft:0,dxRight:0}},r={...n,deltas:{...n.deltas}},c={...n,deltas:{...n.deltas}},d={...n,deltas:{...n.deltas}},x={...n,deltas:{...n.deltas}},f={...n,deltas:{...n.deltas}},u={...n,deltas:{...n.deltas}},y={...n,deltas:{...n.deltas}},g={...n,deltas:{...n.deltas}};function E(t,e){return r.x=t.x-t.collisionBox.halfWidth,r.y=t.y-t.collisionBox.halfHeight,r.row=Math.floor(r.y/o.TILE_SIZE),r.col=Math.floor(r.x/o.TILE_SIZE),r.deltas.dyTop=r.y%o.TILE_SIZE,r.deltas.dyBottom=o.TILE_SIZE-r.deltas.dyTop,r.deltas.dxLeft=r.x%o.TILE_SIZE,r.deltas.dxRight=o.TILE_SIZE-r.deltas.dxLeft,c.x=e.x-e.collisionBox.halfWidth,c.y=e.y-e.collisionBox.halfHeight,c.row=Math.floor(c.y/o.TILE_SIZE),c.col=Math.floor(c.x/o.TILE_SIZE),c.deltas.dyTop=c.y%o.TILE_SIZE,c.deltas.dyBottom=o.TILE_SIZE-c.deltas.dyTop,c.deltas.dxLeft=c.x%o.TILE_SIZE,c.deltas.dxRight=o.TILE_SIZE-c.deltas.dxLeft,[r,c]}function m(t,e){return d.x=t.x+t.collisionBox.halfWidth,d.y=t.y-t.collisionBox.halfHeight,d.row=Math.floor(d.y/o.TILE_SIZE),d.col=Math.floor(d.x/o.TILE_SIZE),d.deltas.dyTop=d.y%o.TILE_SIZE,d.deltas.dyBottom=o.TILE_SIZE-d.deltas.dyTop,d.deltas.dxLeft=d.x%o.TILE_SIZE,d.deltas.dxRight=o.TILE_SIZE-d.deltas.dxLeft,x.x=e.x+e.collisionBox.halfWidth,x.y=e.y-e.collisionBox.halfHeight,x.row=Math.floor(x.y/o.TILE_SIZE),x.col=Math.floor(x.x/o.TILE_SIZE),x.deltas.dyTop=x.y%o.TILE_SIZE,x.deltas.dyBottom=o.TILE_SIZE-x.deltas.dyTop,x.deltas.dxLeft=x.x%o.TILE_SIZE,x.deltas.dxRight=o.TILE_SIZE-x.deltas.dxLeft,[d,x]}function p(t,e){return f.x=t.x-t.collisionBox.halfWidth,f.y=t.y+t.collisionBox.halfHeight,f.row=Math.floor(f.y/o.TILE_SIZE),f.col=Math.floor(f.x/o.TILE_SIZE),f.deltas.dyTop=f.y%o.TILE_SIZE,f.deltas.dyBottom=o.TILE_SIZE-f.deltas.dyTop,f.deltas.dxLeft=f.x%o.TILE_SIZE,f.deltas.dxRight=o.TILE_SIZE-f.deltas.dxLeft,u.x=e.x-e.collisionBox.halfWidth,u.y=e.y+e.collisionBox.halfHeight,u.row=Math.floor(u.y/o.TILE_SIZE),u.col=Math.floor(u.x/o.TILE_SIZE),u.deltas.dyTop=u.y%o.TILE_SIZE,u.deltas.dyBottom=o.TILE_SIZE-u.deltas.dyTop,u.deltas.dxLeft=u.x%o.TILE_SIZE,u.deltas.dxRight=o.TILE_SIZE-u.deltas.dxLeft,[f,u]}function I(t,e){return y.x=t.x+t.collisionBox.halfWidth,y.y=t.y+t.collisionBox.halfHeight,y.row=Math.floor(y.y/o.TILE_SIZE),y.col=Math.floor(y.x/o.TILE_SIZE),y.deltas.dyTop=y.y%o.TILE_SIZE,y.deltas.dyBottom=o.TILE_SIZE-y.deltas.dyTop,y.deltas.dxLeft=y.x%o.TILE_SIZE,f.deltas.dxRight=o.TILE_SIZE-y.deltas.dxLeft,g.x=e.x+e.collisionBox.halfWidth,g.y=e.y+e.collisionBox.halfHeight,g.row=Math.floor(g.y/o.TILE_SIZE),g.col=Math.floor(g.x/o.TILE_SIZE),g.deltas.dyTop=g.y%o.TILE_SIZE,g.deltas.dyBottom=o.TILE_SIZE-g.deltas.dyTop,g.deltas.dxLeft=g.x%o.TILE_SIZE,u.deltas.dxRight=o.TILE_SIZE-g.deltas.dxLeft,[y,g]}},63:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(549),a=i(400),l=i(811),h=i(829),n=i(15),r=i(897),c=i(201);class d{constructor(){window.onfocus=()=>{h.default.restart()},d.loadedPercentages.set(c.default.Graphics,{weight:.3,loaded:0}),d.loadedPercentages.set(c.default.Audio,{weight:.7,loaded:0}),s.default.load((t=>this.gameAssetLoaded(c.default.Audio,t))),a.default.load((t=>this.gameAssetLoaded(c.default.Graphics,t)))}static togglePause(){d.stateManager.getState()===n.default.PAUSED?d.stateManager.setState(n.default.PLAYING):d.stateManager.setState(n.default.PAUSED)}start(){const t=setInterval((()=>{d.loaded&&(clearInterval(t),d.stateManager.setState(n.default.MAIN_MENU))}),250);this.gameLoop()}gameAssetLoaded(t,e){const i=d.loadedPercentages.get(t);i.loaded=e,d.loadedPercentages.set(t,i),d.loadedPercentage=0;for(const[t,e]of d.loadedPercentages)d.loadedPercentage+=e.loaded*e.weight;1===d.loadedPercentage&&(d.loaded=!0)}gameLoop(){this.update(),this.render(),h.default.calculateFrameRate(),window.requestAnimationFrame((()=>this.gameLoop()))}update(){d.stateManager.update()}render(){l.default.clear(),d.stateManager.render(),o.DEBUG.FPS&&h.default.drawFPS()}}e.default=d,d.loaded=!1,d.loadedPercentage=0,d.loadedPercentages=new Map,d.stateManager=new r.default},745:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(63),a=i(811);e.default=class{enter(){}exit(){}update(){}render(){this.drawLoadingDialog()}drawLoadingDialog(){a.context.beginPath(),a.context.fillStyle="#FFC100",a.context.font="20px Monospace",a.context.fillText(`Loading: ${100*s.default.loadedPercentage}%`,o.CANVAS_WIDTH/2-70,o.CANVAS_HEIGHT/2-10),a.context.stroke()}}},265:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(63),a=i(811),l=i(15);e.default=class{constructor(){this.animationCounter=0,this.animationInterval=100,this.instructionsVisible=!0}enter(){window.addEventListener("keydown",this.handleMenuSelection)}exit(){window.removeEventListener("keydown",this.handleMenuSelection)}update(){this.animationCounter=(this.animationCounter+1)%this.animationInterval,this.animationCounter>=this.animationInterval/2?this.instructionsVisible=!1:this.instructionsVisible=!0}render(){this.drawMainMenu()}drawMainMenu(){a.context.beginPath(),a.context.fillStyle="#FFC100",a.context.font="12px Monospace",a.context.fillText("Retro 2D Top-Down Game Engine",o.CANVAS_WIDTH/2-106,o.CANVAS_HEIGHT/2-34),this.instructionsVisible&&(a.context.font="20px Monospace",a.context.fillText("Press any key to start",o.CANVAS_WIDTH/2-132,o.CANVAS_HEIGHT/2-10)),a.context.stroke()}handleMenuSelection(){s.default.stateManager.setState(l.default.PLAYING)}}},897:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(15);e.default=class{constructor(){this.currentState=o.default.LOADING}getState(){return this.currentState}setState(t){this.currentState.exit(t);const e=this.currentState;return t.enter(e),this.currentState=t,this.currentState}update(){this.currentState.update()}render(){this.currentState.render()}}},839:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(861),s=i(811),a=i(15);e.default=class{enter(){}exit(){}update(){}render(){a.default.PLAYING.render(),this.drawPauseMenu()}drawPauseMenu(){s.context.beginPath(),s.context.fillStyle="#FFC100",s.context.font="20px Monospace",s.context.fillText("Paused",o.CANVAS_WIDTH/2-36,o.CANVAS_HEIGHT/2-54),s.context.font="12px Monospace",s.context.fillText("  p - Resume",o.CANVAS_WIDTH/2-50,o.CANVAS_HEIGHT/2-34),s.context.fillText("ESC - Main Menu",o.CANVAS_WIDTH/2-50,o.CANVAS_HEIGHT/2-18),s.context.stroke()}}},936:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(63),s=i(811),a=i(729),l=i(301),h=i(311),n=i(384),r=i(239),c=i(645),d=i(15);e.default=class{enter(t){t!==d.default.PAUSED&&this.startNewGame()}exit(t){t!==d.default.PAUSED&&(window.onblur=null)}update(){s.default.updateMousePosition(),h.default.update(this.player),this.player.update(),this.map.update()}render(){this.map.draw(),this.player.draw()}startNewGame(){this.grid=new n.default,this.player=new c.default(128,64),this.map=new r.default(this.grid,this.player),window.onblur=()=>{o.default.stateManager.setState(d.default.PAUSED)},a.default.init(this.player),l.default.init(this.player)}}},15:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(745),s=i(265),a=i(936),l=i(839),h={LOADING:new o.default,MAIN_MENU:new s.default,PLAYING:new a.default,PAUSED:new l.default};e.default=h},35:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.updatePointDeltas=e.updatePointRowAndColValues=e.angleBetweenPoints=e.pointToPointDistance=void 0;const o=i(861);e.pointToPointDistance=function(t,e){return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y))},e.angleBetweenPoints=function(t,e){return Math.atan2(t.y-e.y,t.x-e.x)},e.updatePointRowAndColValues=function(t){t.row=Math.floor(t.y/o.TILE_SIZE),t.col=Math.floor(t.x/o.TILE_SIZE)},e.updatePointDeltas=function(t){t.deltas.dyTop=t.y%o.TILE_SIZE,t.deltas.dyBottom=o.TILE_SIZE-t.deltas.dyTop,t.deltas.dxLeft=t.x%o.TILE_SIZE,t.deltas.dxRight=o.TILE_SIZE-t.deltas.dxLeft}},311:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(301);class s{static update(t){const e=navigator.getGamepads();e[0]&&(this.handleMovement(e[0],t),this.handleAiming(e[0]),this.handleButtons(e[0],t))}static handleMovement(t,e){const i=+t.axes[0].toFixed(2);i>0?e.moving.right=!0:i<0?e.moving.left=!0:(e.moving.left=!1,e.moving.right=!1);const o=+t.axes[1].toFixed(2);o>0?e.moving.down=!0:o<0?e.moving.up=!0:(e.moving.up=!1,e.moving.down=!1)}static handleAiming(t){const e=t.axes[2],i=t.axes[3];0!=+e.toFixed(2)&&(o.default.x+=e*this.aimModifier),0!=+i.toFixed(2)&&(o.default.y+=i*this.aimModifier)}static handleButtons(t,e){t.buttons[5].pressed?e.setShooting(!0):e.setShooting(!1)}}e.default=s,s.aimModifier=10},729:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(63),s=i(602);e.default=class{static init(t){document.addEventListener("keydown",(e=>{switch(e.keyCode){case s.KEYBOARD_KEYS.w:t.moving.up=!0;break;case s.KEYBOARD_KEYS.a:t.moving.left=!0;break;case s.KEYBOARD_KEYS.s:t.moving.down=!0;break;case s.KEYBOARD_KEYS.d:t.moving.right=!0;break;case s.KEYBOARD_KEYS.ESC:case s.KEYBOARD_KEYS.p:o.default.togglePause()}})),document.addEventListener("keyup",(e=>{switch(e.keyCode){case s.KEYBOARD_KEYS.w:t.moving.up=!1;break;case s.KEYBOARD_KEYS.a:t.moving.left=!1;break;case s.KEYBOARD_KEYS.s:t.moving.down=!1;break;case s.KEYBOARD_KEYS.d:t.moving.right=!1}}))}}},301:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=i(811);class s{static init(t){this.hijackRightClick(),this.trackMouseOnCanvas(),this.listenForLeftClicks(t)}static hijackRightClick(){window.addEventListener("contextmenu",(t=>{t.preventDefault()}),!1)}static trackMouseOnCanvas(){o.default.getCanvasDomElement().addEventListener("mousemove",(t=>{this.x=t.pageX,this.y=t.pageY}),!1)}static listenForLeftClicks(t){const e=o.default.getCanvasDomElement();e.addEventListener("mousedown",(e=>{t.setShooting(!0)}),!1),e.addEventListener("mouseup",(e=>{t.setShooting(!1)}),!1)}}e.default=s,s.x=window.innerWidth/2+100,s.y=window.innerHeight/2+50},602:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.KEYBOARD_KEYS=void 0,e.KEYBOARD_KEYS={ENTER:13,ESC:27,w:87,a:65,s:83,d:68,p:80}},861:t=>{t.exports=JSON.parse('{"CANVAS_WIDTH":480,"CANVAS_HEIGHT":320,"TILE_SIZE":32,"SCALE":2,"DEBUG":{"FPS":true,"RAYCASTER":false,"RAY_TO_PLAYER":false,"PATHFINDING_NODES":false,"SHORTEST_PATH_TO_PLAYER":false,"PLAYER_COLLISION_BOX":true,"PLAYER_VISION_RAY_SHOTGUN":false,"ENEMY_COLLISION_BOX":true},"FEATURES":{"SCATTER_PROJECTILES":true},"THROW_DEVELOPMENT_ERRORS":true}')},309:t=>{t.exports=JSON.parse('{"gameObjects":[[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,2,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0],[1,0,3,3,3,0,0,3,0,0,2,0,0,0,0,1,1,1,1,1,1,1,0,0],[1,0,0,3,0,0,0,0,3,0,1,0,2,3,0,2,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,3,0,1,0,2,2,0,2,0,0,2,2,0,1,0,0],[1,0,0,0,0,3,3,0,1,1,1,0,0,0,0,1,0,0,2,3,0,1,1,1],[1,0,0,0,3,3,3,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],[1,0,1,0,3,3,0,0,1,0,0,0,0,1,0,1,0,0,0,1,3,0,0,1],[1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,3,2,0,0,1],[1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,2,2,2,1,1,1],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,3,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,3,3,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0]],"enemies":[{"x":286,"y":88,"healthPercentage":1},{"x":368,"y":90,"healthPercentage":0.5},{"x":368,"y":112,"healthPercentage":0.5},{"x":668,"y":240,"healthPercentage":0.8},{"x":568,"y":216,"healthPercentage":0.3},{"x":540,"y":220,"healthPercentage":0.3},{"x":466,"y":120,"healthPercentage":1},{"x":648,"y":230,"healthPercentage":0.8},{"x":568,"y":226,"healthPercentage":0.3},{"x":540,"y":230,"healthPercentage":0.3},{"x":436,"y":98,"healthPercentage":1},{"x":360,"y":128,"healthPercentage":0.5},{"x":648,"y":246,"healthPercentage":0.8},{"x":548,"y":230,"healthPercentage":0.3},{"x":520,"y":230,"healthPercentage":0.3},{"x":320,"y":500,"healthPercentage":0.3},{"x":336,"y":500,"healthPercentage":0.3},{"x":352,"y":500,"healthPercentage":0.3},{"x":320,"y":484,"healthPercentage":0.3},{"x":336,"y":484,"healthPercentage":0.3},{"x":352,"y":484,"healthPercentage":0.3},{"x":420,"y":500,"healthPercentage":0.3},{"x":436,"y":500,"healthPercentage":0.3},{"x":452,"y":500,"healthPercentage":0.3},{"x":420,"y":484,"healthPercentage":0.3},{"x":436,"y":484,"healthPercentage":0.3},{"x":452,"y":484,"healthPercentage":0.3},{"x":422,"y":404,"healthPercentage":0.3},{"x":438,"y":404,"healthPercentage":0.3},{"x":454,"y":404,"healthPercentage":0.3},{"x":422,"y":420,"healthPercentage":0.3},{"x":438,"y":420,"healthPercentage":0.3},{"x":454,"y":420,"healthPercentage":0.3}]}')}},e={};(new(function i(o){var s=e[o];if(void 0!==s)return s.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,i),a.exports}(63).default)).start()})();
//# sourceMappingURL=app.js.map