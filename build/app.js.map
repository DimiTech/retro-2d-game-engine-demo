{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/domain/widgets/DamageNumbers.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/SpriteZerg.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameTime.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/math/MathUtils.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\nimport { Directions, MovingDirections } from '@app/infrastructure/Directions'\n\nimport Map from '@app/domain/map/Map'\nimport CreatureState from '@app/domain/CreatureState'\nimport { Widget } from '@app/domain/widgets/DamageNumbers'\n\nexport default abstract class Creature {\n  private prevHistoryLength = 8\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n\n  public nextX: number\n  public nextY: number\n\n  public row: number\n  public col: number\n\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number         // Derived from this.speed\n  public maxSpeedDiagonal: number // Derived from this.speed\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationSpritePosition: number = 0\n\n  public direction: Directions\n\n  // Used for sprite orientation\n  // TODO: Find a better name\n  public movingDirections: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public moving: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected widgets: { [key: string]: Widget } = {}\n  \n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    private speed: number,\n    healthPercentage: number,\n  ) {\n    this.maxSpeed = this.speed\n    this.maxSpeedDiagonal = Math.sin(45) * this.speed\n\n    this.initializeHealth(healthPercentage)\n    this.updateMapPosition()\n  }\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    this.movingDirections.left  = false\n    this.movingDirections.right = false\n    this.movingDirections.up    = false\n    this.movingDirections.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  // TODO: This is not 100% correct, it's just an estimation based on previous frame's length\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement, false)\n    }\n    if (this.moving.right) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement, false)\n    }\n    if (this.moving.up) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement, false)\n    }\n    if (this.moving.down) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement, false)\n    }\n  }\n\n  protected move(): void {\n\n    if (this.moving.left && !this.blocked.left && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement)\n    }\n    if (this.moving.right && !this.blocked.right && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement)\n    }\n\n    if (this.moving.up && !this.blocked.up && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement)\n    }\n    if (this.moving.down && !this.blocked.down && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement)\n    }\n\n    this.updateMapPosition()\n  }\n\n  // TODO: Maybe find a better solution for this\n  private horizontalMovementControlsAreNotJammed() { // Detect control jamming by pressing `left` & `right` at the same time\n    return (this.moving.left && this.moving.right) === false\n  }\n  private verticalMovementControlsAreNotJammed() { // Detect control jamming by pressing `up` & `down` at the same time\n    return (this.moving.up && this.moving.down) === false\n  }\n\n  private movementAccumulator: { [key in MovingDirections]: number } = {\n    left  : 0.0,\n    right : 0.0,\n    up    : 0.0,\n    down  : 0.0,\n  }\n\n  /**\n   * For this Game Engine we want pixelated movement, meaning that the movement amounts are Integer values\n   *\n   * Slow game speed:\n   *   When the game is slowed down enough that one frame worth of movement is below 1,\n   *   the `movementAmountDecimalPart` is sent to the `movementAccumulator`, and the `movementAccumulator`\n   *   is added to the next movement calculation.\n   *   This means that it can take, for example, 3 frames to move 1 pixel.\n   *\n   * Fast game speed:\n   *   When the game is sped up so that one frame worht of movement is above 1,\n   *   we want to preserve the spillover `movementAmountDecimalPart` and add it to\n   *   the next movement calculation.\n   *\n   * This functions makes that happen - and the result is smooth Player/Creature movement :)\n   *\n   * @param direction  - One of four possible `MovingDirections`\n   * @param isDiagonalMovement - Specifies whether the movement is diagonal or not\n   * @param accumulate - We don't want to accumulate when calling from `calculateNextCoordinates()`\n   * @returns - Integer number of pixels to move\n   */\n  private calculateMovementAmountPixels(direction: MovingDirections, isDiagonalMovement: boolean, accumulate = true): number {\n    const movementAmount = isDiagonalMovement\n      ? (GameTime.elapsedTimeFactor * this.maxSpeedDiagonal) + this.movementAccumulator[direction]\n      : (GameTime.elapsedTimeFactor * this.maxSpeed        ) + this.movementAccumulator[direction]\n    const movementAmountPixels = Math.floor(movementAmount)\n\n    if (accumulate) {\n      const movementAmountDecimalPart = (movementAmount % 1)\n      this.movementAccumulator[direction] = movementAmountDecimalPart\n    }\n\n    return movementAmountPixels\n  }\n\n  protected updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  protected updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n\n    ///////////////////////////////////////////////////////////////////////////\n    // West\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.left) {\n      wall = Map.walls[this.row][this.col - 1] // West\n      if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n        this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        this.movingDirections.left = false\n      }\n\n      const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the Creature's Tile\n        wall = Map.walls[SWVertexRow][this.col - 1] // South West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n\n      const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[NWVertexRow][this.col - 1] // North West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // East\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.right) {\n      wall = Map.walls[this.row][this.col + 1] // East\n      if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n        this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        this.movingDirections.right = false\n      }\n\n      const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the Creature's Tile\n        wall = Map.walls[SEVertexRow][this.col + 1] // South East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n\n      const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[NEVertexRow][this.col + 1] // North East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // North\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.up) {\n      wall = Map.walls[this.row - 1][this.col] // North\n      if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n        this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        this.movingDirections.up = false\n      }\n\n      const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NEVertexCol] // North East\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n\n      const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NWVertexCol] // North West\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // South \n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.down) {\n      wall = Map.walls[this.row + 1][this.col] // South\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        this.movingDirections.down = false\n      }\n    }\n\n    const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n    if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SEVertexCol] // South East\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n\n    const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n    if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SWVertexCol] // South West\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > this.prevHistoryLength) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > this.prevHistoryLength) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    if (this.movingDirections.down && this.blocked.down === false) {\n      direction.push(Directions.S)\n    }\n    else if (this.movingDirections.up && this.blocked.up === false) {\n      direction.push(Directions.N)\n    }\n\n    if (this.movingDirections.right && this.blocked.right === false) {\n      direction.push(Directions.E)\n    }\n    else if (this.movingDirections.left && this.blocked.left === false) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    // Check if all of the recorded prevX & prevY positions are the same\n    const xUnchanged = this.prevX.every((prevX, i) => (i === 0) ? true : (prevX === this.prevX[0]))\n    const yUnchanged = this.prevY.every((prevY, i) => (i === 0) ? true : (prevY === this.prevY[0]))\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n}\n\nexport default CreatureState\n","import { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n\n    LevelTimer.reset()\n  }\n\n  public static nextLevel() {\n    Level.currentLevel++\n\n    LevelTimer.reset()\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n\nimport * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\n\nexport class LevelTimer {\n  public static timeSpentOnCurrentLevel = 0 // ms\n\n  public static incrementTimeSpentOnCurrentLevel() {\n    LevelTimer.timeSpentOnCurrentLevel += GameTime.frameElapsedTime\n  }\n\n  public static reset() {\n    LevelTimer.timeSpentOnCurrentLevel = 0\n  }\n\n  public static debug_displayTimeSpentOnCurrentLevel() {\n    context.beginPath()\n      context.fillStyle = '#9999ff'\n      context.font = '8px Monospace'\n      const levelTimeInSeconds = Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)\n      context.fillText(`Level ${Level.currentLevel} Time: ${levelTimeInSeconds}`, 10, CONFIG.CANVAS_HEIGHT - 24)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  protected target: Point\n\n  // TODO: Extract to CreatureState objects\n  // TODO: Adjust the feeling of enemy attack & animation\n  protected attackSpeed = 0.45 // seconds\n  protected animationAttackLength   = 420 // ms\n  protected animationAttackProgress = 0   // ms\n  protected animationMoveLength   = 330 // ms\n  protected animationMoveProgress = 0   // ms\n\n  constructor(\n    x: number,\n    y: number,\n    speed: number,\n    healthPercentage: number,\n    pathfindingTimerStart: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), speed, healthPercentage)\n\n    this.pathfindingTimer = (9 * pathfindingTimerStart) % this.pathfindingInterval\n  }\n\n  // TODO: See what more can be moved to `Enemy.update()`\n  public update(player: Player): void {\n    if (this.state === CreatureState.Dying) {\n      return\n    }\n    if (this.state === CreatureState.Decaying) {\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n    this.checkForCollisionWithOtherEnemies(player) // Must come before move()\n    this.checkForCollisionWithPlayer(player)       // Must come before move()\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateTileDeltas()\n\n    this.adjustCollisionWithWalls()                // Must come after move()\n\n    this.updateDirection() // Must come after adjustCollisionWithWalls()\n\n    super.update(player)\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.draw()`\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      this.debug_drawCollisionBox(player)\n    }\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n\n    super.draw(player)\n  }\n\n  protected advanceAnimation(): void {\n    // TODO: Extract to CreatureState objects\n    if (this.state === CreatureState.Attacking) {\n      this.animationAttackProgress = (this.animationAttackProgress + GameTime.elapsedTimeFactor) % this.animationAttackLength\n      const animationProgressPercentage = this.animationAttackProgress / this.animationAttackLength\n      this.animationSpritePosition = Math.floor(animationProgressPercentage * this.sprite.numberOfSpritesInAnimation.attacking) % this.sprite.numberOfSpritesInAnimation.attacking\n    } else if (this.state === CreatureState.Moving) {\n      this.animationMoveProgress = (this.animationMoveProgress + GameTime.elapsedTimeFactor) % this.animationMoveLength\n      const animationProgressPercentage = this.animationMoveProgress / this.animationMoveLength\n      this.animationSpritePosition = Math.floor(animationProgressPercentage * this.sprite.numberOfSpritesInAnimation.walking) % this.sprite.numberOfSpritesInAnimation.walking\n    }\n  }\n\n  // TODO: Move to Enemy\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingTimer === 0) {\n        this.pathfindingNodes = generatePathNodes( // TODO: Move to Pathfinding or Player\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingTimer += GameTime.frameElapsedTime // Game speed independent\n      if (this.pathfindingTimer > this.pathfindingInterval) {\n        this.pathfindingTimer = 0\n      }\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n      this.movingDirections.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n      this.movingDirections.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n      this.movingDirections.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n      this.movingDirections.up = true\n    }\n  }\n\n  // TODO: Move to Creature since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n         0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n         0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Map from '@app/domain//map/Map'\nimport DamageNumbers, { DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingTimer: number = 0\n  protected pathfindingInterval: number = 500 // ms\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  // TODO: Move this to Weapon\n  protected readonly attackSpeed: number // seconds\n  protected attackCooldown: number       // ms\n\n  protected animationAttackLength   : number // ms\n  protected animationAttackProgress : number // ms\n  protected animationMoveLength     : number // ms\n  protected animationMoveProgress   : number // ms\n\n  constructor(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, collisionBox, speed, healthPercentage)\n\n    // TODO: Move this function to Weapon\n    this.resetAttackCooldown()\n\n    // Widgets\n    this.widgets.damageNumbers = new DamageNumbers()\n  }\n\n  public draw(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.render(player.x, player.y)) // Render widgets\n  }\n\n  public update(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG() // TODO: Change the SFX\n      this.dealDamage(p)\n    } else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n\n    this.health -= damageAmount\n\n    this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount))\n\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Decaying)\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimation()\n  }\n\n  // Move to Animation objects\n  protected resetAnimation() {\n    this.animationSpritePosition = 0\n    this.animationAttackProgress = 0\n    this.animationMoveProgress = 0\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      e.update(this.player)\n      if (e.state === CreatureState.Decaying) {\n        Map.enemies.splice(i, 1) // Remove the enemy\n        this.openPortalWhenAllEnemiesAreKilled()\n      }\n    })\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (Map.exitPortal.isOpen === false && Map.enemies.length === 0) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, 0.125, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = '50, 120, 50'\n  protected static closedColor = '180, 50, 50'\n  protected static opacityBaseline = 0.05\n  protected static opacityRange    = 0.2\n\n  private opacity = Portal.opacityRange\n\n  // Adjust for animation feel\n  private animationElapsed              = 0    // Milliseconds\n  private animationLength               = 4000 // Milliseconds\n  private animationCompletionPercentage = 0.0  // 0.0 - 1.0\n\n  draw(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public advanceAnimation() {\n    this.animationElapsed = (this.animationElapsed + GameTime.elapsedTimeFactor) % this.animationLength\n\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n\n    const sineFunction = Math.sin(this.animationCompletionPercentage * (Math.PI * 2)) // returns: -1 to 1 (approximately, because of float arithmetic)\n\n    this.opacity = Portal.opacityBaseline + ((sineFunction + 1) / 2) * Portal.opacityRange\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return `rgba(${Portal.openColor}, ${this.opacity})`\n    }\n    else {\n      return `rgba(${Portal.closedColor}, ${this.opacity})`\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport DamageNumbers, { DamageNumberColors, DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n\n  // TODO: Adjust for attack feeling\n  private attackSpeed = 0.1 // seconds\n  private attackCooldown = 0\n  private maxAttackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super(x, y, new CollisionBox(12, 12), 0.18, 1)\n\n    // Widgets\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_ON_PLAYER) {\n      this.widgets.damageNumbers = new DamageNumbers() // TODO: Move to Creature?\n    }\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls() // Must come after move()\n    this.updateTileDeltas()         // Must come after adjustCollisionWithWalls()\n    this.updateMapPosition()        // Must come after adjustCollisionWithWalls()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        this.movingDirections.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        this.movingDirections.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        this.movingDirections.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        this.movingDirections.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public shoot(): void {\n    if (this.attackCooldown >= 0) {\n      this.attackCooldown -= GameTime.frameElapsedTime\n      if (this.attackCooldown < 0) {\n        this.attackCooldown = 0\n      }\n    }\n\n    if (this.shooting === false) {\n      return\n    }\n\n    if (this.attackCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG()\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = this.maxAttackCooldown\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n\n    if (this.widgets.damageNumbers) {\n      this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount, DamageNumberColors.gray))\n    }\n\n    if (this.health <= 0) {\n      this.die()\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n\n    Object.values(this.widgets).forEach(widget => widget.render(this.x, this.y)) // Render widgets\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n       0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n       0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Map from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from \"@app/infrastructure/game/Game\"\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport GAME_STATES from \"@app/infrastructure/game/game_states/GameStates\"\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport interface IWidget {\n  update(): void\n  render(playerX: number, playerY: number): void\n}\n\nexport enum DamageNumberColors {\n  red    = '220, 50, 50',\n  yellow = '180, 180, 50',\n  gray   = '180, 180, 180',\n}\n\nexport class DamageNumberFactory {\n  public static create(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    damage: number,\n    color: DamageNumberColors = DamageNumberColors.red\n  ): DamageNumber {\n    return new DamageNumber(\n      x,\n      y - collisionBox.halfHeight * 0.9,\n      (Math.random() * collisionBox.height)       - collisionBox.halfHeight,\n      (Math.random() * collisionBox.width  / 1.5) - collisionBox.halfWidth / 1.5,\n      damage.toString(),\n      color\n    )\n  }\n}\n\nexport class DamageNumber {\n  constructor(\n    public x: number,\n    public y: number,\n    protected randomFactorX: number,\n    protected randomFactorY: number,\n    private damage: string,\n    private color: string\n  ) {\n    this.damageTextHalfWidth = (this.damage.length * this.fontWidth) / 2\n  }\n\n  public animationFinished = false\n\n  // Adjust for animation feel\n  private animationElapsed              = 0   // Milliseconds\n  private animationLength               = 800 // Milliseconds\n  private animationCompletionPercentage = 0.0 // 0.0 - 1.0\n  private maxHeight                     = 30  // px\n\n  public advanceAnimation() {\n    this.animationElapsed += GameTime.elapsedTimeFactor\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n    if (this.animationHasFinished()) {\n      this.animationFinished = true\n    }\n  }\n  public animationHasFinished() {\n    return (this.animationElapsed >= this.animationLength)\n  }\n\n  private fontSize = 8\n  private font = `${this.fontSize}px Monospace`\n  private fontWidth = this.fontSize / 2\n  private damageTextHalfWidth: number = 0\n\n  public draw(playerX: number, playerY: number) {\n    context.beginPath()\n      const opacity = 1 - this.animationCompletionPercentage\n      context.fillStyle = `rgba(${this.color}, ${opacity})`\n      context.font = this.font\n      context.fillText(\n        `${this.damage}`,\n        this.randomFactorX + (this.x + Canvas.center.x - playerX) - this.damageTextHalfWidth,\n        this.randomFactorY + (this.y + Canvas.center.y - playerY) - (this.animationCompletionPercentage * this.maxHeight),\n      )\n    context.stroke()\n  }\n}\n\nexport default class DamageNumbers implements IWidget {\n\n  private damageNumbers: DamageNumber[] = []\n\n  public update(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.damageNumbers.forEach((dmgNum, i) => {\n        dmgNum.advanceAnimation()\n\n        if (dmgNum.animationFinished === true) {\n          this.damageNumbers.splice(i, 1) // Remove the DamageNumber\n        }\n      })\n    }\n  }\n\n  public render(playerX: number, playerY: number): void {\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_SHOW) {\n      this.feature_drawDamageNumbers(playerX, playerY)\n    }\n  }\n\n  public push(damageNumber: DamageNumber): void {\n    this.damageNumbers.push(damageNumber)\n  }\n\n\n  public feature_drawDamageNumbers(playerX: number, playerY: number) {\n    this.damageNumbers.forEach(dmgNumber => dmgNumber.draw(playerX, playerY))\n  }\n}\n\nexport type Widget = IWidget & DamageNumbers","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract numberOfSpritesInAnimation: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public numberOfSpritesInAnimation = {\n    walking: 7,\n    attacking: 5,\n  }\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n  private spriteSize = 32\n  private spriteStep: Point\n\n  constructor() {\n    super()\n    this.spriteStep = { x: this.spriteSize + 11, y: this.spriteSize + 10 }\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n    const spriteOffsets: Point = this.getSpriteOffsets(enemy.state, this.spriteStep)\n\n    const spriteLocation = this.spriteLocations[enemy.direction]\n\n    this.drawSprite(enemy, playerCoordinates, spriteOffsets, spriteLocation)\n  }\n\n  private getSpriteOffsets(enemyState: CreatureState, SPRITE_STEP: Point) {\n    switch (enemyState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return {\n          x: 7,\n          y: 5\n        }\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: 7,\n          y: 5 + (ATTACK_SPRITES_ROW * SPRITE_STEP.y)\n        }\n    }\n  }\n\n  private drawSprite(\n    enemy: Enemy,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteLocation: { col: number, flip: boolean },\n  ) {\n\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + this.spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + this.spriteStep.y * Math.floor(enemy.animationSpritePosition),\n      this.spriteSize,\n      this.spriteSize,\n      spriteLocation.flip ? 0 - this.spriteSize / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                       : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      enemy.collisionBox.width  + 2, // Draw width\n      enemy.collisionBox.height + 2, // Draw height\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\ncontext.imageSmoothingEnabled = false // Disables anti-aliasing on Chrome\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n\nexport enum MovingDirections {\n  up    = 'up',\n  right = 'right',\n  down  = 'down',\n  left  = 'left',\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(lastFrameTime: number, frameElapsedTime: number): void {\n    if (!lastFrameTime) {\n      FPS = 0\n    } else {\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n    }\n  }\n\n  public static debug_drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class GameTime {\n  public static readonly ONE_SECOND = 1000\n\n  public static previousTimestamp = 0 // Milliseconds\n  public static frameElapsedTime  = 0 // Milliseconds\n\n  // Determines the game & animation speed\n  public static elapsedTimeFactor: number\n\n  public static setFrameElapsedTime(t: number) {\n    GameTime.frameElapsedTime  = t\n    GameTime.elapsedTimeFactor = CONFIG.GAME_SPEED * GameTime.frameElapsedTime\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\nimport { Pi2Decimals } from './math/MathUtils'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Pi2Decimals / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Pi2Decimals / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Pi2Decimals / 2 && angleBetweenNodes < Pi2Decimals) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === Pi2Decimals) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals && angleBetweenNodes < -Pi2Decimals / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -Pi2Decimals / 2) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\nimport GameTime from '../GameTime'\nimport FrameRate from '../FrameRate'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop(0)\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(timestamp: number): void {\n\n    if (GameTime.previousTimestamp === undefined) {\n      GameTime.previousTimestamp = timestamp\n    }\n    GameTime.setFrameElapsedTime(timestamp - GameTime.previousTimestamp)\n  \n    this.update()\n    this.render()\n    FrameRate.calculateFrameRate(GameTime.previousTimestamp, GameTime.frameElapsedTime)\n  \n    GameTime.previousTimestamp = timestamp\n    window.requestAnimationFrame((ts) => this.gameLoop(ts))\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.debug_drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      // Title\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n      \n      // Level Time\n      context.font = '16px Monospace'\n      context.fillStyle = '#9999ff'\n      context.fillText(\n        `Time: ${Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)} seconds`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2) + 30\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationProgress: number = 0\n  private animationLength: number = GameTime.ONE_SECOND\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationProgress = (this.animationProgress + GameTime.frameElapsedTime) % this.animationLength\n    if (this.animationProgress >= this.animationLength / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n\n      LevelTimer.incrementTimeSpentOnCurrentLevel()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n    if (CONFIG.DEBUG.SHOW_LEVEL_TIME) {\n      LevelTimer.debug_displayTimeSpentOnCurrentLevel()\n    }\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","export const Pi2Decimals = +Math.PI.toFixed(2)\n\nexport function random(min: number, max: number) {\n  return min + Math.floor(Math.random() * (max - min + 1))\n}","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n      player.movingDirections.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n      player.movingDirections.left = true\n    }\n    else {\n      player.moving.left = false\n      player.movingDirections.left = false\n\n      player.moving.right = false\n      player.movingDirections.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n      player.movingDirections.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n      player.movingDirections.up = true\n    }\n    else {\n      player.moving.up = false\n      player.movingDirections.up = false\n\n      player.moving.down = false\n      player.movingDirections.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","SMG_INDEX","gainNode","createGain","gain","value","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","constructor","x","y","collisionBox","speed","healthPercentage","prevHistoryLength","prevX","prevY","maxHealth","state","Idling","previousState","animationSpritePosition","movingDirections","left","right","up","down","moving","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","widgets","movementAccumulator","maxSpeed","maxSpeedDiagonal","Math","sin","initializeHealth","updateMapPosition","resetMoving","resetBlocked","calculateNextCoordinates","nextX","nextY","isDiagonalMovement","calculateMovementAmountPixels","MovingDirections","move","horizontalMovementControlsAreNotJammed","verticalMovementControlsAreNotJammed","direction","accumulate","movementAmount","elapsedTimeFactor","movementAmountPixels","floor","movementAmountDecimalPart","row","CONFIG","TILE_SIZE","col","updateTileDeltas","checkIfBlockedByCreature","c","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","mapX","width","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","every","i","yUnchanged","health","getHealthColor","CreatureState","Level","currentLevel","startingLevel","LevelTimer","reset","lastLevel","totalNumberOfMaps","timeSpentOnCurrentLevel","frameElapsedTime","beginPath","fillStyle","font","levelTimeInSeconds","round","fillText","CANVAS_HEIGHT","stroke","ConcreteEnemy","pathfindingTimerStart","super","sprite","Zerg","attackSpeed","animationAttackLength","animationAttackProgress","animationMoveLength","animationMoveProgress","pathfindingTimer","pathfindingInterval","update","player","Dying","Decaying","target","stuck","checkIfStuck","Attacking","setState","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","Moving","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","checkForCollisionWithOtherEnemies","checkForCollisionWithPlayer","stateManager","getState","PLAYING","advanceAnimation","draw","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","ENEMY_STATE","debug_drawState","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","animationProgressPercentage","numberOfSpritesInAnimation","attacking","walking","generatePathNodes","abs","findShortestPath","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","moveTo","center","lineTo","toString","p","forEach","n","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Enemy","damageNumbers","Object","values","widget","render","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","yIsStatic","attackCooldown","playSMG","dealDamage","GAME_SPEED","takeDamage","damageAmount","playEnemyHit","DamageNumberFactory","create","die","playEnemyDeath","getDamage","newState","resetAnimation","Map","mapData","loadMap","enemies","filter","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","opacity","opacityRange","animationElapsed","animationLength","animationCompletionPercentage","getColor","rect","fill","sineFunction","PI","opacityBaseline","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","maxAttackCooldown","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","a","s","d","keyupHandler","FEATURES","DAMAGE_NUMBERS_ON_PLAYER","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","setShooting","isShooting","dx","dy","xVel","yVel","SCATTER_PROJECTILES","randomFactorX","random","randomFactorY","DamageNumberColors","gray","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","directionX","directionY","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","intermediateIntervalX","intermediateIntervalY","point","red","DamageNumber","animationFinished","maxHeight","fontSize","fontWidth","damageTextHalfWidth","animationHasFinished","dmgNum","DAMAGE_NUMBERS_SHOW","feature_drawDamageNumbers","damageNumber","dmgNumber","Sprites","callback","_reject","spriteSheet","Image","src","url","SpriteZerg","spriteLocations","flip","NE","SE","SW","NW","spriteSize","spriteStep","enemy","playerCoordinates","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","enemyState","SPRITE_STEP","cBox","px","py","save","translate","scale","drawImage","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","FPS_ARR","FPS","lastFrameTime","unshift","reduce","sum","current","GameAssets","GameTime","t","ONE_SECOND","previousTimestamp","startRow","startCol","path","rowEnd","colEnd","PathNode","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","Pi2Decimals","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","timestamp","undefined","setFrameElapsedTime","calculateFrameRate","requestAnimationFrame","ts","clear","debug_drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","animationProgress","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","incrementTimeSpentOnCurrentLevel","GAME_OVER","SHOW_LEVEL_TIME","debug_displayTimeSpentOnCurrentLevel","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","min","max","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}