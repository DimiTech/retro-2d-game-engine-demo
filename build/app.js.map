{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/infrastructure/game/Game.ts","webpack:///./src/app/infrastructure/game/game_states/GameStates.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/graphics/Sprites.ts","webpack:///./src/app/domain/Creature.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/graphics/GraphicsLoader.ts","webpack:///./src/app/graphics/sprites/SpriteZerg.ts","webpack:///./src/app/graphics/sprites/CreatureSprite.ts","webpack:///./src/app/infrastructure/FrameRate.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/peripherals/Gamepads.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/ConcreteEnemy.ts","webpack:///./src/app/infrastructure/Pathfinding.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/infrastructure/Directions.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack:///./src/app/infrastructure/GameAssets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","halfWidth","halfHeight","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","AudioLoader_1","GraphicsLoader_1","Canvas_1","FrameRate_1","GameStates_1","GameStateManager_1","GameAssets_1","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","load","percentage","gameAssetLoaded","stateManager","getState","PAUSED","setState","PLAYING","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","loadedPercentage","_key","update","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","Map","GameStateLoading_1","GameStateMainMenu_1","GameStatePlaying_1","GameStatePaused_1","GAME_STATES","LOADING","ConcreteEnemy_1","GameObjectFactory_1","Map01","getEnemiesOnScreen","playerX","playerY","enemies","filter","e","isOnScreen","gameObjects","grid","player","loadMap","forEach","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","length","createGameObject","push","healthPercentage","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","Promise","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","pointToPointDistance","p1","p2","sqrt","angleBetweenPoints","atan2","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","THROW_DEVELOPMENT_ERRORS","Error","Point_1","Map_1","Raycaster","theta","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","dyBottom","getInterceptPointSE","getInterceptPointSW","hitPoint","color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","angleBetweenTwoGivenPoints","results","cast","hitObject","n1","n2","angleBetweenNodes","toFixed","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","PI","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","abs","yIntercept","tileStepX","hitPointVertical","objectHitVertical","dxRight","rangeHorizontal","rangeVertical","RAYCASTER","DEBUG","coordinates","arc","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","round","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","gameObjectHit","fillText","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","collisionBox","AudioContext","SpriteZerg_1","Sprites","Zerg","Directions_1","prevX","prevY","animationInterval","isMoving","moving","left","right","up","down","mapX","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","shift","direction","dx","dy","Directions","S","N","E","W","directionString","join","xUnchanged","yUnchanged","MapKeys","isBox","mapKey","startsWith","SoundFX_1","loadCallback","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","Sprites_1","CreatureSprite_1","url","animationPeriods","walking","enemy","playerCoordinates","spriteLocation","flip","NE","SE","SW","NW","SPRITE_OFFSETS","SPRITE_SIZE","cBox","px","py","save","translate","scale","drawImage","spriteSheet","restore","callback","_reject","Image","src","lastFrameTime","frameDeltaTime","FPS_ARR","FPS","now","performance","unshift","pop","reduce","sum","current","fillStyle","font","Game_1","drawLoadingDialog","animationCounter","instructionsVisible","handleMenuSelection","removeEventListener","drawMainMenu","Keyboard_1","Gamepads_1","Grid_1","Player_1","previousState","startNewGame","nextState","onblur","updateMousePosition","init","KeyCodes_1","keyCode","KEYBOARD_KEYS","w","a","ESC","togglePause","ENTER","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","CollisionBox_1","Raycaster_1","Pathfinding_1","Enemy_1","pathfindingInterval","super","sprite","updateMapPosition","updatePreviousCoordinates","stuck","checkIfStuck","checkIfMoving","adjustCollisionWithGameObjects","adjustCollisionWithOtherEnemies","distanceFromPlayer","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","move","updateDirection","updateTileDeltas","advanceAnimation","drawCollisionBox","damageAmount","playEnemyHit","health","die","playEnemyDeath","pathfindingNodes","generatePathNodes","shortestPath","findShortestPath","pathfindingPeriod","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","moveTowards","maxSpeedDiagonal","maxSpeed","getHealthColor","drawNode","node","startRow","startCol","path","rowEnd","colEnd","PathNode","drawPathNodes","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","b","visited","neighbourNodes","possiblyLowerLocalGoal","parent","Infinity","Creature_1","maxHealth","initializeHealth","sin","offScreenOffset","playerCollisionBox","enemyX","enemyY","enemyCollisionBox","collidesWithEnemy","intersectionX","intersectionY","xIsStatic","every","yIsStatic","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","GameObject_1","playCrateHit","destructable","Crosshair_1","Projectile_1","rotation","sightLineLength","shooting","shootingCooldown","projectiles","shoot","xVel","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","checkForCollisionWithEnemies","cos","drawRay","collidesWithPlayer","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","drawPauseMenu","currentState","exit","enter","GameAssets"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  public static togglePause(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PAUSED) {\n      Game.stateManager.setState(GAME_STATES.PLAYING)\n    } else {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n  }\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop()\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(): void {\n    this.update()\n    this.render()\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    FrameRate.drawFPS() // TODO: Remove this, used just for debugging\n  }\n}\n","import GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStatePaused from './GameStatePaused'\n\n// TODO: Add a IGameState type definition\nconst GAME_STATES = {\n  LOADING   : new GameStateLoading(),\n  MAIN_MENU : new GameStateMainMenu(),\n  PLAYING   : new GameStatePlaying(),\n  PAUSED    : new GameStatePaused(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport function getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n  return enemies.filter(e => e.isOnScreen(playerX, playerY))\n}\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update(this.player, enemies)\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach((e, i) => {\n      enemies.push(new ConcreteEnemy(e.x, e.y, e.healthPercentage, i))\n    })\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","export default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.hitObject !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Math.PI / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Math.PI / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Math.PI / 2 && angleBetweenNodes < Math.PI) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === 3.14) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI && angleBetweenNodes < -Math.PI / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -1.57) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile_aboveByOnePixel][xTile]) {\n        gameObjectHit = gameObjects[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile][xTile_leftByOnePixel]) {\n        gameObjectHit = gameObjects[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Point, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile]) {\n      if (gameObjects[yTile][xTile]) {\n        gameObjectHit = gameObjects[yTile][xTile]\n      }\n      else if (gameObjects[yTile_aboveByOnePixel][xTile]) {\n        gameObjectHit = gameObjects[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Point, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects } from '@app/domain/map/Map'\nimport { Directions } from '@app/infrastructure/Directions'\n\nexport default abstract class Creature {\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n\n  public animationInterval: number = 0\n\n  public direction: Directions\n  public isMoving: boolean = false\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  protected collisionBox: CollisionBox\n\n  protected adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > 5) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > 5) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    const dx = this.x - this.prevX[this.prevX.length - 1]\n    const dy = this.y - this.prevY[this.prevY.length - 1]\n\n    if (dy > 0) {\n      direction.push(Directions.S)\n    }\n    else if (dy < 0) {\n      direction.push(Directions.N)\n    }\n\n    if (dx > 0) {\n      direction.push(Directions.E)\n    }\n    else if (dx < 0) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    const xUnchanged = this.prevX[this.prevX.length - 1] === this.prevX[this.prevX.length - 2]\n    const yUnchanged = this.prevY[this.prevY.length - 1] === this.prevY[this.prevY.length - 2]\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public animationPeriods = {\n    walking: 8,\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n\n    const SPRITE_LOCATIONS: { [key: string]: { col: number, flip: boolean } } = {\n      N : { col: 0, flip: false },\n      NE: { col: 2, flip: false },\n      E : { col: 4, flip: false },\n      SE: { col: 6, flip: false },\n      S : { col: 8, flip: false },\n      SW: { col: 6, flip: true  },\n      W : { col: 4, flip: true  },\n      NW: { col: 2, flip: true  },\n    }\n\n    const spriteLocation = SPRITE_LOCATIONS[enemy.direction]\n\n    const SPRITE_SIZE = 32\n    const SPRITE_OFFSETS = {\n      INITIAL: { x: 7, y: 5 },\n      STEP: { x: SPRITE_SIZE + 11, y: SPRITE_SIZE + 10 }\n    }\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (enemy.isMoving === false) {\n      enemy.animationInterval = 0\n    }\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      SPRITE_OFFSETS.INITIAL.x + SPRITE_OFFSETS.STEP.x * spriteLocation.col,\n      SPRITE_OFFSETS.INITIAL.y + SPRITE_OFFSETS.STEP.y * Math.floor(enemy.animationInterval / 2),\n      SPRITE_SIZE,\n      SPRITE_SIZE,\n      spriteLocation.flip ? 0 - SPRITE_SIZE / 2 : Canvas.center.x + (x - px - cBox.halfWidth),\n      spriteLocation.flip ? 0                   : Canvas.center.y + (y - py - cBox.halfHeight),\n      enemy.collisionBox.width + 2,\n      enemy.collisionBox.height + 2,\n    )\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract animationPeriods: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameDeltaTime: number\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameDeltaTime = (now - lastFrameTime) / 1000\n\n      FPS_ARR.unshift(1 / (frameDeltaTime))\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationInterval: number = 100\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationInterval\n    if (this.animationCounter >= this.animationInterval / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press any key to start', CONFIG.CANVAS_WIDTH / 2 - 132, CONFIG.CANVAS_HEIGHT / 2 - 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection(): void {\n    Game.stateManager.setState(GAME_STATES.PLAYING)\n  }\n}\n","import IGameState from './IGameState'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePlaying implements IGameState {\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n  }\n\n  public exit(nextState: IGameState): void {\n    if (nextState !== GAME_STATES.PAUSED) {\n      window.onblur = null\n    }\n  }\n\n  public update(): void {\n    Canvas.updateMousePosition()\n    Gamepads.update(this.player)\n    this.player.update()\n    this.map.update()\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n\n  private startNewGame(): void {\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n  }\n}\n","import Game from '@app/infrastructure/game/Game'\nimport FrameRate from '@app/infrastructure/FrameRate'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    document.addEventListener('keydown', e => {\n      // TODO: Move Player logic to Player class\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.ESC:\n        case KEYBOARD_KEYS.p:\n          Game.togglePause()\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\n// TODO: This class is useless?\nexport default class Grid {\n  public rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  public cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n\nexport interface NeighbourTiles {\n    N  : (any | null)\n    NE : (any | null)\n    E  : (any | null)\n    SE : (any | null)\n    S  : (any | null)\n    SW : (any | null)\n    W  : (any | null)\n    NW : (any | null)\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, drawPathNodes, findShortestPath, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number,\n    protected pathfindingInterval: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player, enemies: Enemy[]): void {\n    this.updatePreviousCoordinates()\n\n    this.stuck    = this.checkIfStuck()\n    this.isMoving = this.checkIfMoving()\n\n    this.adjustCollisionWithGameObjects()\n    this.adjustCollisionWithOtherEnemies(enemies)\n    this.distanceFromPlayer = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   }\n    )\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n    this.findPathToPlayer(player)\n\n    this.move()\n    this.updateDirection()\n    this.updateTileDeltas()\n\n    if (Game.stateManager.getState() !== GAME_STATES.PAUSED) {\n      this.advanceAnimation()\n    }\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n    // this.drawRayToPlayer(player) // TODO: Just for debugging\n    // drawPathNodes(this.pathfindingNodes, player, this.getHealthColor()) // TODO: Just for debugging\n\n    // TODO: Just for debugging\n    // this.shortestPath\n    //   .forEach((n, i) => {\n    //     drawNode(n, player, n.visited ? '#FF0000' : '#FF00FF')\n    //   })\n    // if (this.shortestPath.length > 0) {\n    //   this.drawRayToPoint(this.shortestPath[this.shortestPath.length - 1], player)\n    // }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  protected advanceAnimation(): void {\n    this.animationInterval = (this.animationInterval + 0.5) % this.sprite.animationPeriods.walking\n  }\n\n  private findPathToPlayer(player: Player): void {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingInterval === 0) {\n        this.pathfindingNodes = generatePathNodes(\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingInterval = (this.pathfindingInterval + 1) % this.pathfindingPeriod\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else {\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Player): void {\n    if (this.distanceFromPlayer > this.collisionBox.width - 4) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.moving.left  = false\n      this.moving.right = false\n      this.moving.up    = false\n      this.moving.down  = false\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  // TODO: Just for debugging\n  private drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  // TODO: Just for debugging\n  private drawRayToPoint(p: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x + (p.x - player.x), Canvas.center.y + (p.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { NeighbourTiles } from '@app/domain/Grid'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from './Raycaster'\n\nimport { gameObjects } from '@app/domain/map/Map'\nimport GameObject from '@app/domain/objects/GameObject'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nconst PATH_NODE_OFFSET = 2\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!gameObjects[row] || !gameObjects[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\n\nexport function drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !gameObjects[node.row    ] || gameObjects[node.row    ][node.col + 1] === null ||\n              !gameObjects[node.row + 1] || gameObjects[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !gameObjects[node.row    ] || gameObjects[node.row    ][node.col - 1] === null ||\n              !gameObjects[node.row + 1] || gameObjects[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !gameObjects[node.row    ] || gameObjects[node.row    ][node.col - 1] === null ||\n              !gameObjects[node.row - 1] || gameObjects[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !gameObjects[node.row    ] || gameObjects[node.row    ][node.col + 1] === null ||\n              !gameObjects[node.row - 1] || gameObjects[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Creature from '@app/domain/Creature'\nimport Player from '@app/domain/player/Player'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nexport default abstract class Enemy extends Creature {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n\n  protected maxSpeedDiagonal: number\n\n  protected stuck: boolean\n\n  protected distanceFromPlayer: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingInterval: number = 0\n  protected pathfindingPeriod: number = 30\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    protected maxSpeed: number,\n    healthPercentage: number,\n  ) {\n    super()\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed)\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player, enemies: Enemy[]): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < (CONFIG.CANVAS_WIDTH  / 2) + offScreenOffset &&\n      Math.abs(this.y - playerY) < (CONFIG.CANVAS_HEIGHT / 2) + offScreenOffset\n    )\n  }\n\n  public collidesWithPlayer(playerX: number, playerY: number, playerCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < playerX + playerCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > playerX - playerCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < playerY + playerCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > playerY - playerCollisionBox.halfHeight\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n  protected abstract advanceAnimation(): void\n\n  protected collidesWithEnemy(enemyX: number, enemyY: number, enemyCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < enemyX + enemyCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > enemyX - enemyCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < enemyY + enemyCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > enemyY - enemyCollisionBox.halfHeight\n    )\n  }\n\n  protected adjustCollisionWithOtherEnemies(enemies: Enemy[]): void {\n    enemies.forEach(e => {\n      if (this !== e && this.collidesWithEnemy(e.x, e.y, e.collisionBox)) {\n        let intersectionX: number\n        let intersectionY: number\n        if (this.x < e.x) {\n          intersectionX = (this.x + this.collisionBox.halfWidth) - (e.x - e.collisionBox.halfWidth)\n        } else if (this.x > e.x) {\n          intersectionX = (e.x + e.collisionBox.halfWidth) - (this.x - this.collisionBox.halfWidth)\n        }\n        if (this.y < e.y) {\n          intersectionY = (this.y + this.collisionBox.halfHeight) - (e.y - e.collisionBox.halfHeight)\n        } else if (this.y > e.y) {\n          intersectionY = (e.y + e.collisionBox.halfHeight) - (this.y - this.collisionBox.halfHeight)\n        }\n        if (!intersectionX || intersectionX >= intersectionY) {\n          if (this.y < e.y) {\n            e.y += intersectionY\n          } else {\n            e.y -= intersectionY\n          }\n        } else if (!intersectionY || intersectionX < intersectionY) {\n          if (this.x < e.x) {\n            e.x += intersectionX\n          } else {\n            e.x -= intersectionX\n          }\n        }\n      }\n    })\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every(x => x === this.prevX[0])\n    const yIsStatic = this.prevY.every(y => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  private initializeHealth(healthPercentage: number): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n}\n","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport { getEnemiesOnScreen } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\nimport Game from '@app/infrastructure/game/Game'\nimport GameStateManager from '@app/infrastructure/game/game_states/GameStateManager'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  public collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed: number = 2\n  private maxSpeedDiagonal: number = Math.round(Math.sin(45) * this.maxSpeed)\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    super()\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.adjustCollisionWithGameObjects()\n    this.checkForCollisionWithEnemies()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = '10px Monospace'\n\n      context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  private checkForCollisionWithEnemies(): void {\n    if (getEnemiesOnScreen(this.x, this.y)\n      .filter(e => e.collidesWithPlayer(this.x, this.y, this.collisionBox))\n      .length > 0) {\n        this.die()\n      }\n  }\n\n  private die(): void {\n    this.alive = false\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport { context } from '@app/infrastructure/Canvas'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets"],"sourceRoot":""}