{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/infrastructure/game/Game.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/infrastructure/game/game_states/GameState.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/infrastructure/FrameRate.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/peripherals/Gamepads.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/ConcreteEnemy.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack:///./src/app/infrastructure/GameAssets.ts","webpack:///./src/app/infrastructure/game/game_states/GameStateLoading.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","ConcreteEnemy_1","Canvas_1","GameObjectFactory_1","Map01","getEnemiesOnScreen","playerX","playerY","enemies","filter","e","isOnScreen","gameObjects","grid","player","loadMap","forEach","update","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","length","createGameObject","push","healthPercentage","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","SMG","load","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","AudioLoader_1","FrameRate_1","GameState_1","GameAssets_1","Game","window","onfocus","restart","gameAssetLoaded","Audio","state","paused","playing","loadInterval","setInterval","loaded","clearInterval","mainMenu","gameLoop","asset","loadedPercentage","nextFrameRenderingShouldBeSkipped","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","loading","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","GameStateLoading_1","GameStateMainMenu_1","GameStatePlaying_1","GameStatePaused_1","GameState","AudioContext","halfWidth","halfHeight","MapKeys","isBox","mapKey","startsWith","SoundFX_1","loadCallback","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","lastFrameTime","frameDeltaTime","frameOverstepTime","ONE_FRAME_LENGTH_IN_SECONDS","FPS_ARR","FPS","skipNextFrameRendering","now","performance","unshift","pop","reduce","sum","current","beginPath","fillStyle","font","fillText","toFixed","stroke","Game_1","KeyCodes_1","animationCounter","animationInterval","instructionsVisible","handleMenuSelection","drawMainMenu","keyCode","KEYBOARD_KEYS","ENTER","removeEventListener","Keyboard_1","Gamepads_1","Grid_1","Map_1","Player_1","onblur","init","w","moving","up","a","left","down","right","ESC","togglePause","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","CollisionBox_1","Point_1","Enemy_1","super","updateMapPosition","adjustCollisionWithGameObjects","moveTowardsPlayer","move","updateTileDeltas","drawCollisionBox","damageAmount","playEnemyHit","health","die","playEnemyDeath","collisionBox","mapX","SWVertexRow","dxRight","NWVertexRow","dyBottom","SEVertexRow","NEVertexRow","mapY","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","pointToPointDistance","moveTowards","maxSpeedDiagonal","maxSpeed","strokeStyle","getHealthColor","lineWidth","moveTo","lineTo","p1","p2","sqrt","maxHealth","initializeHealth","sin","abs","playerCollisionBox","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","Error","GameObject_1","color","playCrateHit","destructable","Raycaster_1","Crosshair_1","Projectile_1","rotation","sightLineLength","shooting","shootingCooldown","projectiles","shoot","dx","dy","xVel","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","checkForCollisionWithEnemies","atan2","cos","hitPoint","hitObject","cast","drawRay","collidesWithPlayer","Raycaster","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","yIntercept","tileStepX","hitPointVertical","objectHitVertical","RAYCASTER","DEBUG","arc","PI","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","gameObjectHit","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","drawPauseMenu","GameAssets","drawLoadingDialog"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static update() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport ConcreateEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport function getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n  return enemies.filter(e => e.isOnScreen(playerX, playerY))\n}\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update(this.player)\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach(e => enemies.push(new ConcreateEnemy(e.x, e.y, e.healthPercentage)))\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(): Promise<void> {\n    this.SMG[0] = await load('./audio/smg_1.wav')\n    this.SMG[1] = await load('./audio/smg_2.wav')\n    this.SMG[2] = await load('./audio/smg_3.wav')\n    this.SMG[3] = await load('./audio/smg_4.wav')\n    this.SMG[4] = await load('./audio/smg_5.wav')\n\n    this.CRATE_HIT[0] = await load('./audio/crate_hit_1.wav')\n\n    this.ENEMY_HIT[0] = await load('./audio/enemy_hit_1.mp3')\n    this.ENEMY_HIT[1] = await load('./audio/enemy_hit_2.mp3')\n    this.ENEMY_HIT[2] = await load('./audio/enemy_hit_3.mp3')\n    this.ENEMY_HIT[3] = await load('./audio/enemy_hit_4.mp3')\n    this.ENEMY_HIT[4] = await load('./audio/enemy_hit_5.mp3')\n\n    this.ENEMY_DEATH[0] = await load('./audio/enemy_die_1.mp3')\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport IGameState from './game_states/IGameState'\nimport GameState from './game_states/GameState'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0 // 0.0 to 1.0\n\n  public static state: IGameState = GameState.loading\n\n  public static togglePause(): void {\n    if (Game.state === GameState.paused) {\n      Game.state = GameState.playing\n    } else {\n      Game.state = GameState.paused\n    }\n  }\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n    AudioLoader.load(() => this.gameAssetLoaded(GameAssets.Audio))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.state = GameState.mainMenu\n        this.gameLoop()\n      }\n    }, 250)\n  }\n\n  private gameAssetLoaded(asset: GameAssets) {\n    if (asset === GameAssets.Audio) {\n      Game.loadedPercentage += 1.0\n    }\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(): void {\n    this.update()\n\n    if (FrameRate.nextFrameRenderingShouldBeSkipped() === false) {\n      this.render()\n    }\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Canvas.update()\n    Game.state.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.state.render()\n    FrameRate.drawFPS() // TODO: Remove this, used just for debugging\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","import GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStatePaused from './GameStatePaused'\n\nexport default class GameState {\n  public static loading: GameStateLoading   = new GameStateLoading()\n  public static mainMenu: GameStateMainMenu = new GameStateMainMenu()\n  public static playing: GameStatePlaying   = new GameStatePlaying()\n  public static paused: GameStatePaused     = new GameStatePaused()\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","export default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: () => void) {\n    await SoundFX.load()\n    loadCallback()\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameDeltaTime: number\nlet frameOverstepTime: number = 0\n\nconst ONE_FRAME_LENGTH_IN_SECONDS = 0.01667\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\nlet skipNextFrameRendering = false\n\nexport default class FrameRate {\n  public static nextFrameRenderingShouldBeSkipped(): boolean {\n    return skipNextFrameRendering\n  }\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameDeltaTime = (now - lastFrameTime) / 1000\n      if (frameDeltaTime > ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime += frameDeltaTime - ONE_FRAME_LENGTH_IN_SECONDS\n      }\n\n      FPS_ARR.unshift(1 / (frameDeltaTime + frameOverstepTime))\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      if (frameOverstepTime >= ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime = frameOverstepTime - ONE_FRAME_LENGTH_IN_SECONDS\n        skipNextFrameRendering = true\n      } else {\n        skipNextFrameRendering = false\n      }\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport GameState from '@app/infrastructure/game/game_states/GameState'\nimport { context } from '@app/infrastructure/Canvas'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes';\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationInterval: number = 100\n  private instructionsVisible: boolean = true\n\n  constructor() {\n    document.addEventListener('keydown', e => this.handleMenuSelection(e))\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationInterval\n    if (this.animationCounter >= this.animationInterval / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText(`Retro 2D Top-Down Game Engine`, CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press ENTER to start', CONFIG.CANVAS_WIDTH / 2 - 130, CONFIG.CANVAS_HEIGHT / 2 - 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection(e: KeyboardEvent): void {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      Game.state = GameState.playing\n      document.removeEventListener('keydown', e => this.handleMenuSelection(e))\n    }\n  }\n}\n","import IGameState from './IGameState'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameState from '@app/infrastructure/game/game_states/GameState'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\n\nexport default class GameStatePlaying implements IGameState {\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  constructor() {\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n\n    window.onblur = () => {\n      Game.state = GameState.paused\n    }\n\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n  }\n\n  public update(): void {\n    Gamepads.update(this.player)\n    this.player.update()\n    this.map.update()\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n}\n","import Game from '@app/infrastructure/game/Game'\nimport FrameRate from '@app/infrastructure/FrameRate'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    document.addEventListener('keydown', e => {\n      // TODO: Move Player logic to Player class\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.ESC:\n        case KEYBOARD_KEYS.p:\n          Game.togglePause()\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class Grid {\n  rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport { gameObjects } from '@app/domain/map/Map'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default class ConcreateEnemy extends Enemy {\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number\n  ) {\n    super(x, y, new CollisionBox(16, 16), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player): void {\n    this.adjustCollisionWithGameObjects()\n    this.moveTowardsPlayer(player)\n    this.move()\n    this.updateTileDeltas()\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n    }\n  }\n\n  private moveTowardsPlayer(player: Player): void {\n    const distanceFromPlayer = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x, y: this.y }\n    )\n    if (distanceFromPlayer > 1) {\n      this.moveTowards(player.x, player.y)\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n}\n","export default interface Point {\n  x: number\n  y: number\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Player from '@app/domain/player/Player'\n\nexport default abstract class Enemy {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected maxSpeedDiagonal: number\n\n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    protected maxSpeed: number,\n    healthPercentage: number\n  ) {\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeedDiagonal = Math.sin(45) * this.maxSpeed\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    return (\n      Math.abs(this.x - playerX) < (CONFIG.CANVAS_WIDTH  / 2) + CONFIG.TILE_SIZE &&\n      Math.abs(this.y - playerY) < (CONFIG.CANVAS_HEIGHT / 2) + CONFIG.TILE_SIZE\n    )\n  }\n\n  public collidesWithPlayer(playerX: number, playerY: number, playerCollisionBox: CollisionBox): boolean {\n    return (\n      this.x - this.collisionBox.halfWidth  < playerX + playerCollisionBox.halfWidth  &&\n      this.x + this.collisionBox.halfWidth  > playerX - playerCollisionBox.halfWidth  &&\n      this.y - this.collisionBox.halfHeight < playerY + playerCollisionBox.halfHeight &&\n      this.y + this.collisionBox.halfHeight > playerY - playerCollisionBox.halfHeight\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  private initializeHealth(healthPercentage: number): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects, getEnemiesOnScreen } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\nimport Game from '@app/infrastructure/game/Game'\nimport GameState from '@app/infrastructure/game/game_states/GameState'\n\nexport default class Player {\n  public alive: boolean = true\n  public rotation: number = 0\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public sightLineLength = 10\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  private collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed = 3\n  private maxSpeedDiagonal = Math.sin(45) * this.maxSpeed\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.adjustCollisionWithGameObjects()\n    this.checkForCollisionWithEnemies()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = Math.atan2(\n      (Canvas.mousePosition.y - Canvas.center.y),\n      (Canvas.mousePosition.x - Canvas.center.x)\n    )\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = '10px Monospace'\n\n      context.fillText(`p (${this.x.toFixed(2)}, ${this.y.toFixed(2)})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Generalize collision physics\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n    }\n  }\n\n  private checkForCollisionWithEnemies(): void {\n    if (getEnemiesOnScreen(this.x, this.y)\n      .filter(e => e.collidesWithPlayer(this.x, this.y, this.collisionBox))\n      .length > 0) {\n        this.die()\n      }\n  }\n\n  private die(): void {\n    this.alive = false\n    Game.state = GameState.paused\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Raycaster {\n  /**\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   // TODO: Make the hit point the edge of the screen in worst case so the player can't see what's beyond (+ some offset maybe if you want the player to see beyond)\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const yInt = p.deltas.dyBottom\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta)\n      }\n    } else { // North\n      const yInt = p.deltas.dyTop\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(\n        Canvas.center.x + hitPoint.x,\n        Canvas.center.y + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + p.deltas.dxRight + tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + tileStepX + p.deltas.dxRight,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static getInterceptPointNW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - tileStepX - p.deltas.dxLeft,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - p.deltas.dxLeft - tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (-xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GameState from './GameState'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStatePaused implements IGameState {\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GameState.playing.render()\n    this.drawPauseMenu()\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","\nenum GameAssets {\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n    context.stroke()\n  }\n}\n"],"sourceRoot":""}