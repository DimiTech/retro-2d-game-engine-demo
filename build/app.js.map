{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/infrastructure/Canvas.ts","webpack:///./src/app/audio/SoundFX.ts","webpack:///./src/app/domain/map/Map.ts","webpack:///./src/app/peripherals/Mouse.ts","webpack:///./src/app/infrastructure/Game.ts","webpack:///./src/app/audio/AudioContext.ts","webpack:///./src/app/infrastructure/CollisionBox.ts","webpack:///./src/app/domain/map/MapKeys.ts","webpack:///./src/main.ts","webpack:///./src/app/audio/AudioLoader.ts","webpack:///./src/app/audio/Mixer.ts","webpack:///./src/app/audio/AudioBufferLoader.ts","webpack:///./src/app/domain/Grid.ts","webpack:///./src/app/domain/enemies/Enemy.ts","webpack:///./src/app/infrastructure/geometry/Point.ts","webpack:///./src/app/domain/objects/GameObjectFactory.ts","webpack:///./src/app/domain/objects/box/BoxFactory.ts","webpack:///./src/app/domain/objects/box/Box.ts","webpack:///./src/app/domain/objects/GameObject.ts","webpack:///./src/app/domain/player/Player.ts","webpack:///./src/app/infrastructure/Raycaster.ts","webpack:///./src/app/domain/player/Crosshair.ts","webpack:///./src/app/domain/player/Projectile.ts","webpack:///./src/app/peripherals/Keyboard.ts","webpack:///./src/app/peripherals/constants/KeyCodes.ts","webpack:///./src/app/peripherals/Gamepads.ts","webpack:///./src/app/infrastructure/FrameRate.ts","webpack:///./src/app/infrastructure/menus/PauseMenu.ts","webpack:///./src/app/infrastructure/GameAssets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CONFIG","Mouse_1","canvas","document","getElementById","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","style","SCALE","context","getContext","Canvas","[object Object]","clearRect","this","mousePosition","x","Math","floor","default","offsetLeft","y","offsetTop","rows","TILE_SIZE","cols","halfRows","halfCols","rowRemainder","colRemainder","center","getCanvasDomElement","Mixer_1","AudioContext_1","AudioBufferLoader_1","SoundFX","SMG","load","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","buffer","SMG_INDEX","gainNode","createGain","gain","soundFxVolume","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","Enemy_1","Canvas_1","GameObjectFactory_1","Map01","gameObjects","enemies","grid","player","loadMap","forEach","e","update","alive","splice","drawGameObjects","draw","deltas","dxLeft","dyTop","rowStart","row","colStart","col","gameObject","map","createGameObject","push","healthPercentage","Mouse","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","window","addEventListener","preventDefault","pageX","pageY","setShooting","innerWidth","innerHeight","AudioLoader_1","Grid_1","Map_1","Player_1","Keyboard_1","Gamepads_1","FrameRate_1","PauseMenu_1","GameAssets_1","Game","onfocus","restart","onblur","paused","showLoadingProgress","gameAssetLoaded","Audio","loadInterval","setInterval","loaded","clearInterval","finishInitialization","requestAnimationFrame","gameLoop","loadingProgressElement","display","textContent","asset","loadedPercentage","init","hideLoadingProgress","nextFrameRenderingShouldBeSkipped","render","calculateFrameRate","clear","drawFPS","AudioContext","halfWidth","halfHeight","MapKeys","isBox","mapKey","startsWith","SoundFX_1","loadCallback","Mixer","musicVolume","_musicVolume","vol","_soundFxVolume","URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","CollisionBox_1","Point_1","maxHealth","moving","left","right","up","down","collisionBox","maxSpeed","targetPathNodeIndex","health","movementPath","moveTowardsNode","move","drawCollisionBox","damageAmount","playEnemyHit","die","playEnemyDeath","pointToPointDistance","moveTowardsNextNode","strokeStyle","getHealthColor","lineWidth","beginPath","moveTo","lineTo","stroke","p1","p2","sqrt","MapKeys_1","BoxFactory_1","createBox","Box_1","BoxGray","BoxGreen","BoxBlue","Error","GameObject_1","color","playCrateHit","destructable","mapX","mapY","Raycaster_1","Crosshair_1","Projectile_1","rotation","sightLineLength","dyBottom","dxRight","shooting","shootingCooldown","projectiles","updateMapPosition","updateTileDeltas","shoot","dx","dy","xVel","abs","yVel","randomFactorX","random","randomFactorY","playSMG","isShooting","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","drawProjectiles","adjustCollisionWithGameObjects","atan2","fillStyle","fillText","font","cos","sin","hitPoint","hitObject","cast","drawRay","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","Raycaster","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","yIntercept","tileStepX","hitPointVertical","objectHitVertical","RAYCASTER","DEBUG","arc","PI","checkGameObjectCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","objectHitHorizontal","j","checkGameObjectCollisionHorizontalSE","pow","checkGameObjectCollisionVerticalNE","checkGameObjectCollisionHorizontalNE","checkGameObjectCollisionVerticalNW","checkGameObjectCollisionHorizontalNW","checkGameObjectCollisionVerticalSW","checkGameObjectCollisionHorizontalSW","xTile","yTile","gameObjectHit","canvasX","canvasY","offsetX","offsetY","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","playerX","playerY","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithGameObject","filter","intermediateIntervalX","intermediateIntervalY","point","takeDamage","getDamage","Game_1","KeyCodes_1","keyCode","KEYBOARD_KEYS","w","a","ESC","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","toFixed","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","lastFrameTime","frameDeltaTime","frameOverstepTime","ONE_FRAME_LENGTH_IN_SECONDS","FPS_ARR","FPS","skipNextFrameRendering","now","performance","unshift","pop","reduce","sum","current","GameAssets"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static update() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(): Promise<void> {\n    this.SMG[0] = await load('./audio/smg_1.wav')\n    this.SMG[1] = await load('./audio/smg_2.wav')\n    this.SMG[2] = await load('./audio/smg_3.wav')\n    this.SMG[3] = await load('./audio/smg_4.wav')\n    this.SMG[4] = await load('./audio/smg_5.wav')\n\n    this.CRATE_HIT[0] = await load('./audio/crate_hit_1.wav')\n\n    this.ENEMY_HIT[0] = await load('./audio/enemy_hit_1.mp3')\n    this.ENEMY_HIT[1] = await load('./audio/enemy_hit_2.mp3')\n    this.ENEMY_HIT[2] = await load('./audio/enemy_hit_3.mp3')\n    this.ENEMY_HIT[3] = await load('./audio/enemy_hit_4.mp3')\n    this.ENEMY_HIT[4] = await load('./audio/enemy_hit_5.mp3')\n\n    this.ENEMY_DEATH[0] = await load('./audio/enemy_die_1.mp3')\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playCrateHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Grid from '@app/domain/Grid'\n\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\nimport GameObject from '@app/domain/objects/GameObject'\nimport GameObjectFactory from '@app/domain/objects/GameObjectFactory'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport const gameObjects: GameObject[][] = []\nexport const enemies: Enemy[] = []\n\nexport default class Map {\n  constructor(private grid: Grid, private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public update(): void {\n    enemies.forEach((e, i) => {\n      e.update()\n      if (e.alive === false) {\n        enemies.splice(i, 1) // Remove the enemy\n      }\n    })\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    enemies.forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n    let gameObject\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (gameObjects[row] && gameObjects[row][col]) {\n          gameObject = gameObjects[row][col]\n          gameObject.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          gameObject.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          gameObject.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      gameObjects[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        gameObjects[row][col] = GameObjectFactory.createGameObject(row, col, map.gameObjects[row][col])\n      }\n    }\n\n    map.enemies.forEach(e => enemies.push(new Enemy(e.x, e.y, e.healthPercentage)))\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\nimport Player from '@app/domain/player/Player'\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(player: Player) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(player)\n  }\n\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(player: Player): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', e => {\n      player.setShooting(true)\n    }, false)\n    canvas.addEventListener('mouseup', e => {\n      player.setShooting(false)\n    }, false)\n  }\n}\n","import AudioLoader from '@app/audio/AudioLoader'\nimport Grid from '@app/domain/Grid'\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Canvas from '@app/infrastructure/Canvas'\nimport Keyboard from '@app/peripherals/Keyboard'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport FrameRate from './FrameRate'\nimport PauseMenu from './menus/PauseMenu'\nimport GameAssets from './GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0 // 0.0 to 1.0\n  public static paused: boolean = false\n\n  private grid: Grid\n  private player: Player\n  private map: Map\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n    window.onblur = () => {\n      Game.paused = true\n    }\n\n    this.showLoadingProgress()\n    AudioLoader.load(() => this.gameAssetLoaded(GameAssets.Audio))\n\n    this.grid = new Grid()\n    this.player = new Player(128, 64)\n    this.map = new Map(this.grid, this.player)\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        this.finishInitialization()\n        window.requestAnimationFrame(() => this.gameLoop())\n      }\n    }, 250)\n  }\n  private showLoadingProgress(): void {\n    const loadingProgressElement = document.getElementById('loading-progress')\n    loadingProgressElement.style.display = 'block'\n    loadingProgressElement.textContent = 'loading'\n  }\n\n  private hideLoadingProgress(): void {\n    document.getElementById('loading-progress').style.display = 'none'\n  }\n\n  private gameAssetLoaded(asset: GameAssets) {\n    if (asset === GameAssets.Audio) {\n      Game.loadedPercentage += 1.0\n    }\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private finishInitialization(): void {\n    Keyboard.init(this.player)\n    Mouse.init(this.player)\n    this.hideLoadingProgress()\n  }\n\n  private gameLoop(): void {\n    if (Game.paused === false) {\n      this.update()\n    }\n\n    if (FrameRate.nextFrameRenderingShouldBeSkipped() === false) {\n      this.render()\n    }\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Gamepads.update(this.player)\n    Canvas.update()\n    this.player.update()\n    this.map.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    this.map.draw()\n    this.player.draw()\n\n    if (Game.paused) {\n      PauseMenu.render()\n    }\n\n    FrameRate.drawFPS() // TODO: Remove this, used just for debugging\n  }\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","export default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n","enum MapKeys {\n  Empty    = 0,\n  BoxGray  = 1,\n  BoxGreen = 2,\n  BoxBlue  = 3,\n}\n\nexport function isBox(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Box')\n}\n\nexport default MapKeys\n","import Game from '@app/infrastructure/Game'\n\nconst game: Game = new Game()\ngame.start()\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: () => void) {\n    await SoundFX.load()\n    loadCallback()\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class Grid {\n  rows: number = CONFIG.CANVAS_HEIGHT / CONFIG.TILE_SIZE\n  cols: number = CONFIG.CANVAS_WIDTH  / CONFIG.TILE_SIZE\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\n\nexport default class Enemy {\n  public alive: boolean = true\n  public maxHealth: number = 100\n  public health: number\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public collisionBox: CollisionBox = new CollisionBox(16, 16)\n  private maxSpeed = 1\n  private movementPath: Point[]\n  private targetPathNodeIndex: number = 1\n\n  constructor(\n    public x: number,\n    public y: number,\n    healthPercentage: number\n  ) {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n\n    this.movementPath = [ // TODO: Delete this temp placeholder, get paths from the Map JSON\n      { x: this.x, y: this.y },\n      { x: this.x, y: this.y + 50 },\n    ]\n    this.moving.down = true // TODO: Remove this temp placeholder\n  }\n\n  public update(): void {\n    this.moveTowardsNode()\n    this.move()\n  }\n\n  public draw(player: Player): void {\n    this.drawCollisionBox(player) // Just for debugging\n  }\n\n  public takeDamage(damageAmount: number) {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.alive = false\n  }\n\n  private moveTowardsNode(): void {\n    const distanceFromTargetNode = pointToPointDistance(\n      { x: this.movementPath[this.targetPathNodeIndex].x, y: this.movementPath[this.targetPathNodeIndex].y },\n      { x: this.x, y: this.y }\n    )\n    if (distanceFromTargetNode < 1) {\n      this.moveTowardsNextNode()\n    }\n  }\n\n  private moveTowardsNextNode(): void {\n    this.targetPathNodeIndex = (this.targetPathNodeIndex + 1) % this.movementPath.length\n\n    this.moving.down = !this.moving.down // TODO: Remove this temp placeholder\n    this.moving.up   = !this.moving.up   // TODO: Remove this temp placeholder\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      this.x -= this.maxSpeed\n    }\n    if (this.moving.right) {\n      this.x += this.maxSpeed\n    }\n    if (this.moving.up) {\n      this.y -= this.maxSpeed\n    }\n    if (this.moving.down) {\n      this.y += this.maxSpeed\n    }\n  }\n\n  private drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.10) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.20) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.30) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.40) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.50) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.60) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.70) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.80) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.90) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","export default interface Point {\n  x: number\n  y: number\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n","import GameObject from './GameObject'\nimport MapKeys, { isBox } from '@app/domain/map/MapKeys'\nimport BoxFactory from '@app/domain/objects/box/BoxFactory'\n\nexport default class GameObjectFactory {\n  public static createGameObject(row: number, col: number, mapKey: MapKeys): GameObject | null {\n    if (isBox(mapKey)) {\n      return BoxFactory.createBox(row, col, mapKey)\n    }\n    else {\n      return null\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Box from '@app/domain/objects/box/Box'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class BoxFactory {\n  public static createBox(row: number, col: number, mapKey: MapKeys): Box {\n    switch (mapKey) {\n      case MapKeys.BoxGray:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.BoxGreen:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.BoxBlue:\n        return new Box(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such box!')\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Box extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw box outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw 'x' accross the box\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playCrateHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\n\nimport { gameObjects } from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player {\n  public rotation: number = 0\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public row: number\n  public col: number\n  public sightLineLength = 10\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  private collisionBox: CollisionBox = new CollisionBox(12, 12)\n  private maxSpeed = 3\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n  )\n  {\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.move()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = (Canvas.mousePosition.x - Canvas.center.x)\n      const dy = (Canvas.mousePosition.y - Canvas.center.y)\n      let xVel = dx / ( Math.abs(dx) + Math.abs(dy) )\n      let yVel = dy / ( Math.abs(dx) + Math.abs(dy) )\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      const randomFactorX = Math.random() * 0.1 - 0.05\n      const randomFactorY = Math.random() * 0.1 - 0.05\n      xVel += randomFactorX\n      yVel += randomFactorY\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    // this.drawPlayerVisionRay(theta - 0.45)\n    // this.drawPlayerVisionRay(theta - 0.4)\n    // this.drawPlayerVisionRay(theta - 0.35)\n    // this.drawPlayerVisionRay(theta - 0.3)\n    // this.drawPlayerVisionRay(theta - 0.25)\n    // this.drawPlayerVisionRay(theta - 0.2)\n    // this.drawPlayerVisionRay(theta - 0.15)\n    // this.drawPlayerVisionRay(theta - 0.1)\n    // this.drawPlayerVisionRay(theta - 0.05)\n    // this.drawPlayerVisionRay(theta + 0.05)\n    // this.drawPlayerVisionRay(theta + 0.1)\n    // this.drawPlayerVisionRay(theta + 0.15)\n    // this.drawPlayerVisionRay(theta + 0.2)\n    // this.drawPlayerVisionRay(theta + 0.25)\n    // this.drawPlayerVisionRay(theta + 0.3)\n    // this.drawPlayerVisionRay(theta + 0.35)\n    // this.drawPlayerVisionRay(theta + 0.4)\n    // this.drawPlayerVisionRay(theta + 0.45)\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  private move(): void {\n    if (this.moving.left) {\n      this.x -= this.maxSpeed\n    }\n    if (this.moving.right) {\n      this.x += this.maxSpeed\n    }\n    if (this.moving.up) {\n      this.y -= this.maxSpeed\n    }\n    if (this.moving.down) {\n      this.y += this.maxSpeed\n    }\n    this.adjustCollisionWithGameObjects()\n    this.updateMapPosition()\n  }\n\n  private calculateTheta(): number {\n    const theta = Math.atan2(\n      (Canvas.mousePosition.y - Canvas.center.y),\n      (Canvas.mousePosition.x - Canvas.center.x)\n    )\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n      context.fillStyle = '#00AA00'\n      context.font = \"10px Monospace\"\n\n      context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n      context.strokeStyle = '#523DA5'\n      context.lineWidth = 2\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(Canvas.center.x + (this.sightLineLength * Math.cos(theta)), Canvas.center.y + (this.sightLineLength * Math.sin(theta)))\n    context.stroke()\n\n    this.drawCollisionBox() // Just for debugging\n  }\n\n  private drawCollisionBox() {\n    context.lineWidth = 1\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x - this.collisionBox.halfWidth,  0.5 + Canvas.center.y - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, hitObject } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (hitObject) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach(p => p.draw(this.x, this.y))\n  }\n\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Generalize collision physics\n  private adjustCollisionWithGameObjects(): void {\n    let o\n    if (gameObjects[this.row]) {\n      if (this.moving.left) {\n        o = gameObjects[this.row][this.col - 1] // West\n        if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n          this.x = o.mapX + o.width + this.collisionBox.halfWidth\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          o = gameObjects[SWVertexRow][this.col - 1] // South West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          o = gameObjects[NWVertexRow][this.col - 1] // North West\n          if (o && this.x - this.collisionBox.halfWidth <= o.mapX + o.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = o.mapX + o.width + this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        o = gameObjects[this.row][this.col + 1] // East\n        if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n          this.x = o.mapX - this.collisionBox.halfWidth\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          o = gameObjects[SEVertexRow][this.col + 1] // South East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          o = gameObjects[NEVertexRow][this.col + 1] // North East\n          if (o && this.x + this.collisionBox.halfWidth >= o.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = o.mapX - this.collisionBox.halfWidth\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row - 1]) {\n      if (this.moving.up) {\n        o = gameObjects[this.row - 1][this.col] // North\n        if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n          this.y = o.mapY + o.height + this.collisionBox.halfHeight\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          o = gameObjects[this.row - 1][NEVertexCol] // North East\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          o = gameObjects[this.row - 1][NWVertexCol] // North West\n          if (o && this.y - this.collisionBox.halfHeight <= o.mapY + o.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = o.mapY + o.height + this.collisionBox.halfHeight\n            }\n          }\n        }\n      }\n    }\n    if (gameObjects[this.row + 1]) {\n      if (this.moving.down) {\n        o = gameObjects[this.row + 1][this.col] // South\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          this.y = o.mapY - this.collisionBox.halfHeight\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        o = gameObjects[this.row + 1][SEVertexCol] // South East\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        o = gameObjects[this.row + 1][SWVertexCol] // South West\n        if (o && this.y + this.collisionBox.halfHeight >= o.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = o.mapY - this.collisionBox.halfHeight\n          }\n        }\n      }\n    }\n  }\n\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Player from '@app/domain/player/Player'\nimport GameObject from '@app/domain/objects/GameObject'\nimport { gameObjects } from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Raycaster {\n  /**\n   * @returns {\n   *   hitObject, // the game object that has been hit. If no object are hit - hitObject is `null`\n   *   // TODO: Make the hit point the edge of the screen in worst case so the player can't see what's beyond (+ some offset maybe if you want the player to see beyond)\n   *   hitPoint   // can be either a point where the ray intersects a game object, or a just a point outside the screen if no object is hit\n   * }\n   */\n  public static cast(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    if (theta >= 0) { // South\n      const yInt = p.deltas.dyBottom\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta)\n      }\n    } else { // North\n      const yInt = p.deltas.dyTop\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x, Canvas.center.y)\n      context.lineTo(\n        Canvas.center.x + hitPoint.x,\n        Canvas.center.y + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + p.deltas.dxRight + tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + tileStepX + p.deltas.dxRight,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNE(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNE(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static getInterceptPointNW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - tileStepX - p.deltas.dxLeft,\n          Canvas.center.y - yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalNW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Canvas.center.y) || (xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - xIntercept,\n          Canvas.center.y - tileStepY - p.deltas.dyTop,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalNW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Player, theta: number): { hitPoint: Point, hitObject: GameObject } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let objectHitVertical: GameObject = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Canvas.center.x) || (yIntercept > Canvas.center.y)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.beginPath()\n        context.arc(\n          Canvas.center.x - p.deltas.dxLeft - tileStepX,\n          Canvas.center.y + yIntercept,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      objectHitVertical = Raycaster.checkGameObjectCollisionVerticalSW(i, p, yIntercept)\n\n      if (objectHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let objectHitHorizontal: GameObject = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Canvas.center.y) || (-xIntercept > Canvas.center.x)) {\n        break\n      }\n\n      if (CONFIG.RAYCASTER.DEBUG) {\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(\n          Canvas.center.x + xIntercept,\n          Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          2, 0, (2 * Math.PI)\n        )\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      objectHitHorizontal = Raycaster.checkGameObjectCollisionHorizontalSW(j, p, xIntercept)\n\n      if (objectHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit object\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        hitObject : objectHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        hitObject : objectHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          hitObject : objectHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          hitObject : objectHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkGameObjectCollisionVerticalSE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNE(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNE(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalNW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalNW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n\n  private static checkGameObjectCollisionVerticalSW(i: number, p: Player, yIntercept: number): GameObject {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n  private static checkGameObjectCollisionHorizontalSW(i: number, p: Player, xIntercept: number): GameObject {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let gameObjectHit = null\n    if (gameObjects[yTile] && gameObjects[yTile][xTile]) {\n      gameObjectHit = gameObjects[yTile][xTile]\n    }\n\n    if (CONFIG.RAYCASTER.DEBUG) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${gameObjectHit ? [gameObjectHit.row, gameObjectHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return gameObjectHit\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { gameObjects, enemies } from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithGameObject(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithGameObject()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithGameObject(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const o = gameObjects[point.row][point.col]\n    if (o) {\n        o.takeDamage(this.getDamage())\n        this.alive = false\n        if (o.destructable) {\n          gameObjects[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import Game from '@app/infrastructure/Game'\nimport FrameRate from '@app/infrastructure/FrameRate'\nimport Player from '@app/domain/player/Player'\nimport { KEYBOARD_KEYS } from './constants/KeyCodes'\n\nexport default class Keyboard {\n  public static init(player: Player): void {\n    document.addEventListener('keydown', e => {\n      // TODO: Move Player logic to Player class\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = true\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = true\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = true\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = true\n          break\n        case KEYBOARD_KEYS.ESC:\n        case KEYBOARD_KEYS.p:\n          Game.paused = !Game.paused\n          break\n        default:\n          break\n      }\n    })\n    document.addEventListener('keyup', e => {\n      switch (e.keyCode) {\n        case KEYBOARD_KEYS.w:\n          player.moving.up = false\n          break\n        case KEYBOARD_KEYS.a:\n          player.moving.left = false\n          break\n        case KEYBOARD_KEYS.s:\n          player.moving.down = false\n          break\n        case KEYBOARD_KEYS.d:\n          player.moving.right = false\n          break\n        default:\n          break\n      }\n    })\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameDeltaTime: number\nlet frameOverstepTime: number = 0\n\nconst ONE_FRAME_LENGTH_IN_SECONDS = 0.01667\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\nlet skipNextFrameRendering = false\n\nexport default class FrameRate {\n  public static nextFrameRenderingShouldBeSkipped(): boolean {\n    return skipNextFrameRendering\n  }\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameDeltaTime = (now - lastFrameTime) / 1000\n      if (frameDeltaTime > ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime += frameDeltaTime - ONE_FRAME_LENGTH_IN_SECONDS\n      }\n\n      FPS_ARR.unshift(1 / (frameDeltaTime + frameOverstepTime))\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      if (frameOverstepTime >= ONE_FRAME_LENGTH_IN_SECONDS) {\n        frameOverstepTime = frameOverstepTime - ONE_FRAME_LENGTH_IN_SECONDS\n        skipNextFrameRendering = true\n      } else {\n        skipNextFrameRendering = false\n      }\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = \"8px Monospace\"\n\n      context.fillText(`FPS: ${FPS}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '../Canvas'\n\nexport default class PauseMenu {\n  public static render(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused (press 'p' to continue)`, 50, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Audio,\n}\n\nexport default GameAssets"],"sourceRoot":""}