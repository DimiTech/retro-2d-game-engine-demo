{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/AnimationState.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/Level.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationAttacking.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationDecaying.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationDying.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationIdling.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/ConcreteEnemyAnimationMoving.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy/animations/index.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Maps.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/domain/widgets/DamageNumbers.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/DecaySprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/ZergSprite.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameTime.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLevelCleared.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/math/MathUtils.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static PLAYER_DEATH: AudioBuffer[] = []\n\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static PLAYER_HIT: AudioBuffer[] = []\n  private static PLAYER_HIT_INDEX = 0\n  private static PLAYER_HIT_READY: boolean = true\n\n  private static ENEMY_ATTACK: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/player_death_1.wav'),\n\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/player_hit_1.mp3'),\n      load('./audio/player_hit_2.mp3'),\n      load('./audio/player_hit_3.mp3'),\n      load('./audio/player_hit_4.mp3'),\n      load('./audio/player_hit_5.mp3'),\n\n      load('./audio/enemy_attack_1.wav'),\n      load('./audio/enemy_attack_2.wav'),\n\n      load('./audio/enemy_hit_1.wav'),\n      load('./audio/enemy_hit_2.wav'),\n      load('./audio/enemy_hit_3.wav'),\n\n      load('./audio/enemy_death_1.wav'),\n      load('./audio/enemy_death_2.wav'),\n      load('./audio/enemy_death_3.wav'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.PLAYER_DEATH[0] = soundFxFiles[0]\n\n    this.SMG[0] = soundFxFiles[1]\n    this.SMG[1] = soundFxFiles[2]\n    this.SMG[2] = soundFxFiles[3]\n    this.SMG[3] = soundFxFiles[4]\n    this.SMG[4] = soundFxFiles[5]\n\n    this.CRATE_HIT[0] = soundFxFiles[6]\n\n    this.PLAYER_HIT[0] = soundFxFiles[7]\n    this.PLAYER_HIT[1] = soundFxFiles[8]\n    this.PLAYER_HIT[2] = soundFxFiles[9]\n    this.PLAYER_HIT[3] = soundFxFiles[10]\n    this.PLAYER_HIT[4] = soundFxFiles[11]\n\n    setLoadedPercentage(0.5)\n\n    this.ENEMY_ATTACK[0] = soundFxFiles[12]\n    this.ENEMY_ATTACK[1] = soundFxFiles[13]\n\n    this.ENEMY_HIT[0] = soundFxFiles[14]\n    this.ENEMY_HIT[1] = soundFxFiles[15]\n    this.ENEMY_HIT[2] = soundFxFiles[16]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[17]\n    this.ENEMY_DEATH[1] = soundFxFiles[18]\n    this.ENEMY_DEATH[2] = soundFxFiles[19]\n\n    setLoadedPercentage(1.0)\n  }\n\n  public static playPlayerDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.PLAYER_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playPlayerHit(): void {\n    if (this.PLAYER_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.PLAYER_HIT[this.PLAYER_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.PLAYER_HIT_INDEX = ++this.PLAYER_HIT_INDEX % this.PLAYER_HIT.length // Shuffle\n\n    this.PLAYER_HIT_READY = false\n    setTimeout(() => { this.PLAYER_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyAttack(): void {\n    const playSound = context.createBufferSource()\n\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_ATTACK.length)\n    playSound.buffer = this.ENEMY_ATTACK[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_HIT.length)\n    playSound.buffer = this.ENEMY_HIT[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 200)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n\n    const randomIndex = Math.floor(Math.random() * this.ENEMY_DEATH.length)\n    playSound.buffer = this.ENEMY_DEATH[randomIndex]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport GameTime from '@app/infrastructure/GameTime'\n\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\n\nexport default abstract class AnimationState {\n  protected sprite: CreatureSprite\n\n  protected animationLength   : number // ms\n  protected animationProgress : number // ms\n\n  protected numberOfSpritesInAnimation : number // integer\n  protected animationSpritePosition    : number // integer\n\n  public animationFinished: boolean\n  \n  public advanceAnimation(): void {\n    this.animationProgress = this.animationProgress + GameTime.elapsedTimeFactor\n    const animationProgressPercentage = this.animationProgress / this.animationLength\n    this.animationSpritePosition = Math.floor(animationProgressPercentage * this.numberOfSpritesInAnimation) % this.numberOfSpritesInAnimation\n\n    this.animationFinished = animationProgressPercentage >= 1.0\n  }\n\n  public resetAnimation(): void {\n    this.animationProgress = 0\n    this.animationSpritePosition = 0\n  }\n\n  public draw(c: Creature, playerCoordinates: Point): void {\n    this.sprite.draw(c, playerCoordinates, this.animationSpritePosition)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\nimport { Directions, MovingDirections } from '@app/infrastructure/Directions'\n\nimport Map from '@app/domain/map/Map'\nimport CreatureState from '@app/domain/CreatureState'\nimport { Widget } from '@app/domain/widgets/DamageNumbers'\n\nexport default abstract class Creature {\n  private prevHistoryLength = 8\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n\n  public nextX: number\n  public nextY: number\n\n  public row: number\n  public col: number\n\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number         // Derived from this.speed\n  public maxSpeedDiagonal: number // Derived from this.speed\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationSpritePosition: number = 0\n\n  public direction: Directions\n\n  // Used for sprite orientation\n  // TODO: Find a better name\n  public movingDirections: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public moving: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked: { [key in MovingDirections]: boolean } = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n\n  protected widgets: { [key: string]: Widget } = {}\n  \n  constructor(\n    public x: number,\n    public y: number,\n    public collisionBox: CollisionBox,\n    private speed: number,\n    healthPercentage: number,\n  ) {\n    this.maxSpeed = this.speed\n    this.maxSpeedDiagonal = Math.sin(45) * this.speed\n\n    this.initializeHealth(healthPercentage)\n    this.updateMapPosition()\n  }\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n    this.movingDirections.left  = false\n    this.movingDirections.right = false\n    this.movingDirections.up    = false\n    this.movingDirections.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  // TODO: This is not 100% correct, it's just an estimation based on previous frame's length\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement, false)\n    }\n    if (this.moving.right) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.nextX += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement, false)\n    }\n    if (this.moving.up) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement, false)\n    }\n    if (this.moving.down) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.nextY += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement, false)\n    }\n  }\n\n  protected move(): void {\n\n    if (this.moving.left && !this.blocked.left && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x -= this.calculateMovementAmountPixels(MovingDirections.left, isDiagonalMovement)\n    }\n    if (this.moving.right && !this.blocked.right && this.horizontalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.up || this.moving.down)\n      this.x += this.calculateMovementAmountPixels(MovingDirections.right, isDiagonalMovement)\n    }\n\n    if (this.moving.up && !this.blocked.up && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y -= this.calculateMovementAmountPixels(MovingDirections.up, isDiagonalMovement)\n    }\n    if (this.moving.down && !this.blocked.down && this.verticalMovementControlsAreNotJammed()) {\n      const isDiagonalMovement = (this.moving.left || this.moving.right)\n      this.y += this.calculateMovementAmountPixels(MovingDirections.down, isDiagonalMovement)\n    }\n\n    this.updateMapPosition()\n  }\n\n  // TODO: Maybe find a better solution for this\n  private horizontalMovementControlsAreNotJammed() { // Detect control jamming by pressing `left` & `right` at the same time\n    return (this.moving.left && this.moving.right) === false\n  }\n  private verticalMovementControlsAreNotJammed() { // Detect control jamming by pressing `up` & `down` at the same time\n    return (this.moving.up && this.moving.down) === false\n  }\n\n  private movementAccumulator: { [key in MovingDirections]: number } = {\n    left  : 0.0,\n    right : 0.0,\n    up    : 0.0,\n    down  : 0.0,\n  }\n\n  /**\n   * For this Game Engine we want pixelated movement, meaning that the movement amounts are Integer values\n   *\n   * Slow game speed:\n   *   When the game is slowed down enough that one frame worth of movement is below 1,\n   *   the `movementAmountDecimalPart` is sent to the `movementAccumulator`, and the `movementAccumulator`\n   *   is added to the next movement calculation.\n   *   This means that it can take, for example, 3 frames to move 1 pixel.\n   *\n   * Fast game speed:\n   *   When the game is sped up so that one frame worht of movement is above 1,\n   *   we want to preserve the spillover `movementAmountDecimalPart` and add it to\n   *   the next movement calculation.\n   *\n   * This functions makes that happen - and the result is smooth Player/Creature movement :)\n   *\n   * @param direction  - One of four possible `MovingDirections`\n   * @param isDiagonalMovement - Specifies whether the movement is diagonal or not\n   * @param accumulate - We don't want to accumulate when calling from `calculateNextCoordinates()`\n   * @returns - Integer number of pixels to move\n   */\n  private calculateMovementAmountPixels(direction: MovingDirections, isDiagonalMovement: boolean, accumulate = true): number {\n    const movementAmount = isDiagonalMovement\n      ? (GameTime.elapsedTimeFactor * this.maxSpeedDiagonal) + this.movementAccumulator[direction]\n      : (GameTime.elapsedTimeFactor * this.maxSpeed        ) + this.movementAccumulator[direction]\n    const movementAmountPixels = Math.floor(movementAmount)\n\n    if (accumulate) {\n      const movementAmountDecimalPart = (movementAmount % 1)\n      this.movementAccumulator[direction] = movementAmountDecimalPart\n    }\n\n    return movementAmountPixels\n  }\n\n  protected updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  protected updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n\n    ///////////////////////////////////////////////////////////////////////////\n    // West\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.left) {\n      wall = Map.walls[this.row][this.col - 1] // West\n      if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n        this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        this.movingDirections.left = false\n      }\n\n      const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the Creature's Tile\n        wall = Map.walls[SWVertexRow][this.col - 1] // South West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n\n      const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[NWVertexRow][this.col - 1] // North West\n        if (wall && this.x - this.collisionBox.halfWidth - 1 <= wall.mapX + wall.width) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n            this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            this.movingDirections.left = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // East\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.right) {\n      wall = Map.walls[this.row][this.col + 1] // East\n      if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n        this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        this.movingDirections.right = false\n      }\n\n      const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the Creature's Tile\n        wall = Map.walls[SEVertexRow][this.col + 1] // South East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n\n      const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n      if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[NEVertexRow][this.col + 1] // North East\n        if (wall && this.x + this.collisionBox.halfWidth + 1 >= wall.mapX) {\n          if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n            this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            this.movingDirections.right = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // North\n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.up) {\n      wall = Map.walls[this.row - 1][this.col] // North\n      if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n        this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        this.movingDirections.up = false\n      }\n\n      const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NEVertexCol] // North East\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n\n      const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the Creature's Tile\n        wall = Map.walls[this.row - 1][NWVertexCol] // North West\n        if (wall && this.y - this.collisionBox.halfHeight - 1 <= wall.mapY + wall.height) {\n          if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n            this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            this.movingDirections.up = false\n          }\n        }\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // South \n    ///////////////////////////////////////////////////////////////////////////\n    if (this.moving.down) {\n      wall = Map.walls[this.row + 1][this.col] // South\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        this.movingDirections.down = false\n      }\n    }\n\n    const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n    if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SEVertexCol] // South East\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n\n    const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n    if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the Creature's Tile\n      wall = Map.walls[this.row + 1][SWVertexCol] // South West\n      if (wall && this.y + this.collisionBox.halfHeight + 1 >= wall.mapY) {\n        if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          this.movingDirections.down = false\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > this.prevHistoryLength) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > this.prevHistoryLength) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    if (this.movingDirections.down && this.blocked.down === false) {\n      direction.push(Directions.S)\n    }\n    else if (this.movingDirections.up && this.blocked.up === false) {\n      direction.push(Directions.N)\n    }\n\n    if (this.movingDirections.right && this.blocked.right === false) {\n      direction.push(Directions.E)\n    }\n    else if (this.movingDirections.left && this.blocked.left === false) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    // Check if all of the recorded prevX & prevY positions are the same\n    const xUnchanged = this.prevX.every((prevX, i) => (i === 0) ? true : (prevX === this.prevX[0]))\n    const yUnchanged = this.prevY.every((prevY, i) => (i === 0) ? true : (prevY === this.prevY[0]))\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n  Removed,\n}\n\nexport default CreatureState\n","import { totalNumberOfMaps } from '@app/domain/map/Maps'\n\nexport default class Level {\n  public static lastLevel = totalNumberOfMaps\n\n  public static readonly startingLevel = 1\n\n  public static currentLevel = Level.startingLevel\n\n  public static resetToStartingLevel() {\n    Level.currentLevel = Level.startingLevel\n\n    LevelTimer.reset()\n  }\n\n  public static nextLevel() {\n    Level.currentLevel++\n\n    LevelTimer.reset()\n  }\n\n  public static isLastLevel() {\n    return (Level.currentLevel === Level.lastLevel)\n  }\n}\n\nimport * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\n\nexport class LevelTimer {\n  public static timeSpentOnCurrentLevel = 0 // ms\n\n  public static incrementTimeSpentOnCurrentLevel() {\n    LevelTimer.timeSpentOnCurrentLevel += GameTime.frameElapsedTime\n  }\n\n  public static reset() {\n    LevelTimer.timeSpentOnCurrentLevel = 0\n  }\n\n  public static debug_displayTimeSpentOnCurrentLevel() {\n    context.beginPath()\n      context.fillStyle = '#9999ff'\n      context.font = '8px Monospace'\n      const levelTimeInSeconds = Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)\n      context.fillText(`Level ${Level.currentLevel} Time: ${levelTimeInSeconds}`, 10, CONFIG.CANVAS_HEIGHT - 24)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport {\n  ConcreteEnemyAnimationIdling,\n  ConcreteEnemyAnimationMoving,\n  ConcreteEnemyAnimationAttacking,\n  ConcreteEnemyAnimationDying,\n  ConcreteEnemyAnimationDecaying,\n} from './animations'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected target: Point\n\n  // TODO: Extract to CreatureState objects\n  // TODO: Adjust the feeling of enemy attack & animation\n  protected attackSpeed = 0.45 // seconds\n\n  constructor(\n    x: number,\n    y: number,\n    speed: number,\n    healthPercentage: number,\n    pathfindingTimerStart: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), speed, healthPercentage)\n\n    this.pathfindingTimer = (9 * pathfindingTimerStart) % this.pathfindingInterval\n\n    this.animations = {\n      [CreatureState.Idling   ]: new ConcreteEnemyAnimationIdling(),\n      [CreatureState.Moving   ]: new ConcreteEnemyAnimationMoving(),\n      [CreatureState.Attacking]: new ConcreteEnemyAnimationAttacking(),\n      [CreatureState.Dying    ]: new ConcreteEnemyAnimationDying(),\n      [CreatureState.Decaying ]: new ConcreteEnemyAnimationDecaying(),\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.update()`\n  public update(player: Player): void {\n\n    if (this.state >= CreatureState.Dying) {\n      super.update(player)\n\n      if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n        this.advanceAnimation()\n      }\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n    this.checkForCollisionWithOtherEnemies(player) // Must come before move()\n    this.checkForCollisionWithPlayer(player)       // Must come before move()\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateTileDeltas()\n\n    this.adjustCollisionWithWalls() // Must come after move()\n\n    this.updateDirection() // Must come after adjustCollisionWithWalls()\n\n    super.update(player)\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  // TODO: See what more can be moved to `Enemy.draw()`\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      if (this.state < CreatureState.Dying) {\n        this.debug_drawCollisionBox(player)\n      }\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n\n    super.draw(player)\n\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n  }\n\n  // TODO: Extract to ConcreteEnemyAnimationLifecycle object (or something like that)\n  protected advanceAnimation(): void {\n    if (this.state === CreatureState.Attacking) {\n      this.animations[this.state].advanceAnimation()\n    }\n    else if (this.state === CreatureState.Moving) {\n      this.animations[this.state].advanceAnimation()\n    }\n    else if (this.state === CreatureState.Dying) {\n      this.animations[this.state].advanceAnimation()\n      if (this.animations[this.state].animationFinished) {\n        this.setState(CreatureState.Decaying)\n      }\n    }\n    else if (this.state === CreatureState.Decaying) {\n      this.animations[this.state].advanceAnimation()\n      if (this.animations[this.state].animationFinished) {\n        this.setState(CreatureState.Removed)\n      }\n    }\n  }\n\n  // TODO: Move to Enemy\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingTimer === 0) {\n        this.pathfindingNodes = generatePathNodes( // TODO: Move to Pathfinding or Player\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingTimer += GameTime.frameElapsedTime // Game speed independent\n      if (this.pathfindingTimer > this.pathfindingInterval) {\n        this.pathfindingTimer = 0\n      }\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n      this.movingDirections.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n      this.movingDirections.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n      this.movingDirections.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n      this.movingDirections.up = true\n    }\n  }\n\n  // TODO: Move to Creature since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n         0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,\n        0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n         0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight,\n      )\n      context.lineTo(\n        -0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        -0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight,\n      )\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationAttacking extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 420\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 5\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationDecaying extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Decay\n\n  protected animationLength   = 10000\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 3\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationDying extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 500\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 7\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationIdling extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 0\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 0\n}","import Sprites from '@app/graphics/Sprites'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport AnimationState from '@app/domain/AnimationState'\n\nexport default class ConcreteEnemyAnimationMoving extends AnimationState {\n  protected sprite: CreatureSprite = Sprites.Zerg\n\n  protected animationLength   = 330\n  protected animationProgress = 0\n\n  protected animationSpritePosition    = 0\n  protected numberOfSpritesInAnimation = 7\n}","import ConcreteEnemyAnimationIdling from './ConcreteEnemyAnimationIdling'\nimport ConcreteEnemyAnimationMoving from './ConcreteEnemyAnimationMoving'\nimport ConcreteEnemyAnimationAttacking from './ConcreteEnemyAnimationAttacking'\nimport ConcreteEnemyAnimationDying from './ConcreteEnemyAnimationDying'\nimport ConcreteEnemyAnimationDecaying from './ConcreteEnemyAnimationDecaying'\n\nexport {\n  ConcreteEnemyAnimationIdling,\n  ConcreteEnemyAnimationMoving,\n  ConcreteEnemyAnimationAttacking,\n  ConcreteEnemyAnimationDying,\n  ConcreteEnemyAnimationDecaying,\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\n\nimport Creature from '@app/domain/Creature'\nimport CreatureState from '@app/domain/CreatureState'\nimport AnimationState from '@app/domain/AnimationState'\nimport Player from '@app/domain/player/Player'\nimport Map from '@app/domain/map/Map'\nimport DamageNumbers, { DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingTimer: number = 0\n  protected pathfindingInterval: number = 500 // ms\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  // TODO: Move this to Weapon\n  protected readonly attackSpeed: number // seconds\n  protected attackCooldown: number       // ms\n\n  protected animations: { [key in CreatureState]?: AnimationState }\n\n  constructor(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    speed: number,\n    healthPercentage: number,\n  ) {\n    super(x, y, collisionBox, speed, healthPercentage)\n\n    // TODO: Move this function to Weapon\n    this.resetAttackCooldown()\n\n    // Widgets\n    this.widgets.damageNumbers = new DamageNumbers()\n  }\n\n  public draw(player: Player): void {\n    this.animations[this.state].draw(this, { x: player.x, y: player.y })\n\n    Object.values(this.widgets).forEach(widget => widget.render(player.x, player.y)) // Render widgets\n\n  }\n\n  public update(player: Player): void {\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (e.state >= CreatureState.Dying) {\n        return\n      }\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playEnemyAttack()\n      this.dealDamage(p)\n    } else {\n      this.attackCooldown -= GameTime.frameElapsedTime\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health -= damageAmount\n\n    this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount))\n\n    if (this.health <= 0) {\n      this.die()\n    }\n    else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Dying)\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimations()\n  }\n\n  protected resetAnimations() {\n    Object.values(this.animations).forEach(( a: AnimationState ) => a.resetAnimation())\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport getMapData from '@app/domain/map/Maps'\nimport Level from '@app/domain/Level'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static enemiesDecaying: Enemy[] = []\n  public static exitPortal: Portal\n\n  public player: Player\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static getDecayingOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemiesDecaying.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor() {\n    const mapData = getMapData(Level.currentLevel)\n    this.loadMap(mapData)\n    this.player = new Player(mapData.player.x, mapData.player.y)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      if (e.state === CreatureState.Decaying) {\n        // Remove from `enemies` & add to `enemiesDecaying`\n        Map.enemies.splice(i, 1)\n        Map.enemiesDecaying.push(e)\n      }\n      e.update(this.player)\n    })\n\n    Map.enemiesDecaying.forEach((e, i) => {\n      e.update(this.player)\n      if (e.state === CreatureState.Removed) {\n        Map.enemiesDecaying.splice(i, 1)\n      }\n    })\n\n    this.openPortalWhenAllEnemiesAreKilled()\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (\n      Map.exitPortal.isOpen === false &&\n      (\n        Map.enemies.length === 0 ||\n        Map.enemies.every(e => e.state >= CreatureState.Dying)\n      )\n    ) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n\n    // First draw decaying enemies\n    Map.getDecayingOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n\n    // Then draw alive enemies on top\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .filter(e => e.state !== CreatureState.Removed)\n      .forEach(e => {\n        if (e.state === CreatureState.Removed) {\n          return\n        }\n        e.draw(this.player)\n      })\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, 0.125, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return (\n    mapKey ===  MapKeys.WallGray  ||\n    mapKey ===  MapKeys.WallGreen ||\n    mapKey ===  MapKeys.WallBlue\n  )\n}\n\nexport default MapKeys\n","import IMap from './IMap'\n\nimport * as Map01 from '@app/resources/maps/Map-01.json'\nimport * as Map02 from '@app/resources/maps/Map-02.json'\n\nconst Maps: { [key: string]: IMap } = {\n  Map01,\n  Map02,\n}\n\nexport const totalNumberOfMaps = Object.keys(Maps).length\n\nexport default function getMapData(levelNumber: number): IMap {\n  const zeroPaddedLevelNumber = String(levelNumber).padStart(2, '0')\n  return Maps[`Map${zeroPaddedLevelNumber}`]\n}","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\n\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = '50, 120, 50'\n  protected static closedColor = '180, 50, 50'\n  protected static opacityBaseline = 0.05\n  protected static opacityRange    = 0.2\n\n  private opacity = Portal.opacityRange\n\n  // Adjust for animation feel\n  private animationElapsed              = 0    // Milliseconds\n  private animationLength               = 4000 // Milliseconds\n  private animationCompletionPercentage = 0.0  // 0.0 - 1.0\n\n  draw(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public advanceAnimation() {\n    this.animationElapsed = (this.animationElapsed + GameTime.elapsedTimeFactor) % this.animationLength\n\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n\n    const sineFunction = Math.sin(this.animationCompletionPercentage * (Math.PI * 2)) // returns: -1 to 1 (approximately, because of float arithmetic)\n\n    this.opacity = Portal.opacityBaseline + ((sineFunction + 1) / 2) * Portal.opacityRange\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return `rgba(${Portal.openColor}, ${this.opacity})`\n    }\n    else {\n      return `rgba(${Portal.closedColor}, ${this.opacity})`\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport GameTime from '@app/infrastructure/GameTime'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport DamageNumbers, { DamageNumberColors, DamageNumberFactory } from '@app/domain/widgets/DamageNumbers'\n\nimport SoundFX from '@app/audio/SoundFX'\nimport CreatureState from '../CreatureState'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n\n  // TODO: Adjust for attack feeling\n  private attackSpeed = 0.1 // seconds\n  private attackCooldown = 0\n  private maxAttackCooldown = (1000 * this.attackSpeed) / CONFIG.GAME_SPEED\n\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super(x, y, new CollisionBox(12, 12), 0.18, 1)\n\n    // Widgets\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_ON_PLAYER) {\n      this.widgets.damageNumbers = new DamageNumbers() // TODO: Move to Creature?\n    }\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls() // Must come after move()\n    this.updateTileDeltas()         // Must come after adjustCollisionWithWalls()\n    this.updateMapPosition()        // Must come after adjustCollisionWithWalls()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n    Object.values(this.widgets).forEach(widget => widget.update()) // Update widgets\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        this.movingDirections.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        this.movingDirections.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        this.movingDirections.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        this.movingDirections.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public shoot(): void {\n    if (this.attackCooldown >= 0) {\n      this.attackCooldown -= GameTime.frameElapsedTime\n      if (this.attackCooldown < 0) {\n        this.attackCooldown = 0\n      }\n    }\n\n    if (this.shooting === false) {\n      return\n    }\n\n    if (this.attackCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG()\n    }\n  }\n\n  protected resetAttackCooldown() {\n    this.attackCooldown = this.maxAttackCooldown\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n\n    if (this.widgets.damageNumbers) {\n      this.widgets.damageNumbers.push(DamageNumberFactory.create(this.x, this.y, this.collisionBox, damageAmount, DamageNumberColors.gray))\n    }\n\n    if (this.health <= 0) {\n      this.die()\n    }\n    else {\n      SoundFX.playPlayerHit()\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n\n    Object.values(this.widgets).forEach(widget => widget.render(this.x, this.y)) // Render widgets\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n       0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n       0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        if (e.state >= CreatureState.Dying) {\n          return\n        }\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n\n    SoundFX.playPlayerDeath()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport CreatureState from '@app/domain/CreatureState'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n\n        if (e.state >= CreatureState.Dying) {\n          return\n        }\n\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Game from \"@app/infrastructure/game/Game\"\nimport GameTime from '@app/infrastructure/GameTime'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport GAME_STATES from \"@app/infrastructure/game/game_states/GameStates\"\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport interface IWidget {\n  update(): void\n  render(playerX: number, playerY: number): void\n}\n\nexport enum DamageNumberColors {\n  red    = '220, 50, 50',\n  yellow = '180, 180, 50',\n  gray   = '180, 180, 180',\n}\n\nexport class DamageNumberFactory {\n  public static create(\n    x: number,\n    y: number,\n    collisionBox: CollisionBox,\n    damage: number,\n    color: DamageNumberColors = DamageNumberColors.red\n  ): DamageNumber {\n    return new DamageNumber(\n      x,\n      y - collisionBox.halfHeight * 0.9,\n      (Math.random() * collisionBox.height)       - collisionBox.halfHeight,\n      (Math.random() * collisionBox.width  / 1.5) - collisionBox.halfWidth / 1.5,\n      damage.toString(),\n      color\n    )\n  }\n}\n\nexport class DamageNumber {\n  constructor(\n    public x: number,\n    public y: number,\n    protected randomFactorX: number,\n    protected randomFactorY: number,\n    private damage: string,\n    private color: string\n  ) {\n    this.damageTextHalfWidth = (this.damage.length * this.fontWidth) / 2\n  }\n\n  public animationFinished = false\n\n  // Adjust for animation feel\n  private animationElapsed              = 0   // Milliseconds\n  private animationLength               = 800 // Milliseconds\n  private animationCompletionPercentage = 0.0 // 0.0 - 1.0\n  private maxHeight                     = 30  // px\n\n  public advanceAnimation() {\n    this.animationElapsed += GameTime.elapsedTimeFactor\n    this.animationCompletionPercentage = this.animationElapsed / this.animationLength\n    if (this.animationHasFinished()) {\n      this.animationFinished = true\n    }\n  }\n  public animationHasFinished() {\n    return (this.animationElapsed >= this.animationLength)\n  }\n\n  private fontSize = 8\n  private font = `${this.fontSize}px Monospace`\n  private fontWidth = this.fontSize / 2\n  private damageTextHalfWidth: number = 0\n\n  public draw(playerX: number, playerY: number) {\n    context.beginPath()\n      const opacity = 1 - this.animationCompletionPercentage\n      context.fillStyle = `rgba(${this.color}, ${opacity})`\n      context.font = this.font\n      context.fillText(\n        `${this.damage}`,\n        this.randomFactorX + (this.x + Canvas.center.x - playerX) - this.damageTextHalfWidth,\n        this.randomFactorY + (this.y + Canvas.center.y - playerY) - (this.animationCompletionPercentage * this.maxHeight),\n      )\n    context.stroke()\n  }\n}\n\nexport default class DamageNumbers implements IWidget {\n\n  private damageNumbers: DamageNumber[] = []\n\n  public update(): void {\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.damageNumbers.forEach((dmgNum, i) => {\n        dmgNum.advanceAnimation()\n\n        if (dmgNum.animationFinished === true) {\n          this.damageNumbers.splice(i, 1) // Remove the DamageNumber\n        }\n      })\n    }\n  }\n\n  public render(playerX: number, playerY: number): void {\n    if (CONFIG.FEATURES.DAMAGE_NUMBERS_SHOW) {\n      this.feature_drawDamageNumbers(playerX, playerY)\n    }\n  }\n\n  public push(damageNumber: DamageNumber): void {\n    this.damageNumbers.push(damageNumber)\n  }\n\n\n  public feature_drawDamageNumbers(playerX: number, playerY: number) {\n    this.damageNumbers.forEach(dmgNumber => dmgNumber.draw(playerX, playerY))\n  }\n}\n\nexport type Widget = IWidget & DamageNumbers","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport ZergSprite from './sprites/ZergSprite'\nimport DecaySprite from './sprites/DecaySprite'\n\nexport default class Sprites {\n  public static Zerg : CreatureSprite = new ZergSprite()\n  public static Decay: CreatureSprite = new DecaySprite()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Decay.load(() => setLoadedPercentage(0.5))\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Creature from '@app/domain/Creature'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  protected abstract url: string\n  public abstract draw(c: Creature, playerCoordinates: Point, animationSpritePosition?: number): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\n\nimport CreatureSprite from './CreatureSprite'\nimport Creature from '@app/domain/Creature'\n\nexport default class DecaySprite extends CreatureSprite {\n  public url: string = './graphics/spritesheets/decay.png'\n\n\n  private spriteProperties = {\n    decay: {\n      width: 56,\n      height: 56,\n      gapX: 3,\n      gapY: 3,\n    }\n  }\n\n  private manuallyCalculatedSprites = {\n    decay: [\n      {\n        sy: 2 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n      {\n        sy: 1 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n      {\n        sy: 0 * (this.spriteProperties.decay.height + this.spriteProperties.decay.gapY) + 2,\n      },\n    ]\n  }\n\n  constructor() {\n    super()\n  }\n\n  public draw(creature: Creature, playerCoordinates: Point, animationSpritePosition: number) {\n    this.drawSpritedecay(creature, playerCoordinates, animationSpritePosition)\n  }\n\n  private drawSpritedecay(\n    creature: Creature,\n    playerCoordinates: Point,\n    animationSpritePosition: number\n  ) {\n\n    const { x, y } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    const desinationWidth  = Math.floor(this.spriteProperties.decay.width  * (creature.collisionBox.width  / 15))\n    const desinationHeight = Math.floor(this.spriteProperties.decay.height * (creature.collisionBox.height / 20))\n\n    const totalColumnsInSprite = 4\n    const randomSxColumn = (creature.x + creature.y) % totalColumnsInSprite\n    const randomSx = 2 + (randomSxColumn * (this.spriteProperties.decay.width + this.spriteProperties.decay.gapX))\n\n    context.drawImage(\n      this.spriteSheet,\n      randomSx,\n      this.manuallyCalculatedSprites.decay[animationSpritePosition].sy,\n      this.spriteProperties.decay.width,  // Draw width\n      this.spriteProperties.decay.height, // Draw height\n      Canvas.center.x + (x - px - desinationWidth  / 2), // Canvas Desination X\n      Canvas.center.y + (y - py - desinationHeight / 2), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\n\nimport CreatureSprite from './CreatureSprite'\nimport Creature from '@app/domain/Creature'\n\nexport default class ZergSprite extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n\n  private spriteProperties = {\n    default: {\n      width: 32,\n      height: 32,\n    },\n    dying: {\n      width: 65,\n      height: 53,\n      gapX: 3,\n      sy: 548,\n    }\n  }\n\n  private manuallyCalculatedSprites = {\n    dying: [\n      {\n        sx: 0 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 1 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 2 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 3 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 4 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 5 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n      {\n        sx: 6 * (this.spriteProperties.dying.width + this.spriteProperties.dying.gapX) + 2,\n        sy: this.spriteProperties.dying.sy,\n      },\n    ]\n  }\n\n  constructor() {\n    super()\n  }\n\n  public draw(creature: Creature, playerCoordinates: Point, animationSpritePosition: number) {\n    if (creature.state === CreatureState.Dying) {\n      this.drawSpriteDying(creature, playerCoordinates, animationSpritePosition)\n    }\n    else {\n      const spriteWidth  = this.spriteProperties.default.width\n      const spriteHeight = this.spriteProperties.default.height\n      const spriteStep: Point = { x: spriteWidth + 11, y: spriteHeight + 10 }\n      const spriteOffsets: Point = this.getSpriteOffsets(creature.state, spriteStep)\n      const spriteLocation = this.spriteLocations[creature.direction]\n      this.drawSprite(creature, playerCoordinates, spriteOffsets, spriteStep, spriteLocation, spriteWidth, spriteHeight, animationSpritePosition)\n    }\n  }\n\n  private getSpriteOffsets(creatureState: CreatureState, spriteStep: Point) {\n    const defaultSpriteOffset = {\n      x: 7,\n      y: 5\n    }\n    switch (creatureState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return defaultSpriteOffset\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: defaultSpriteOffset.x,\n          y: defaultSpriteOffset.y + (ATTACK_SPRITES_ROW * spriteStep.y)\n        }\n    }\n  }\n\n  private drawSpriteDying(\n    creature: Creature,\n    playerCoordinates: Point,\n    animationSpritePosition: number\n  ) {\n\n    const { x, y } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    const desinationWidth  = Math.floor(this.spriteProperties.dying.width  * (creature.collisionBox.width  / 20))\n    const desinationHeight = Math.floor(this.spriteProperties.dying.height * (creature.collisionBox.height / 20))\n\n    context.drawImage(\n      this.spriteSheet,\n      this.manuallyCalculatedSprites.dying[animationSpritePosition].sx,\n      this.manuallyCalculatedSprites.dying[animationSpritePosition].sy,\n      this.spriteProperties.dying.width,  // Draw width\n      this.spriteProperties.dying.height, // Draw height\n      Canvas.center.x + (x - px - desinationWidth  / 2), // Canvas Desination X\n      Canvas.center.y + (y - py - desinationHeight / 2), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n  }\n\n  private drawSprite(\n    creature: Creature,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteStep: Point,\n    spriteLocation: { col: number, flip: boolean },\n    spriteWidth: number,\n    spriteHeight: number,\n    animationSpritePosition: number,\n  ) {\n\n    const { x, y, collisionBox: cBox } = creature\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    const desinationWidth  = creature.collisionBox.width  + 2\n    const desinationHeight = creature.collisionBox.height + 2\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + spriteStep.y * Math.floor(animationSpritePosition),\n      spriteWidth,\n      spriteHeight,\n      spriteLocation.flip ? 0 - spriteWidth / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                   : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      desinationWidth,\n      desinationHeight,\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\ncontext.imageSmoothingEnabled = false // Disables anti-aliasing on Chrome\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n\nexport enum MovingDirections {\n  up    = 'up',\n  right = 'right',\n  down  = 'down',\n  left  = 'left',\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(lastFrameTime: number, frameElapsedTime: number): void {\n    if (!lastFrameTime) {\n      FPS = 0\n    } else {\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n    }\n  }\n\n  public static debug_drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class GameTime {\n  public static readonly ONE_SECOND = 1000\n\n  public static previousTimestamp = 0 // Milliseconds\n  public static frameElapsedTime  = 0 // Milliseconds\n\n  // Determines the game & animation speed\n  public static elapsedTimeFactor: number\n\n  public static setFrameElapsedTime(t: number) {\n    GameTime.frameElapsedTime  = t\n    GameTime.elapsedTimeFactor = CONFIG.GAME_SPEED * GameTime.frameElapsedTime\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\nimport { Pi2Decimals } from './math/MathUtils'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Pi2Decimals / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Pi2Decimals / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Pi2Decimals / 2 && angleBetweenNodes < Pi2Decimals) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === Pi2Decimals) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals && angleBetweenNodes < -Pi2Decimals / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -Pi2Decimals / 2) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Pi2Decimals / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\nimport GameTime from '../GameTime'\nimport FrameRate from '../FrameRate'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop(0)\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(timestamp: number): void {\n\n    if (GameTime.previousTimestamp === undefined) {\n      GameTime.previousTimestamp = timestamp\n    }\n    GameTime.setFrameElapsedTime(timestamp - GameTime.previousTimestamp)\n  \n    this.update()\n    this.render()\n    FrameRate.calculateFrameRate(GameTime.previousTimestamp, GameTime.frameElapsedTime)\n  \n    GameTime.previousTimestamp = timestamp\n    window.requestAnimationFrame((ts) => this.gameLoop(ts))\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.debug_drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStateLevelCleared implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLevelClearedStatistics()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    if (e.keyCode === KEYBOARD_KEYS.ENTER) {\n      if (Level.isLastLevel()) {\n        Level.resetToStartingLevel()\n        Game.stateManager.setState(GAME_STATES.VICTORY)  \n      } else {\n        Level.nextLevel()\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n      }\n    }\n  }\n\n  private drawLevelClearedStatistics(): void {\n    context.beginPath()\n      // Title\n      context.fillStyle = '#5555ff'\n      context.font = '22px Monospace'\n      context.fillText(\n        `Level ${Level.currentLevel} Cleared!`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2)\n      )\n      \n      // Level Time\n      context.font = '16px Monospace'\n      context.fillStyle = '#9999ff'\n      context.fillText(\n        `Time: ${Math.round(LevelTimer.timeSpentOnCurrentLevel / 1000)} seconds`,\n        CONFIG.CANVAS_WIDTH / 2 - 100,\n        (CONFIG.CANVAS_HEIGHT / 2) + 30\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GameTime from '@app/infrastructure/GameTime'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationProgress: number = 0\n  private animationLength: number = GameTime.ONE_SECOND\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationProgress = (this.animationProgress + GameTime.frameElapsedTime) % this.animationLength\n    if (this.animationProgress >= this.animationLength / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Level, { LevelTimer } from '@app/domain/Level'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForLevelClearedCondition()\n\n      LevelTimer.incrementTimeSpentOnCurrentLevel()\n    } else {\n      Level.resetToStartingLevel()\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n    if (CONFIG.DEBUG.SHOW_LEVEL_TIME) {\n      LevelTimer.debug_displayTimeSpentOnCurrentLevel()\n    }\n  }\n\n  private startNewGame(): void {\n    this.map = new Map()\n    this.player = this.map.player\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForLevelClearedCondition() {\n    if ( // TODO: Extract Level Cleared conditions (they won't be the same for every level)\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n        Game.stateManager.setState(GAME_STATES.LEVEL_CLEARED)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawVictoryScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawVictoryScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStateLevelCleared from './GameStateLevelCleared'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING       : new GameStateLoading(),\n  MAIN_MENU     : new GameStateMainMenu(),\n  PLAYING       : new GameStatePlaying(),\n  LEVEL_CLEARED : new GameStateLevelCleared(),\n  PAUSED        : new GameStatePaused(),\n  GAME_OVER     : new GameStateGameOver(),\n  VICTORY       : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","export const Pi2Decimals = +Math.PI.toFixed(2)\n\nexport function random(min: number, max: number) {\n  return min + Math.floor(Math.random() * (max - min + 1))\n}","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n      player.movingDirections.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n      player.movingDirections.left = true\n    }\n    else {\n      player.moving.left = false\n      player.movingDirections.left = false\n\n      player.moving.right = false\n      player.movingDirections.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n      player.movingDirections.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n      player.movingDirections.up = true\n    }\n    else {\n      player.moving.up = false\n      player.movingDirections.up = false\n\n      player.moving.down = false\n      player.movingDirections.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","PLAYER_DEATH","SMG","CRATE_HIT","PLAYER_HIT","ENEMY_ATTACK","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","gainNode","createGain","gain","value","connect","destination","start","SMG_INDEX","length","PLAYER_HIT_READY","PLAYER_HIT_INDEX","setTimeout","randomIndex","Math","floor","random","ENEMY_HIT_READY","advanceAnimation","animationProgress","elapsedTimeFactor","animationProgressPercentage","animationLength","animationSpritePosition","numberOfSpritesInAnimation","animationFinished","resetAnimation","draw","c","playerCoordinates","sprite","constructor","x","y","collisionBox","speed","healthPercentage","prevHistoryLength","prevX","prevY","maxHealth","state","Idling","previousState","movingDirections","left","right","up","down","moving","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","widgets","movementAccumulator","maxSpeed","maxSpeedDiagonal","sin","initializeHealth","updateMapPosition","resetMoving","resetBlocked","calculateNextCoordinates","nextX","nextY","isDiagonalMovement","calculateMovementAmountPixels","MovingDirections","move","horizontalMovementControlsAreNotJammed","verticalMovementControlsAreNotJammed","direction","accumulate","movementAmount","movementAmountPixels","movementAmountDecimalPart","row","CONFIG","TILE_SIZE","col","updateTileDeltas","checkIfBlockedByCreature","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","mapX","width","SWVertexRow","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","every","i","yUnchanged","health","getHealthColor","CreatureState","Level","currentLevel","startingLevel","LevelTimer","reset","lastLevel","totalNumberOfMaps","timeSpentOnCurrentLevel","frameElapsedTime","beginPath","fillStyle","font","levelTimeInSeconds","round","fillText","CANVAS_HEIGHT","stroke","ConcreteEnemy","pathfindingTimerStart","super","attackSpeed","pathfindingTimer","pathfindingInterval","animations","ConcreteEnemyAnimationIdling","Moving","ConcreteEnemyAnimationMoving","Attacking","ConcreteEnemyAnimationAttacking","Dying","ConcreteEnemyAnimationDying","Decaying","ConcreteEnemyAnimationDecaying","update","player","stateManager","getState","PLAYING","target","stuck","checkIfStuck","setState","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","checkForCollisionWithOtherEnemies","checkForCollisionWithPlayer","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","ENEMY_STATE","debug_drawState","Removed","generatePathNodes","abs","findShortestPath","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","moveTo","center","lineTo","toString","p","forEach","n","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Zerg","Decay","Enemy","damageNumbers","Object","values","widget","render","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","yIsStatic","attackCooldown","playEnemyAttack","dealDamage","GAME_SPEED","takeDamage","damageAmount","DamageNumberFactory","create","die","playEnemyHit","playEnemyDeath","getDamage","newState","resetAnimations","a","Map","mapData","loadMap","enemies","filter","enemiesDecaying","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","getDecayingOnScreen","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","WallGray","WallGreen","WallBlue","Maps","Map01","Map02","keys","levelNumber","zeroPaddedLevelNumber","String","padStart","color","destructable","Portal","opacity","opacityRange","animationElapsed","animationCompletionPercentage","getColor","rect","fill","sineFunction","PI","opacityBaseline","openColor","closedColor","Wall","playWallHit","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","maxAttackCooldown","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","s","d","keyupHandler","FEATURES","DAMAGE_NUMBERS_ON_PLAYER","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","setShooting","isShooting","dx","dy","xVel","yVel","SCATTER_PROJECTILES","randomFactorX","randomFactorY","playSMG","DamageNumberColors","gray","playPlayerHit","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","playPlayerDeath","directionX","directionY","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","intermediateIntervalX","intermediateIntervalY","point","red","DamageNumber","maxHeight","fontSize","fontWidth","damageTextHalfWidth","animationHasFinished","dmgNum","DAMAGE_NUMBERS_SHOW","feature_drawDamageNumbers","damageNumber","dmgNumber","Sprites","callback","_reject","spriteSheet","Image","src","url","DecaySprite","spriteProperties","decay","gapX","gapY","manuallyCalculatedSprites","sy","creature","drawSpritedecay","px","py","desinationWidth","desinationHeight","randomSx","drawImage","ZergSprite","spriteLocations","flip","NE","SE","SW","NW","default","dying","sx","drawSpriteDying","spriteWidth","spriteHeight","spriteStep","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","creatureState","defaultSpriteOffset","cBox","save","translate","scale","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","FPS_ARR","FPS","lastFrameTime","unshift","reduce","sum","current","GameAssets","GameTime","t","ONE_SECOND","previousTimestamp","startRow","startCol","path","rowEnd","colEnd","PathNode","enemy","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","Pi2Decimals","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","timestamp","undefined","setFrameElapsedTime","calculateFrameRate","requestAnimationFrame","ts","clear","debug_drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","isLastLevel","resetToStartingLevel","VICTORY","nextLevel","drawLevelClearedStatistics","drawLoadingDialog","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForLevelClearedCondition","incrementTimeSpentOnCurrentLevel","GAME_OVER","SHOW_LEVEL_TIME","debug_displayTimeSpentOnCurrentLevel","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","LEVEL_CLEARED","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","drawVictoryScreen","GAME_STATES","atan2","min","max","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}