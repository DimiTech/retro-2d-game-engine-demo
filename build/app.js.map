{"version":3,"file":"app.js","mappings":"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","sources":["webpack://retro-2d-game-engine/./src/app/audio/AudioBufferLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioContext.ts","webpack://retro-2d-game-engine/./src/app/audio/AudioLoader.ts","webpack://retro-2d-game-engine/./src/app/audio/Mixer.ts","webpack://retro-2d-game-engine/./src/app/audio/SoundFX.ts","webpack://retro-2d-game-engine/./src/app/domain/Creature.ts","webpack://retro-2d-game-engine/./src/app/domain/CreatureState.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/ConcreteEnemy.ts","webpack://retro-2d-game-engine/./src/app/domain/enemies/Enemy.ts","webpack://retro-2d-game-engine/./src/app/domain/map/Map.ts","webpack://retro-2d-game-engine/./src/app/domain/map/MapKeys.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/GameObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/Portal.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/portal/PortalObject.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/Wall.ts","webpack://retro-2d-game-engine/./src/app/domain/objects/wall/WallFactory.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Crosshair.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Player.ts","webpack://retro-2d-game-engine/./src/app/domain/player/Projectile.ts","webpack://retro-2d-game-engine/./src/app/graphics/GraphicsLoader.ts","webpack://retro-2d-game-engine/./src/app/graphics/Sprites.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/CreatureSprite.ts","webpack://retro-2d-game-engine/./src/app/graphics/sprites/SpriteZerg.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Canvas.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/CollisionBox.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Directions.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/FrameRate.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/GameAssets.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Pathfinding.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/Raycaster.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/Game.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateGameOver.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateLoading.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateMainMenu.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateManager.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePaused.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStatePlaying.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStateVictory.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/game/game_states/GameStates.ts","webpack://retro-2d-game-engine/./src/app/infrastructure/geometry/Point.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Gamepads.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Keyboard.ts","webpack://retro-2d-game-engine/./src/app/peripherals/Mouse.ts","webpack://retro-2d-game-engine/./src/app/peripherals/constants/KeyCodes.ts","webpack://retro-2d-game-engine/webpack/bootstrap","webpack://retro-2d-game-engine/./src/main.ts"],"sourcesContent":["import context from './AudioContext'\n\nexport function load(URI: string): Promise<AudioBuffer> {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest()\n    request.open('GET', URI, true)\n    request.responseType = 'arraybuffer'\n    request.onload = () => {\n      context.decodeAudioData(request.response, buffer => {\n        return resolve(buffer)\n      })\n    }\n    request.send()\n  })\n}\n","const context: AudioContext = new AudioContext()\n\nexport default context\n","import SoundFX from './SoundFX'\n\nexport default class AudioLoader {\n  public static async load(loadCallback: (percentage: number) => void) {\n    await SoundFX.load(loadCallback)\n  }\n}\n","export default class Mixer {\n  private static _musicVolume   : number = 0.3\n  private static _soundFxVolume : number = 0.15\n\n  public static get musicVolume(): number {\n    return this._musicVolume\n  }\n  public static set musicVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._musicVolume = vol\n    }\n  }\n\n  public static get soundFxVolume(): number {\n    return this._soundFxVolume\n  }\n  public static set soundFxVolume(vol: number) {\n    if (vol >= 0 && vol <= 1) {\n      this._soundFxVolume = vol\n    }\n  }\n}\n","import Mixer from './Mixer'\nimport context from './AudioContext'\nimport { load } from './AudioBufferLoader'\n\nexport default class SoundFX {\n  private static SMG: AudioBuffer[] = []\n  private static SMG_INDEX = 0\n\n  private static CRATE_HIT: AudioBuffer[] = []\n\n  private static ENEMY_HIT: AudioBuffer[] = []\n  private static ENEMY_HIT_INDEX = 0\n  private static ENEMY_HIT_READY: boolean = true\n\n  private static ENEMY_DEATH: AudioBuffer[] = []\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    const soundFxFilePromises = [\n      load('./audio/smg_1.wav'),\n      load('./audio/smg_2.wav'),\n      load('./audio/smg_3.wav'),\n      load('./audio/smg_4.wav'),\n      load('./audio/smg_5.wav'),\n\n      load('./audio/crate_hit_1.wav'),\n\n      load('./audio/enemy_hit_1.mp3'),\n      load('./audio/enemy_hit_2.mp3'),\n      load('./audio/enemy_hit_3.mp3'),\n      load('./audio/enemy_hit_4.mp3'),\n      load('./audio/enemy_hit_5.mp3'),\n\n      load('./audio/enemy_die_1.mp3'),\n    ]\n\n    // TODO: Show percentage\n    const soundFxFiles = await Promise.all(soundFxFilePromises)\n\n    this.SMG[0] = soundFxFiles[0]\n    this.SMG[1] = soundFxFiles[1]\n    this.SMG[2] = soundFxFiles[2]\n    this.SMG[3] = soundFxFiles[3]\n    this.SMG[4] = soundFxFiles[4]\n\n    this.CRATE_HIT[0] = soundFxFiles[5]\n\n    this.ENEMY_HIT[0] = soundFxFiles[6]\n    this.ENEMY_HIT[1] = soundFxFiles[7]\n    this.ENEMY_HIT[2] = soundFxFiles[8]\n    this.ENEMY_HIT[3] = soundFxFiles[9]\n    this.ENEMY_HIT[4] = soundFxFiles[10]\n\n    this.ENEMY_DEATH[0] = soundFxFiles[11]\n    setLoadedPercentage(1.0)\n  }\n\n  public static playSMG(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.SMG[this.SMG_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume * 0.2\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.SMG_INDEX = ++this.SMG_INDEX % this.SMG.length // Shuffle the SMG FX\n  }\n\n  public static playEnemyHit(): void {\n    if (this.ENEMY_HIT_READY === false) {\n      return\n    }\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_HIT[this.ENEMY_HIT_INDEX]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n    this.ENEMY_HIT_INDEX = ++this.ENEMY_HIT_INDEX % this.ENEMY_HIT.length // Shuffle\n\n    this.ENEMY_HIT_READY = false\n    setTimeout(() => { this.ENEMY_HIT_READY = true }, 500)\n  }\n\n  public static playEnemyDeath(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.ENEMY_DEATH[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n\n  public static playWallHit(): void {\n    const playSound = context.createBufferSource()\n    playSound.buffer = this.CRATE_HIT[0]\n\n    const gainNode = context.createGain()\n    gainNode.gain.value = Mixer.soundFxVolume\n    playSound.connect(gainNode)\n\n    gainNode.connect(context.destination)\n\n    playSound.start()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport CollisionBox, { collisionBoxesIntersect, ICollidable } from '@app/infrastructure/CollisionBox'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Map from '@app/domain/map/Map'\nimport { Directions } from '@app/infrastructure/Directions'\n\nexport default abstract class Creature {\n  public prevX: number[] = [] // TODO: Make private?\n  public prevY: number[] = [] // TODO: Make private?\n  public x: number\n  public y: number\n  public nextX: number\n  public nextY: number\n  public row: number\n  public col: number\n  public maxHealth = 100\n  public health: number\n\n  public maxSpeed: number\n  public maxSpeedDiagonal: number\n\n  public state: CreatureState = CreatureState.Idling\n  public previousState: CreatureState = CreatureState.Idling // TODO: Use `previousState` for something? (Currently it's unused)\n\n  public animationPosition: number = 0\n\n  public direction: Directions\n  public moving = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public blocked = {\n    left  : false,\n    right : false,\n    up    : false,\n    down  : false,\n  }\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  protected resetMoving(): void {\n    this.moving.left  = false\n    this.moving.right = false\n    this.moving.up    = false\n    this.moving.down  = false\n  }\n\n  protected resetBlocked(): void {\n    this.blocked.up    = false\n    this.blocked.down  = false\n    this.blocked.left  = false\n    this.blocked.right = false\n  }\n\n  protected calculateNextCoordinates(): void {\n    this.nextX = this.x\n    this.nextY = this.y\n\n    if (this.moving.left) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX -= this.maxSpeedDiagonal\n      } else {\n        this.nextX -= this.maxSpeed\n      }\n    }\n    if (this.moving.right) {\n      if (this.moving.up || this.moving.down) {\n        this.nextX += this.maxSpeedDiagonal\n      } else {\n        this.nextX += this.maxSpeed\n      }\n    }\n    if (this.moving.up) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY -= this.maxSpeedDiagonal\n      } else {\n        this.nextY -= this.maxSpeed\n      }\n    }\n    if (this.moving.down) {\n      if (this.moving.left || this.moving.right) {\n        this.nextY += this.maxSpeedDiagonal\n      } else {\n        this.nextY += this.maxSpeed\n      }\n    }\n  }\n\n  protected checkIfBlockedByCreature(c: Creature, nextCreatureState: ICollidable) {\n    if (collisionBoxesIntersect(nextCreatureState, c)) {\n      let intersectionX: number\n      let intersectionY: number\n      if (nextCreatureState.x < c.x) {\n        intersectionX = (nextCreatureState.x + nextCreatureState.collisionBox.halfWidth) - (c.x - c.collisionBox.halfWidth)\n      } else if (nextCreatureState.x > c.x) {\n        intersectionX = (c.x + c.collisionBox.halfWidth) - (nextCreatureState.x - nextCreatureState.collisionBox.halfWidth)\n      }\n      if (nextCreatureState.y < c.y) {\n        intersectionY = (nextCreatureState.y + nextCreatureState.collisionBox.halfHeight) - (c.y - c.collisionBox.halfHeight)\n      } else if (nextCreatureState.y > c.y) {\n        intersectionY = (c.y + c.collisionBox.halfHeight) - (nextCreatureState.y - nextCreatureState.collisionBox.halfHeight)\n      }\n      if (!intersectionX || intersectionX >= intersectionY) {\n        if (nextCreatureState.y < c.y) {\n          this.blocked.down = true\n        } else {\n          this.blocked.up = true\n        }\n      } else if (!intersectionY || intersectionX < intersectionY) {\n        if (nextCreatureState.x < c.x) {\n          this.blocked.right = true\n        } else {\n          this.blocked.left = true\n        }\n      }\n    }\n  }\n\n  protected adjustCollisionWithWalls(): void {\n    let wall\n    if (Map.walls[this.row]) {\n      if (this.moving.left) {\n        wall = Map.walls[this.row][this.col - 1] // West\n        if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n          this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n        }\n\n        const SWVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SWVertexRow && SWVertexRow !== this.row) { // SW vertex overflows the player grid\n          wall = Map.walls[SWVertexRow][this.col - 1] // South West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n\n        const NWVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (NWVertexRow && NWVertexRow !== this.row) { // NW vertex overflows the player grid\n          wall = Map.walls[NWVertexRow][this.col - 1] // North West\n          if (wall && this.x - this.collisionBox.halfWidth <= wall.mapX + wall.width) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxRight)) {\n              this.x = wall.mapX + wall.width + this.collisionBox.halfWidth + 1\n            }\n          }\n        }\n      }\n      if (this.moving.right) {\n        wall = Map.walls[this.row][this.col + 1] // East\n        if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n          this.x = wall.mapX - this.collisionBox.halfWidth - 1\n        }\n\n        const SEVertexRow = Math.floor((this.y + this.collisionBox.halfHeight - 1) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && SEVertexRow !== this.row) { // SE vertex overflows the player grid\n          wall = Map.walls[SEVertexRow][this.col + 1] // South East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.down && this.deltas.dyTop <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n\n        const NEVertexRow = Math.floor((this.y - this.collisionBox.halfHeight) / CONFIG.TILE_SIZE)\n        if (SEVertexRow && NEVertexRow !== this.row) { // NE vertex overflows the player grid\n          wall = Map.walls[NEVertexRow][this.col + 1] // North East\n          if (wall && this.x + this.collisionBox.halfWidth >= wall.mapX) {\n            if (!(this.moving.up && this.deltas.dyBottom <= this.deltas.dxLeft)) {\n              this.x = wall.mapX - this.collisionBox.halfWidth - 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row - 1]) {\n      if (this.moving.up) {\n        wall = Map.walls[this.row - 1][this.col] // North\n        if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n          this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n        }\n\n        const NEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n        if (NEVertexCol && NEVertexCol !== this.col) { // NE vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NEVertexCol] // North East\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.right && this.deltas.dyBottom > this.deltas.dxLeft)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n\n        const NWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n        if (NWVertexCol && NWVertexCol !== this.col) { // NW vertex overflows the player grid\n          wall = Map.walls[this.row - 1][NWVertexCol] // North West\n          if (wall && this.y - this.collisionBox.halfHeight <= wall.mapY + wall.height) {\n            if (!(this.moving.left && this.deltas.dyBottom > this.deltas.dxRight)) {\n              this.y = wall.mapY + wall.height + this.collisionBox.halfHeight + 1\n            }\n          }\n        }\n      }\n    }\n    if (Map.walls[this.row + 1]) {\n      if (this.moving.down) {\n        wall = Map.walls[this.row + 1][this.col] // South\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          this.y = wall.mapY - this.collisionBox.halfHeight - 1\n        }\n      }\n\n      const SEVertexCol = Math.floor((this.x + this.collisionBox.halfWidth - 1) / CONFIG.TILE_SIZE)\n      if (SEVertexCol && SEVertexCol !== this.col) { // SE vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SEVertexCol] // South East\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.right && this.deltas.dyTop > this.deltas.dxLeft)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n\n      const SWVertexCol = Math.floor((this.x - this.collisionBox.halfWidth) / CONFIG.TILE_SIZE)\n      if (SWVertexCol && SWVertexCol !== this.col) { // SW vertex overflows the player grid\n        wall = Map.walls[this.row + 1][SWVertexCol] // South West\n        if (wall && this.y + this.collisionBox.halfHeight >= wall.mapY) {\n          if (!(this.moving.left && this.deltas.dyTop > this.deltas.dxRight)) {\n            this.y = wall.mapY - this.collisionBox.halfHeight - 1\n          }\n        }\n      }\n    }\n  }\n\n  protected updatePreviousCoordinates(): void {\n    this.prevX.push(this.x)\n    if (this.prevX.length > 5) { this.prevX.shift() }\n\n    this.prevY.push(this.y)\n    if (this.prevY.length > 5) { this.prevY.shift() }\n  }\n\n  protected updateDirection(): void {\n    const direction: string[] = []\n\n    const dx = this.prevX[this.prevX.length - 1] - this.prevX[this.prevX.length - 2]\n    const dy = this.prevY[this.prevY.length - 1] - this.prevY[this.prevY.length - 2]\n\n    if (dy > 0) {\n      direction.push(Directions.S)\n    }\n    else if (dy < 0) {\n      direction.push(Directions.N)\n    }\n\n    if (dx > 0) {\n      direction.push(Directions.E)\n    }\n    else if (dx < 0) {\n      direction.push(Directions.W)\n    }\n\n    const directionString = direction.join('') || this.direction || 'S'\n\n    this.direction = Directions[directionString as keyof typeof Directions]\n  }\n\n  protected checkIfMoving(): boolean {\n    const xUnchanged = this.prevX[this.prevX.length - 1] === this.prevX[this.prevX.length - 2]\n    const yUnchanged = this.prevY[this.prevY.length - 1] === this.prevY[this.prevY.length - 2]\n    if (xUnchanged && yUnchanged) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  protected initializeHealth(healthPercentage: number = 1.0): void {\n    if (healthPercentage < 0.0 || healthPercentage > 1.0) {\n      healthPercentage = 1.0\n    }\n    this.health = this.maxHealth * healthPercentage\n  }\n\n  // TODO: The color strings can be moved to a single hash map in order to optimize & localize the color searches\n  protected getHealthColor(): string {\n    if (this.health <= this.maxHealth * 0.1) {\n      return '#FF5700'\n    } else if (this.health <= this.maxHealth * 0.2) {\n      return '#FF7B00'\n    } else if (this.health <= this.maxHealth * 0.3) {\n      return '#FF9E00'\n    } else if (this.health <= this.maxHealth * 0.4) {\n      return '#FFC100'\n    } else if (this.health <= this.maxHealth * 0.5) {\n      return '#FFE400'\n    } else if (this.health <= this.maxHealth * 0.6) {\n      return '#FFF600'\n    } else if (this.health <= this.maxHealth * 0.7) {\n      return '#E5FF00'\n    } else if (this.health <= this.maxHealth * 0.8) {\n      return '#D4FF00'\n    } else if (this.health <= this.maxHealth * 0.9) {\n      return '#B0FF00'\n    } else if (this.health < this.maxHealth) {\n      return '#8DFF00'\n    } else if (this.health === this.maxHealth) {\n      return '#6AFF00'\n    }\n  }\n\n  protected resetAnimation() {\n    this.animationPosition = 0\n  }\n\n  public setState(newState: CreatureState) {\n    this.previousState = this.state\n    this.state = newState\n    this.resetAnimation()\n  }\n}\n","enum CreatureState {\n  Idling,\n  Moving,\n  Attacking,\n  Dying,\n  Decaying,\n}\n\nexport default CreatureState\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Game from '@app/infrastructure/game/Game'\nimport GAME_STATES from '@app/infrastructure/game/game_states/GameStates'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport { generatePathNodes, findShortestPath, debug_drawPathNodes, drawNode } from '@app/infrastructure/Pathfinding'\n\nimport CreatureState from '@app/domain/CreatureState'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport Sprites from '@app/graphics/Sprites'\n\nexport default class ConcreteEnemy extends Enemy {\n  protected sprite: CreatureSprite = Sprites.Zerg\n  protected target: Point\n\n  protected attackSpeed = 32\n\n  constructor(\n    x: number,\n    y: number,\n    healthPercentage: number,\n    protected pathfindingInterval: number\n  ) {\n    super(x, y, new CollisionBox(14, 14), 1, healthPercentage)\n    this.updateMapPosition()\n  }\n\n  public update(player: Player, enemies: Enemy[]): void {\n    if (this.state === CreatureState.Dying) {\n      return\n    }\n    if (this.state === CreatureState.Decaying) {\n      return\n    }\n\n    if (!this.target) {\n      this.target = player\n    }\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n    this.updatePreviousCoordinates()\n\n    this.stuck = this.checkIfStuck() // TODO: Extract to state\n\n    if (\n      this.state !== CreatureState.Idling &&\n      this.state !== CreatureState.Attacking &&\n      this.checkIfMoving() === false\n    ) {\n      this.setState(CreatureState.Idling)\n    }\n\n    this.adjustCollisionWithWalls()\n    this.checkForCollisionWithPlayer(player)\n    this.checkForCollisionWithOtherEnemies(player)\n    this.distanceFromTarget = pointToPointDistance(\n      { x: player.x, y: player.y },\n      { x: this.x,   y: this.y   },\n    )\n\n    const targetIsInRange = this.targetInRange(player)\n    if (this.state !== CreatureState.Attacking && targetIsInRange) {\n      this.resetAttackCooldown()\n      this.setState(CreatureState.Attacking)\n    }\n\n    if (this.state === CreatureState.Attacking) {\n      if (targetIsInRange) {\n        this.attack(player)\n      } else {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    this.thereAreObstaclesBetweenPlayerAndThisEnemy =\n      Raycaster.determineIfThereAreObstaclesBetweenTwoPathNodes(this, player)\n\n    if ( // TODO: Clean this if statement up, if possible?\n      this.state === CreatureState.Idling ||\n      this.state === CreatureState.Moving\n    ) {\n      this.findPathToPlayer(player, this.thereAreObstaclesBetweenPlayerAndThisEnemy)\n\n      if (\n        this.state !== CreatureState.Moving &&\n        (\n          this.thereAreObstaclesBetweenPlayerAndThisEnemy === false ||\n          this.shortestPath.length > 0\n        )\n      ) {\n        this.setState(CreatureState.Moving)\n      }\n    }\n\n    if (this.state === CreatureState.Moving) {\n      this.move()\n    }\n\n    this.updateDirection() // TODO: This is based on movement, which is incorrect - fix it\n    this.updateTileDeltas()\n\n    if (Game.stateManager.getState() === GAME_STATES.PLAYING) {\n      this.advanceAnimation()\n    }\n  }\n\n  public draw(player: Player): void {\n    if (CONFIG.DEBUG.ENEMY_COLLISION_BOX) {\n      this.debug_drawCollisionBox(player)\n    }\n    if (CONFIG.DEBUG.ENEMY_STATE) {\n      this.debug_drawState(player)\n    }\n    if (CONFIG.DEBUG.RAY_TO_PLAYER) {\n      this.debug_drawRayToPlayer(player)\n    }\n    if (CONFIG.DEBUG.PATHFINDING_NODES) {\n      debug_drawPathNodes(this.pathfindingNodes, player, this.getHealthColor())\n    }\n\n    if (CONFIG.DEBUG.SHORTEST_PATH_TO_PLAYER) {\n      this.debug_drawShortestPathToPlayer(player)\n    }\n    this.sprite.draw(this, { x: player.x, y: player.y })\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playEnemyHit()\n    this.health -= damageAmount\n    if (this.health <= 0) {\n      this.die()\n    } else {\n      SoundFX.playEnemyHit()\n    }\n  }\n\n  public die() {\n    SoundFX.playEnemyDeath()\n    this.setState(CreatureState.Decaying)\n  }\n\n  protected advanceAnimation(): void {\n    if (this.state === CreatureState.Attacking) {\n      this.animationPosition = (this.animationPosition + 0.15) % this.sprite.numberOfSpritesInAnimation.attacking\n    } else if (this.state === CreatureState.Moving) {\n     this.animationPosition = (this.animationPosition + 0.25) % this.sprite.numberOfSpritesInAnimation.walking\n    }\n  }\n\n  private findPathToPlayer(player: Player, thereAreObstaclesBetweenPlayerAndThisEnemy: boolean) {\n    if (thereAreObstaclesBetweenPlayerAndThisEnemy) { // TODO: || this.isStuck()\n      if (this.pathfindingInterval === 0) {\n        this.pathfindingNodes = generatePathNodes(\n          Math.round(Math.abs(player.row + this.row) / 2),\n          Math.round(Math.abs(player.col + this.col) / 2),\n          this.collisionBox,\n        )\n        this.shortestPath = findShortestPath(this, player, this.pathfindingNodes)\n      }\n\n      this.pathfindingInterval = (this.pathfindingInterval + 1) % this.pathfindingPeriod\n\n      if (this.shortestPath.length > 0) {\n        this.followTheShortestPath()\n      }\n    }\n    else { // Target is in line of sight\n      if (this.pathfindingNodes) {\n        this.pathfindingNodes = null\n      }\n      if (this.shortestPath) {\n        this.shortestPath = []\n      }\n      this.moveTowardsPlayer(player)\n    }\n  }\n\n  private followTheShortestPath(): void {\n    // If the enemy is close to the path node, pop that node and move to the next one\n    let nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n    let nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    if (\n      this.shortestPath.length > 1 &&\n      Math.abs(nextNodeX - this.x) < 3 &&\n      Math.abs(nextNodeY - this.y) < 3\n    ) {\n      this.shortestPath.pop()\n      nextNodeX = this.shortestPath[this.shortestPath.length - 1].x\n      nextNodeY = this.shortestPath[this.shortestPath.length - 1].y\n    }\n    this.moveTowards(nextNodeX, nextNodeY)\n  }\n\n  private moveTowardsPlayer(player: Point): void {\n    if (this.distanceFromTarget > this.collisionBox.width) {\n      this.moveTowards(player.x, player.y)\n    }\n    else {\n      this.resetMoving()\n    }\n  }\n\n  private moveTowards(x: number, y: number): void {\n    this.resetMoving()\n\n    if (this.x < x) {\n      this.moving.right = true\n    }\n    else if (this.x > x) {\n      this.moving.left = true\n    }\n    if (this.y < y) {\n      this.moving.down = true\n    }\n    else if (this.y > y) {\n      this.moving.up = true\n    }\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private move(): void {\n    if (this.moving.left && !this.blocked.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right && !this.blocked.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up && !this.blocked.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down && !this.blocked.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n    this.updateMapPosition()\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private debug_drawCollisionBox(player: Player) {\n    context.strokeStyle = this.getHealthColor()\n    context.lineWidth = 0.2\n    context.beginPath()\n      // Since this is just for debugging purposes, there is no need to\n      // optimize/cache the vertex calculations.\n      context.moveTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n      context.lineTo(-0.5 + Canvas.center.x + (this.x - player.x) + this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth, -0.5 + Canvas.center.y + (this.y - player.y) + this.collisionBox.halfHeight)\n      context.lineTo( 0.5 + Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,  0.5 + Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight)\n    context.stroke()\n  }\n\n  private debug_drawState(player: Player) {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n      context.fillText(\n        this.state.toString(),\n        Canvas.center.x + (this.x - player.x) - this.collisionBox.halfWidth,\n        Canvas.center.y + (this.y - player.y) - this.collisionBox.halfHeight\n      )\n    context.stroke()\n  }\n\n  private debug_drawRayToPlayer(player: Player) {\n    if (this.thereAreObstaclesBetweenPlayerAndThisEnemy) {\n      context.strokeStyle = '#FFFF44'\n    } else {\n      context.strokeStyle = '#00F0FF'\n    }\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (this.x - player.x), Canvas.center.y + (this.y - player.y))\n      context.lineTo(Canvas.center.x, Canvas.center.y)\n    context.stroke()\n  }\n\n  private debug_drawShortestPathToPlayer(p: Player) {\n    this.shortestPath\n      .forEach((n, i) => {\n        drawNode(n, p, n.visited ? '#FF0000' : '#FF00FF')\n      })\n    if (this.shortestPath.length > 0) {\n      this.shortestPath.forEach((node, i) => {\n        this.debug_drawRayFromPointToPoint(node, this.shortestPath[i - 1] || p, p)\n      })\n    }\n  }\n\n  private debug_drawRayFromPointToPoint(p1: Point, p2: Point, player: Player) {\n    context.strokeStyle = '#FF00FF'\n    context.lineWidth = 0.2\n    context.beginPath()\n      context.moveTo(Canvas.center.x + (p2.x - player.x), Canvas.center.y + (p2.y - player.y))\n      context.lineTo(Canvas.center.x + (p1.x - player.x), Canvas.center.y + (p1.y - player.y))\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Creature from '@app/domain/Creature'\nimport Player from '@app/domain/player/Player'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport { PathNode } from '@app/infrastructure/Pathfinding'\nimport CreatureSprite from '@app/graphics/sprites/CreatureSprite'\nimport SoundFX from '@app/audio/SoundFX'\n\nimport Map from '../map/Map'\n\nexport default abstract class Enemy extends Creature {\n  protected stuck: boolean // TODO: Use stuck for something?\n\n  protected distanceFromTarget: number\n  protected thereAreObstaclesBetweenPlayerAndThisEnemy: boolean\n  protected pathfindingInterval: number = 0\n  protected pathfindingPeriod: number = 30\n  protected pathfindingNodes: PathNode[]\n  protected shortestPath: PathNode[] = []\n\n  protected sprite: CreatureSprite\n\n  protected readonly attackSpeed: number // Frames\n  protected attackCooldown: number\n\n  constructor(\n    public x: number,\n    public y: number,\n    collisionBox: CollisionBox,\n    maxSpeed: number,\n    healthPercentage: number,\n  ) {\n    super()\n    this.initializeHealth(healthPercentage)\n\n    this.maxSpeed = maxSpeed\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed)\n\n    this.collisionBox = collisionBox\n\n    this.attackCooldown = this.attackSpeed // TODO: Extract to initializeAttackParameters() or somehting...\n  }\n\n  public abstract draw(player: Player): void\n  public abstract update(player: Player, enemies: Enemy[]): void\n\n  public isOnScreen(playerX: number, playerY: number): boolean {\n    const offScreenOffset = CONFIG.TILE_SIZE * 2\n    return (\n      Math.abs(this.x - playerX) < CONFIG.CANVAS_WIDTH / 2 + offScreenOffset &&\n      Math.abs(this.y - playerY) < CONFIG.CANVAS_HEIGHT / 2 + offScreenOffset\n    )\n  }\n\n  public abstract takeDamage(damageAmount: number): void\n  protected abstract advanceAnimation(): void\n\n  protected checkForCollisionWithPlayer(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    this.checkIfBlockedByCreature(player, nextEnemyState)\n  }\n\n  protected checkForCollisionWithOtherEnemies(player: Player): void {\n    const nextEnemyState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesInScreenRangeFromThis = Map.getEnemiesOnScreen(this.x, this.y)\n\n    enemiesInScreenRangeFromThis.forEach((e) => {\n      if (this !== e) {\n        this.checkIfBlockedByCreature(e, nextEnemyState)\n      }\n    })\n  }\n\n  protected targetInRange(target: Creature) {\n    const sumOfCollisionBoxHalfDiagonals = (target.collisionBox.halfWidth + this.collisionBox.halfWidth) * Math.sqrt(2)\n    return this.distanceFromTarget < sumOfCollisionBoxHalfDiagonals\n  }\n  \n  protected resetAttackCooldown() {\n    this.attackCooldown = this.attackSpeed\n  }\n\n  protected checkIfStuck(): boolean {\n    const xIsStatic = this.prevX.every((x) => x === this.prevX[0])\n    const yIsStatic = this.prevY.every((y) => y === this.prevY[0])\n    if (xIsStatic && yIsStatic) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  protected attack(p: Player): void {\n    if (this.attackCooldown <= 0) {\n      this.resetAttackCooldown()\n\n      SoundFX.playSMG() // TODO: Change the SFX\n      this.dealDamage(p)\n    } else {\n      --this.attackCooldown\n    }\n  }\n\n  protected dealDamage(p: Player) {\n    p.takeDamage(this.getDamage())\n  }\n\n  // TODO: Implement damage range\n  protected getDamage() {\n    return 10\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\n\nimport Player from '@app/domain/player/Player'\nimport CreatureState from '@app/domain/CreatureState'\nimport ConcreteEnemy from '@app/domain/enemies/ConcreteEnemy'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport MapKeys, { isWall } from '@app/domain/map/MapKeys'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport WallFactory from '@app/domain/objects/wall/WallFactory'\nimport Portal from '@app/domain/objects/portal/Portal'\n\nimport IMap from './IMap'\nimport * as Map01 from '@app/resources/maps/Map-01.json'\n\nexport default class Map {\n  public static walls: Wall[][] = []\n  public static enemies: Enemy[] = []\n  public static exitPortal: Portal\n\n  public static getEnemiesOnScreen(playerX: number, playerY: number): Enemy[] {\n    return Map.enemies.filter(e => e.isOnScreen(playerX, playerY))\n  }\n\n  public static enemiesRemaining(): number {\n    return Map.enemies.length\n  }\n\n  constructor(private player: Player) {\n    this.loadMap(Map01)\n  }\n\n  public destroy() {\n    while (Map.enemies.length) {\n      Map.enemies.pop()\n    }\n  }\n\n  public update(): void {\n    Map.enemies.forEach((e, i) => {\n      e.update(this.player, Map.enemies)\n      if (e.state === CreatureState.Decaying) {\n        Map.enemies.splice(i, 1) // Remove the enemy\n        this.openPortalWhenAllEnemiesAreKilled()\n      }\n    })\n  }\n\n  private openPortalWhenAllEnemiesAreKilled() {\n    if (Map.exitPortal.isOpen === false && Map.enemies.length === 0) {\n      Map.exitPortal.open()\n    }\n  }\n\n  public draw(): void {\n    this.drawGameObjects()\n    Map.getEnemiesOnScreen(this.player.x, this.player.y)\n      .forEach(e => e.draw(this.player))\n  }\n\n  private drawGameObjects(): void {\n    const offsetLeft = this.player.deltas.dxLeft - Canvas.colRemainder\n    const offsetTop  = this.player.deltas.dyTop  - Canvas.rowRemainder\n\n    const rowStart = this.player.row - Canvas.halfRows\n    const colStart = this.player.col - Canvas.halfCols\n\n    // Limits the rendering range to only what is visible on the screen\n    let wall\n    for (let row = rowStart; row < rowStart + Canvas.rows + 1; ++row) {\n      for (let col = colStart - 1; col < colStart + Canvas.cols + 1; ++col) {\n        if (Map.walls[row] && Map.walls[row][col]) {\n          wall = Map.walls[row][col]\n          wall.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          wall.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          wall.draw()\n        }\n        if (Map.exitPortal.row === row && Map.exitPortal.col === col) {\n          Map.exitPortal.x = (col - colStart) * CONFIG.TILE_SIZE - offsetLeft\n          Map.exitPortal.y = (row - rowStart) * CONFIG.TILE_SIZE - offsetTop\n          Map.exitPortal.draw()\n        }\n      }\n    }\n  }\n\n  private loadMap(map: IMap): void {\n    this.loadGameObjects(map)\n    this.loadEnemies(map)\n  }\n\n  // Inefficient - provides clearer separation (loading happens once - so it's not a big deal)\n  private loadGameObjects(map: IMap) {\n    this.loadWalls(map)\n    this.loadExitPortal(map)\n  }\n\n  private loadWalls(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      Map.walls[row] = []\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        Map.walls[row][col] = null\n        if (isWall(mapKey)) {\n          Map.walls[row][col] = WallFactory.createWall(row, col, mapKey)\n        }\n      }\n    }\n  }\n\n  private loadExitPortal(map: IMap) {\n    for (let row = 0; row < map.gameObjects.length; ++row) {\n      for (let col = 0; col < map.gameObjects[row].length; ++col) {\n        const mapKey = map.gameObjects[row][col] \n        if (mapKey === MapKeys.ExitPortal) {\n          Map.exitPortal = new Portal(row, col)\n        }\n      }\n    }\n  }\n\n  private loadEnemies(map: IMap) {\n    map.enemies.forEach((e, i) => {\n      Map.enemies.push(new ConcreteEnemy(e.x, e.y, e.healthPercentage, i))\n    })\n  }\n}\n","enum MapKeys {\n  Empty      = 0,\n  WallGray   = 1,\n  WallGreen  = 2,\n  WallBlue   = 3,\n  ExitPortal = 9,\n}\n\nexport function isWall(mapKey: MapKeys) {\n  return MapKeys[mapKey].startsWith('Wall')\n}\n\nexport default MapKeys\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default abstract class GameObject {\n  public x: number\n  public y: number\n  public mapX: number\n  public mapY: number\n\n  constructor(\n    public row: number,\n    public col: number,\n    public width: number,\n    public height: number,\n    public color: string,\n    public destructable: boolean = true,\n  ) {\n    this.mapX = col * CONFIG.TILE_SIZE\n    this.mapY = row * CONFIG.TILE_SIZE\n  }\n\n  public abstract draw(): void\n  public abstract takeDamage(damageAmount: number): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport PortalObject from './PortalObject'\n\nexport default class Portal extends PortalObject {\n  public isOpen = false\n\n  protected static openColor   = 'rgba(50, 120, 50, 0.2)'\n  protected static closedColor = 'rgba(180, 50, 50, 0.2)'\n\n  draw(): void {\n    context.fillStyle = this.getColor()\n    context.beginPath()\n      context.rect(\n        this.x,\n        this.y,\n        CONFIG.TILE_SIZE,\n        CONFIG.TILE_SIZE\n      );\n    context.fill()\n  }\n\n  public open() {\n    this.isOpen = true\n  }\n\n  private getColor(): string {\n    if (this.isOpen) {\n      return Portal.openColor\n    }\n    else {\n      return Portal.closedColor\n    }\n  }\n}\n","export default abstract class GameObject {\n  public x: number\n  public y: number\n\n  public isOpen: boolean\n\n  protected static openColor   : string\n  protected static closedColor : string\n\n  constructor(\n    public row: number,\n    public col: number,\n  ) {\n  }\n\n  public abstract draw(): void\n  public abstract open(): void\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport SoundFX from '@app/audio/SoundFX'\nimport GameObject from '../GameObject'\n\nexport default class Wall extends GameObject {\n  draw(): void {\n    context.strokeStyle = this.color\n    context.lineWidth = 1\n    context.beginPath()\n      // Draw outline\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x                   , -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.lineTo( 0.5 + this.x,                     0.5 + this.y)\n\n      // Draw the 'x'\n      context.moveTo( 0.5 + this.x,                     0.5 + this.y)\n      context.lineTo(-0.5 + this.x + CONFIG.TILE_SIZE, -0.5 + this.y + CONFIG.TILE_SIZE)\n      context.moveTo(-0.5 + this.x + CONFIG.TILE_SIZE,  0.5 + this.y)\n      context.lineTo( 0.5 + this.x,                    -0.5 + this.y + CONFIG.TILE_SIZE)\n    context.stroke()\n  }\n\n  public takeDamage(damageAmount: number): void {\n    SoundFX.playWallHit()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Wall from '@app/domain/objects/wall/Wall'\nimport MapKeys from '@app/domain/map/MapKeys'\n\nexport default class WallFactory {\n  public static createWall(row: number, col: number, mapKey: MapKeys): Wall {\n    switch (mapKey) {\n      case MapKeys.WallGray:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#4B4B4B', false)\n      case MapKeys.WallGreen:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#27531B')\n      case MapKeys.WallBlue:\n        return new Wall(row, col, CONFIG.TILE_SIZE, CONFIG.TILE_SIZE, '#572F17')\n      default:\n        throw new Error('No such Wall!')\n    }\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\n\nexport default class Crosshair {\n  public static draw(): void {\n    const canvasX: number = Canvas.mousePosition.x\n    const canvasY: number = Canvas.mousePosition.y\n    let offsetX\n    let offsetY\n    context.strokeStyle = '#FFFFFF'\n    context.lineWidth = 0.5\n    context.beginPath()\n      // Top\n      offsetX =  0.5\n      offsetY = -1.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = -3.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Bottom\n      offsetY = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetY = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Left\n      offsetY =  0.5\n      offsetX = -3.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = -1.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n\n      // Right\n      offsetX = 2.5\n      context.moveTo(canvasX + offsetX, canvasY + offsetY)\n      offsetX = 4.5\n      context.lineTo(canvasX + offsetX, canvasY + offsetY)\n    context.stroke()\n  }\n}","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport Raycaster from '@app/infrastructure/Raycaster'\nimport CollisionBox, {\n  collisionBoxesIntersect,\n} from '@app/infrastructure/CollisionBox'\nimport { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\n\nimport Creature from '@app/domain/Creature'\nimport Map from '@app/domain/map/Map'\nimport Crosshair from './Crosshair'\nimport Projectile from './Projectile'\n\nimport SoundFX from '@app/audio/SoundFX'\n\nexport default class Player extends Creature {\n  public alive: boolean = true\n  public rotation: number = 0\n  public sightLineLength = 10\n  private shooting = false\n  private shootingCooldown = 6\n  private projectiles: Projectile[] = []\n\n  constructor(public x: number, public y: number) {\n    super()\n    this.initializeHealth()\n\n    this.maxSpeed = 2\n    this.maxSpeedDiagonal = Math.round(Math.sin(45) * this.maxSpeed) // TODO: Extract function\n\n    this.collisionBox = new CollisionBox(12, 12)\n\n    this.updateMapPosition()\n  }\n\n  public update(): void {\n    this.resetBlocked()\n    this.calculateNextCoordinates()\n\n    this.checkForCollisionWithEnemies()\n    this.move()\n    this.adjustCollisionWithWalls()\n    this.updateMapPosition()\n    this.updateTileDeltas()\n    this.shoot()\n    this.projectiles.forEach((p, i) => {\n      p.update(this.x, this.y)\n      if (p.alive === false) {\n        this.projectiles.splice(i, 1) // Remove the projectile\n      }\n    })\n  }\n\n  public draw(): void {\n    const theta = this.calculateTheta()\n    this.drawPlayer(theta)\n    this.drawPlayerVisionRay(theta)\n\n    // TODO: Just for testing purposes. Delete this.\n    if (CONFIG.DEBUG.PLAYER_VISION_RAY_SHOTGUN) {\n      this.drawPlayerVisionRay(theta - 0.45)\n      this.drawPlayerVisionRay(theta - 0.4)\n      this.drawPlayerVisionRay(theta - 0.35)\n      this.drawPlayerVisionRay(theta - 0.3)\n      this.drawPlayerVisionRay(theta - 0.25)\n      this.drawPlayerVisionRay(theta - 0.2)\n      this.drawPlayerVisionRay(theta - 0.15)\n      this.drawPlayerVisionRay(theta - 0.1)\n      this.drawPlayerVisionRay(theta - 0.05)\n      this.drawPlayerVisionRay(theta + 0.05)\n      this.drawPlayerVisionRay(theta + 0.1)\n      this.drawPlayerVisionRay(theta + 0.15)\n      this.drawPlayerVisionRay(theta + 0.2)\n      this.drawPlayerVisionRay(theta + 0.25)\n      this.drawPlayerVisionRay(theta + 0.3)\n      this.drawPlayerVisionRay(theta + 0.35)\n      this.drawPlayerVisionRay(theta + 0.4)\n      this.drawPlayerVisionRay(theta + 0.45)\n    }\n\n    Crosshair.draw()\n    this.drawProjectiles()\n  }\n\n  public keydownHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = true\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = true\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = true\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = true\n        break\n    }\n  }\n  public keyupHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.w:\n        this.moving.up = false\n        break\n      case KEYBOARD_KEYS.a:\n        this.moving.left = false\n        break\n      case KEYBOARD_KEYS.s:\n        this.moving.down = false\n        break\n      case KEYBOARD_KEYS.d:\n        this.moving.right = false\n        break\n      }\n  }\n\n  public shoot(): void {\n    if (this.shooting && this.shootingCooldown <= 0) {\n      const dx = Canvas.mousePosition.x - Canvas.center.x\n      const dy = Canvas.mousePosition.y - Canvas.center.y\n      let xVel = dx / (Math.abs(dx) + Math.abs(dy))\n      let yVel = dy / (Math.abs(dx) + Math.abs(dy))\n\n      // TODO: GAME FEATURE: Insert accuracy skill to reduce bullet motion randomness\n      // TODO: Fix the problem with different bullet speeds caused by randomness\n      if (CONFIG.FEATURES.SCATTER_PROJECTILES) {\n        const randomFactorX = Math.random() * 0.1 - 0.05\n        const randomFactorY = Math.random() * 0.1 - 0.05\n        xVel += randomFactorX\n        yVel += randomFactorY\n      }\n\n      this.projectiles.push(new Projectile(this.x, this.y, xVel, yVel))\n      this.shootingCooldown = 6\n\n      SoundFX.playSMG()\n    } else {\n      --this.shootingCooldown\n    }\n  }\n\n  public setShooting(isShooting: boolean): void {\n    this.shooting = isShooting\n  }\n\n  public takeDamage(damageAmount: number): void {\n    this.health = this.health - damageAmount\n    if (this.health <= 0) {\n      this.die()\n    }\n  }\n\n  private move(): void {\n    if (this.moving.left && !this.blocked.left) {\n      if (this.moving.up || this.moving.down) {\n        this.x -= this.maxSpeedDiagonal\n      } else {\n        this.x -= this.maxSpeed\n      }\n    }\n    if (this.moving.right && !this.blocked.right) {\n      if (this.moving.up || this.moving.down) {\n        this.x += this.maxSpeedDiagonal\n      } else {\n        this.x += this.maxSpeed\n      }\n    }\n    if (this.moving.up && !this.blocked.up) {\n      if (this.moving.left || this.moving.right) {\n        this.y -= this.maxSpeedDiagonal\n      } else {\n        this.y -= this.maxSpeed\n      }\n    }\n    if (this.moving.down && !this.blocked.down) {\n      if (this.moving.left || this.moving.right) {\n        this.y += this.maxSpeedDiagonal\n      } else {\n        this.y += this.maxSpeed\n      }\n    }\n  }\n\n  private calculateTheta(): number {\n    const theta = angleBetweenPoints(Canvas.mousePosition, Canvas.center)\n    context.fillStyle = '#44FF44'\n    context.fillText(`θ = ${theta.toFixed(2)}`, 10, 56)\n    return theta\n  }\n\n  private drawPlayer(theta: number): void {\n    // Draw gun\n    context.beginPath()\n    context.fillStyle = '#00AA00'\n    context.font = '10px Monospace'\n\n    context.fillText(`p (${this.x}, ${this.y})`, 10, 20)\n\n    context.strokeStyle = '#523DA5'\n    context.lineWidth = 2\n    context.moveTo(Canvas.center.x, Canvas.center.y)\n    context.lineTo(\n      Canvas.center.x + this.sightLineLength * Math.cos(theta),\n      Canvas.center.y + this.sightLineLength * Math.sin(theta),\n    )\n    context.stroke()\n\n    if (CONFIG.DEBUG.PLAYER_COLLISION_BOX) {\n      this.debug_drawCollisionBox()\n    }\n  }\n\n  private debug_drawCollisionBox() {\n    context.strokeStyle = this.getHealthColor()\n\n    context.lineWidth = 0.5\n    context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // cache the vertex calculations.\n    context.moveTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      0.5 + Canvas.center.x + this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      0.5 + Canvas.center.y + this.collisionBox.halfHeight,\n    )\n    context.lineTo(\n      -0.5 + Canvas.center.x - this.collisionBox.halfWidth,\n      -0.5 + Canvas.center.y - this.collisionBox.halfHeight,\n    )\n    context.stroke()\n  }\n\n  private drawPlayerVisionRay(theta: number) {\n    const { hitPoint, wallHit } = Raycaster.cast(this, theta)\n    if (hitPoint) {\n      if (wallHit) {\n        Raycaster.drawRay(hitPoint, '#FF4444')\n      } else {\n        Raycaster.drawRay(hitPoint)\n      }\n    }\n  }\n\n  private drawProjectiles() {\n    this.projectiles.forEach((p) => p.draw(this.x, this.y))\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  private checkForCollisionWithEnemies(): void { // TODO: Extract to Creature?\n    const nextPlayerState = {\n      x: this.nextX,\n      y: this.nextY,\n      collisionBox: this.collisionBox,\n    }\n    const enemiesOnScreen = Map.getEnemiesOnScreen(this.x, this.y)\n\n    if (\n      enemiesOnScreen.some((e) => collisionBoxesIntersect(e, nextPlayerState))\n    ) {\n      enemiesOnScreen.forEach((e) => {\n        this.checkIfBlockedByCreature(e, nextPlayerState)\n      })\n    }\n  }\n\n  private die(): void {\n    // TODO: Re-use CreatureState\n    this.alive = false\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Enemy from '@app/domain/enemies/Enemy'\nimport Map from '@app/domain/map/Map'\n\ninterface IntermediatePoint {\n  x: number\n  y: number\n  row: number\n  col: number\n}\n\nexport default class Projectile {\n  public speed: number = 24\n  public damage: number = 10\n  public alive: boolean = true\n  public row: number\n  public col: number\n  private previousX: number\n  private previousY: number\n\n  /*\n   * Intermediate positions/points solve the bullet phasing problem\n   */\n  private numberOfIntermediatePositions: number = 3 // More intermediate points give more precision, 3 are just fine\n  private intermediatePositions: IntermediatePoint[] = []\n\n  constructor(\n    public x: number,\n    public y: number,\n    public directionX: number,\n    public directionY: number,\n  ) {\n    for (let i = 0; i < this.numberOfIntermediatePositions; ++i) {\n      this.intermediatePositions[i] = { x: null, y: null, row: null, col: null }\n    }\n  }\n\n  public update(playerX: number, playerY: number): void {\n    this.previousX = this.x\n    this.previousY = this.y\n    this.x += this.directionX * this.speed\n    this.y += this.directionY * this.speed\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n\n    const nearbyEnemies = this.getNearbyEnemies()\n\n    this.calculateIntermediatePoints()\n\n    if (this.isOffScreen(playerX, playerY)) {\n      this.alive = false\n    }\n\n    this.intermediatePositions.forEach(intermediatePoint => {\n      if (this.alive) {\n        this.checkCollisionWithEnemies(nearbyEnemies, intermediatePoint)\n        this.checkCollisionWithWall(intermediatePoint)\n      }\n    })\n    if (this.alive) {\n      this.checkCollisionWithEnemies(nearbyEnemies)\n      this.checkCollisionWithWall()\n    }\n  }\n\n  public draw(playerX: number, playerY: number) {\n    if (this.x === playerX && this.y === playerY) {\n      // Don't draw the first projectile that is spawned at player position.\n      return\n    }\n    context.strokeStyle = '#8AFCFF'\n    context.lineWidth = 1\n    context.beginPath()\n    context.arc(\n      this.x + Canvas.center.x - playerX,\n      this.y + Canvas.center.y - playerY,\n      2,\n      0,\n      (2 * Math.PI)\n    )\n    context.stroke()\n  }\n  // TODO: There could be space for optimization here\n  //       Instead of finding the nearest enemies every time, maybe just take\n  //       the enemies that are visible on the screen (+ some offset)?\n  private getNearbyEnemies(): Enemy[] {\n    return [ ...Map.enemies ].filter(e => (\n      Math.abs(e.x - this.x) <= CONFIG.TILE_SIZE &&\n      Math.abs(e.y - this.y) <= CONFIG.TILE_SIZE\n    ))\n  }\n  /**\n   *                                     (this.x, this.y)\n   *  (this.previousX, this.previousY)   /\n   *  /                                 /\n   * x-------o-------o--------o--------x\n   *         |       |        |\n   *          \\      |       /\n   *        Intermediate points\n   */\n  private calculateIntermediatePoints(): void {\n    const intermediateIntervalX = (this.x - this.previousX) / (this.numberOfIntermediatePositions + 1)\n    const intermediateIntervalY = (this.y - this.previousY) / (this.numberOfIntermediatePositions + 1)\n    for (let i = this.numberOfIntermediatePositions - 1; i >= 0; --i) {\n      this.intermediatePositions[i].x = this.x - intermediateIntervalX * (i + 1)\n      this.intermediatePositions[i].y = this.y - intermediateIntervalY * (i + 1)\n      this.intermediatePositions[i].row = Math.floor(this.intermediatePositions[i].y / CONFIG.TILE_SIZE)\n      this.intermediatePositions[i].col = Math.floor(this.intermediatePositions[i].x / CONFIG.TILE_SIZE)\n    }\n  }\n\n  private isOffScreen(playerX: number, playerY: number): boolean {\n    return (\n      this.x < playerX - Canvas.center.x - CONFIG.TILE_SIZE || this.x > playerX + Canvas.center.x + CONFIG.TILE_SIZE ||\n      this.y < playerY - Canvas.center.y - CONFIG.TILE_SIZE || this.y > playerY + Canvas.center.y + CONFIG.TILE_SIZE\n    )\n  }\n\n  private checkCollisionWithEnemies(nearbyEnemies: Enemy[], point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    nearbyEnemies.forEach(e => {\n      if (\n        point.x >= e.x - e.collisionBox.halfWidth &&\n        point.x <= e.x + e.collisionBox.halfWidth &&\n        point.y >= e.y - e.collisionBox.halfHeight &&\n        point.y <= e.y + e.collisionBox.halfHeight\n      ) {\n        this.alive = false\n        e.takeDamage(this.getDamage())\n      }\n    })\n  }\n\n  private checkCollisionWithWall(point?: IntermediatePoint | Projectile): void {\n    if (!point) {\n      point = this\n    }\n\n    const wall = Map.walls[point.row][point.col]\n    if (wall) {\n        wall.takeDamage(this.getDamage())\n        this.alive = false\n        if (wall.destructable) {\n          Map.walls[point.row][point.col] = null\n        }\n    }\n  }\n\n  private getDamage(): number {\n    return this.damage // TODO: Randomize this a bit\n  }\n}\n","import Sprites from './Sprites'\n\nexport default class GraphicsLoader {\n  public static async load(setLoadedPercentage: (percentage: number) => void) {\n    Sprites.load(setLoadedPercentage)\n  }\n}","import CreatureSprite from './sprites/CreatureSprite'\nimport SpriteZerg from './sprites/SpriteZerg'\n\nexport default class Sprites {\n  public static Zerg: CreatureSprite = new SpriteZerg()\n\n  public static async load(setLoadedPercentage: (percentage: number) => void): Promise<void> {\n    await Sprites.Zerg.load(() => setLoadedPercentage(1.0))\n  }\n}\n","import Point from '@app/infrastructure/geometry/Point'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nexport default abstract class CreatureSprite {\n  public spriteSheet: HTMLImageElement\n\n  public abstract numberOfSpritesInAnimation: { [animation: string]: number }\n\n  protected abstract url: string\n  public abstract draw(e: Enemy, playerCoordinates: Point): void\n\n  public load(callback: () => void): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      this.spriteSheet = new Image()\n      this.spriteSheet.src = this.url\n      this.spriteSheet.onload = () => {\n        callback()\n        resolve()\n      }\n    })\n  }\n}\n","import Canvas, { context } from '@app/infrastructure/Canvas'\nimport Point from '@app/infrastructure/geometry/Point'\nimport CreatureState from '@app/domain/CreatureState'\nimport Enemy from '@app/domain/enemies/Enemy'\n\nimport CreatureSprite from './CreatureSprite'\n\nexport default class SpriteZerg extends CreatureSprite {\n  public url: string = './graphics/spritesheets/zergling.png'\n\n  public numberOfSpritesInAnimation = {\n    walking: 7,\n    attacking: 5,\n  }\n\n  private spriteLocations: { [key: string]: { col: number, flip: boolean } } = {\n    N : { col: 0, flip: false },\n    NE: { col: 2, flip: false },\n    E : { col: 4, flip: false },\n    SE: { col: 6, flip: false },\n    S : { col: 8, flip: false },\n    SW: { col: 6, flip: true  },\n    W : { col: 4, flip: true  },\n    NW: { col: 2, flip: true  },\n  }\n  private spriteSize = 32\n  private spriteStep: Point\n\n  constructor() {\n    super()\n    this.spriteStep = { x: this.spriteSize + 11, y: this.spriteSize + 10 }\n  }\n\n  public draw(enemy: Enemy, playerCoordinates: Point) {\n    const spriteOffsets: Point = this.getSpriteOffsets(enemy.state, this.spriteStep)\n\n    const spriteLocation = this.spriteLocations[enemy.direction]\n\n    this.drawSprite(enemy, playerCoordinates, spriteOffsets, spriteLocation)\n  }\n\n  private getSpriteOffsets(enemyState: CreatureState, SPRITE_STEP: Point) {\n    switch (enemyState) {\n      case CreatureState.Moving:\n      case CreatureState.Idling:\n        return {\n          x: 7,\n          y: 5\n        }\n      case CreatureState.Attacking:\n        const ATTACK_SPRITES_ROW = 7\n        return {\n          x: 7,\n          y: 5 + (ATTACK_SPRITES_ROW * SPRITE_STEP.y)\n        }\n    }\n  }\n\n  private drawSprite(\n    enemy: Enemy,\n    playerCoordinates: Point,\n    spriteOffsets: Point,\n    spriteLocation: { col: number, flip: boolean },\n  ) {\n\n    const { x, y, collisionBox: cBox } = enemy\n    const { x: px, y: py } = playerCoordinates\n\n    if (spriteLocation.flip) {\n      context.save()\n      context.translate(\n        Canvas.center.x + (x - px - cBox.halfWidth),\n        Canvas.center.y + (y - py - cBox.halfHeight),\n      )\n      context.scale(-1, 1)\n    }\n\n    context.drawImage(\n      this.spriteSheet,\n      spriteOffsets.x + this.spriteStep.x * spriteLocation.col,\n      spriteOffsets.y + this.spriteStep.y * Math.floor(enemy.animationPosition),\n      this.spriteSize,\n      this.spriteSize,\n      spriteLocation.flip ? 0 - this.spriteSize / 2 : Canvas.center.x + (x - px - cBox.halfWidth),  // Canvas Desination X\n      spriteLocation.flip ? 0                       : Canvas.center.y + (y - py - cBox.halfHeight), // Canvas Desination Y\n      enemy.collisionBox.width  + 2, // Draw width\n      enemy.collisionBox.height + 2, // Draw height\n    )\n\n    if (spriteLocation.flip) {\n      context.restore()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point from '@app/infrastructure/geometry/Point'\nimport Mouse from '@app/peripherals/Mouse'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\ncanvas.width  = CONFIG.CANVAS_WIDTH\ncanvas.height = CONFIG.CANVAS_HEIGHT\ncanvas.style.width  = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_WIDTH ) + 'px' : 'auto'\ncanvas.style.height = CONFIG.SCALE !== 1 ? (CONFIG.SCALE * CONFIG.CANVAS_HEIGHT) + 'px' : 'auto'\nexport const context = canvas.getContext('2d')\n\nexport default class Canvas {\n  public static halfWidth  = canvas.width  / 2\n  public static halfHeight = canvas.height / 2\n  public static rows = Math.floor(canvas.height / CONFIG.TILE_SIZE)\n  public static cols = Math.floor(canvas.width  / CONFIG.TILE_SIZE)\n  public static halfRows = Math.floor((canvas.height / 2) / CONFIG.TILE_SIZE)\n  public static halfCols = Math.floor((canvas.width  / 2) / CONFIG.TILE_SIZE)\n  public static rowRemainder = (canvas.height / 2) % CONFIG.TILE_SIZE\n  public static colRemainder = (canvas.width  / 2) % CONFIG.TILE_SIZE\n  public static mousePosition: Point\n\n  public static center: Point = {\n    x: CONFIG.CANVAS_WIDTH  / 2,\n    y: CONFIG.CANVAS_HEIGHT / 2,\n  }\n\n  public static clear(): void {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n\n  public static getCanvasDomElement = (): HTMLCanvasElement => canvas\n\n  public static updateMousePosition() {\n    this.mousePosition = {\n      x: Math.floor((Mouse.x - canvas.offsetLeft) / CONFIG.SCALE),\n      y: Math.floor((Mouse.y - canvas.offsetTop ) / CONFIG.SCALE)\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nexport default class CollisionBox {\n  public halfWidth: number\n  public halfHeight: number\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    // TODO: Just a development warning, remove this in production\n    if (CONFIG.THROW_DEVELOPMENT_ERRORS) {\n      if (width % 2 !== 0 || height % 2 !== 0) {\n        throw new Error('Always use even numbers for collision box dimensions!')\n      }\n    }\n    this.halfWidth  = this.width  / 2\n    this.halfHeight = this.height / 2\n  }\n}\n\nexport interface ICollidable {\n  x: number\n  y: number\n  collisionBox: CollisionBox\n}\n\nexport function collisionBoxesIntersect(a: ICollidable, b: ICollidable): boolean {\n  return (\n    a.x - a.collisionBox.halfWidth  < b.x + b.collisionBox.halfWidth  &&\n    a.x + a.collisionBox.halfWidth  > b.x - b.collisionBox.halfWidth  &&\n    a.y - a.collisionBox.halfHeight < b.y + b.collisionBox.halfHeight &&\n    a.y + a.collisionBox.halfHeight > b.y - b.collisionBox.halfHeight\n  )\n}","export enum Directions {\n  N  = 'N',\n  NE = 'NE',\n  E  = 'E',\n  SE = 'SE',\n  S  = 'S',\n  SW = 'SW',\n  W  = 'W',\n  NW = 'NW',\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { context } from './Canvas'\n\nlet lastFrameTime: number\nlet frameElapsedTime: number\n\nconst FPS_ARR: number[] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nlet FPS: number\n\nexport default class FrameRate {\n\n  public static restart() {\n    lastFrameTime = null\n    for (let i = 0; i < FPS_ARR.length; ++i) {\n      FPS_ARR[i] = 0\n    }\n  }\n\n  public static calculateFrameRate(): void {\n    if (!lastFrameTime) {\n      lastFrameTime = performance.now()\n      FPS = 0\n    } else {\n      const now = performance.now()\n      frameElapsedTime = (now - lastFrameTime)\n\n      FPS_ARR.unshift(1000 / frameElapsedTime)\n      FPS_ARR.pop()\n      FPS = FPS_ARR.reduce((sum, current) => sum += current, 0) / FPS_ARR.length\n\n      lastFrameTime = now\n    }\n  }\n\n  public static drawFPS() {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '8px Monospace'\n\n      context.fillText(`FPS: ${FPS && FPS.toFixed(2) || 'unknown'}`, 10, CONFIG.CANVAS_HEIGHT - 10)\n    context.stroke()\n  }\n}","\nenum GameAssets {\n  Graphics,\n  Audio,\n}\n\nexport default GameAssets","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { pointToPointDistance } from '@app/infrastructure/geometry/Point'\nimport CollisionBox from '@app/infrastructure/CollisionBox'\nimport Canvas, { context } from '@app/infrastructure/Canvas'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport RaycastablePoint from './geometry/RaycastablePoint'\n\nexport function generatePathNodes(startRow: number, startCol: number, cBox: CollisionBox): PathNode[] {\n  const path: PathNode[] = []\n\n  const rowOffset = 3\n  const colOffset = 2\n  let rowStart = startRow - Canvas.halfRows - rowOffset\n  let colStart = startCol - Canvas.halfCols - colOffset\n  const rowEnd = startRow + Canvas.halfRows + rowOffset\n  const colEnd = startCol + Canvas.halfCols + colOffset\n\n  if (rowStart < 0) { rowStart = 0 }\n  if (colStart < 0) { colStart = 0 }\n\n  for (let row = rowStart; row < rowEnd; ++row) {\n    for (let col = colStart - 1; col < colEnd; ++col) {\n      if (!Map.walls[row] || !Map.walls[row][col]) {\n        if (col > 0 && row > 0) {\n          path.push(new PathNode({\n            x: col * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n            y: row * CONFIG.TILE_SIZE + CONFIG.TILE_SIZE / 2,\n          }, cBox))\n        }\n      }\n    }\n  }\n\n  return path\n}\n\nexport function debug_drawPathNodes(path: PathNode[], player: Player, color: string): void {\n  if (path) {\n    path.forEach(node => drawNode(node, player, color))\n  }\n}\n\nexport function drawNode(node: PathNode, player: Player, color: string): void {\n  context.strokeStyle = color\n  context.lineWidth = 0.1\n  context.beginPath()\n    // Since this is just for debugging purposes, there is no need to\n    // optimize/cache the vertex calculations.\n    context.moveTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n    context.lineTo(-0.5 + Canvas.center.x + (node.x - player.x) + node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth, -0.5 + Canvas.center.y + (node.y - player.y) + node.collisionBox.halfHeight)\n    context.lineTo( 0.5 + Canvas.center.x + (node.x - player.x) - node.collisionBox.halfWidth,  0.5 + Canvas.center.y + (node.y - player.y) - node.collisionBox.halfHeight)\n  context.stroke()\n\n  context.beginPath()\n    context.arc(\n      Canvas.center.x + (node.x - player.x),\n      Canvas.center.y + (node.y - player.y),\n      1,\n      0,\n      (2 * Math.PI)\n    )\n  context.stroke()\n}\n\nexport function findShortestPath(enemy: Enemy, player: Player, pathfindingNodes: PathNode[]): PathNode[] {\n  const nodeGoal  = new PathNode(player, player.collisionBox)\n  const nodeStart = new PathNode(enemy,  enemy.collisionBox)\n\n  pathfindingNodes.push(nodeGoal)\n\n  nodeStart.f = 0\n  nodeStart.g = nodeStart.heuristic(nodeGoal)\n\n  const nodesNotTested: PathNode[] = [ nodeStart ]\n\n  let nodeCurrent: PathNode\n\n  while (nodesNotTested.length > 0 || nodeCurrent === nodeGoal) {\n    nodesNotTested.sort((a: PathNode, b: PathNode) => a.g - b.g)\n\n    while (nodesNotTested.length > 0 && nodesNotTested[0].visited === true) {\n      nodesNotTested.shift()\n    }\n\n    if (nodesNotTested.length <= 0) {\n      break\n    }\n\n    nodeCurrent = nodesNotTested.shift()\n    nodeCurrent.visited = true\n\n    // Get neighbour nodes.\n    nodeCurrent.neighbourNodes = [ ...pathfindingNodes ]\n      .filter(node => {\n        return (\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row    ) || // Center\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row - 1) || // N\n          (node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row    ) || // E\n          (node.col === nodeCurrent.col     && node.row === nodeCurrent.row + 1) || // S\n          (node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row    ) || // W\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NW\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row - 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row + 1] || Map.walls[node.row + 1][node.col    ] === null\n            )\n          ) || // NE\n          (\n            node.col === nodeCurrent.col + 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col - 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) || // SE\n          (\n            node.col === nodeCurrent.col - 1 && node.row === nodeCurrent.row + 1\n            && (\n              !Map.walls[node.row    ] || Map.walls[node.row    ][node.col + 1] === null ||\n              !Map.walls[node.row - 1] || Map.walls[node.row - 1][node.col    ] === null\n            )\n          ) // SW\n        )\n      })\n\n    nodeCurrent.neighbourNodes\n      .map(node => {\n        if (node.visited === false) {\n          nodesNotTested.push(node)\n        }\n\n        // Calculate local goal\n        const possiblyLowerLocalGoal = nodeCurrent.f + pointToPointDistance(nodeCurrent, node)\n\n        if (possiblyLowerLocalGoal < node.f) {\n          node.parent = nodeCurrent\n          node.f = possiblyLowerLocalGoal\n          node.g = node.f + node.heuristic(nodeGoal)\n        }\n\n        return node\n      })\n  }\n\n  const path = []\n  if (nodeGoal.parent) {\n    let n: PathNode = nodeGoal\n    while (n.parent) {\n      path.push(n)\n      n = n.parent\n    }\n  }\n  return path\n}\n\nexport class PathNode implements RaycastablePoint {\n  public x: number\n  public y: number\n  public row: number\n  public col: number\n  public deltas = {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  }\n  public collisionBox: CollisionBox\n\n  public visited: boolean = false\n  public g: number = Infinity // Global goal\n  public f: number = Infinity // Local goal\n  public parent: PathNode = null\n  public neighbourNodes: PathNode[]\n\n  constructor(coordinates: Point, cBox: CollisionBox) {\n    this.x = coordinates.x\n    this.y = coordinates.y\n    this.collisionBox = new CollisionBox(cBox.width, cBox.height)\n    this.updateTileDeltas()\n    this.updateMapPosition()\n  }\n\n  public heuristic(nodeGoal: PathNode): number {\n    return pointToPointDistance(this, nodeGoal)\n  }\n\n  // TODO: Compose this functionality since it's shared between enemies and player\n  private updateTileDeltas(): void {\n    this.deltas.dyTop = this.y % CONFIG.TILE_SIZE\n    this.deltas.dyBottom = CONFIG.TILE_SIZE - this.deltas.dyTop\n    this.deltas.dxLeft = this.x % CONFIG.TILE_SIZE\n    this.deltas.dxRight = CONFIG.TILE_SIZE - this.deltas.dxLeft\n  }\n\n  // TODO: Not DRY... generalize this functionality\n  private updateMapPosition(): void {\n    this.row = Math.floor(this.y / CONFIG.TILE_SIZE)\n    this.col = Math.floor(this.x / CONFIG.TILE_SIZE)\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport Point, { angleBetweenPoints } from '@app/infrastructure/geometry/Point'\nimport Wall from '@app/domain/objects/wall/Wall'\nimport Map from '@app/domain/map/Map'\n\nimport Canvas, { context } from '@app/infrastructure/Canvas'\nimport RaycastablePoint from './geometry/RaycastablePoint'\nimport Enemy from '@app/domain/enemies/Enemy'\nimport { PathNode } from './Pathfinding'\nimport Player from '@app/domain/player/Player'\n\nexport default class Raycaster {\n  /**\n   * @param p     - Point from which to start Raycasting\n   * @param theta - Ray angle\n   * @param pEnd? - Optional ending point up to which the cast will be performed\n   *\n   * @returns {\n   *   wallHit, // the wall that has been hit. If no walls are hit - wallHit is `null`\n   *   hitPoint // can be either a point where the ray intersects a wall, or a just a point outside the screen if no wall is hit\n   * }\n   */\n  public static cast(\n    p: RaycastablePoint,\n    theta: number,\n    pEnd?: RaycastablePoint\n  ): { hitPoint: Point, wallHit: Wall } {\n    if (theta >= 0) { // South\n      const xInt = p.deltas.dyBottom / Math.tan(theta)\n\n      if (xInt >= 0) { // South East\n        return Raycaster.getInterceptPointSE(p, theta, pEnd)\n      }\n      else if (xInt < 0) { // South West\n        return Raycaster.getInterceptPointSW(p, theta, pEnd)\n      }\n    } else { // North\n      const xInt = p.deltas.dyTop / Math.tan(-theta)\n\n      // We must check if xInt is positive because sometimes it can be: 0 or -0\n      const xIntIsPositive = (1 / xInt) > 0\n\n      if (xInt >= 0 && xIntIsPositive) { // North East\n        return Raycaster.getInterceptPointNE(p, theta, pEnd)\n      }\n      else { // North West\n        return Raycaster.getInterceptPointNW(p, theta, pEnd)\n      }\n    }\n  }\n\n  public static drawRay(hitPoint: Point, color: string = '#4444FF'): void {\n    context.strokeStyle = color\n    context.lineWidth = 0.5\n    context.beginPath()\n      context.moveTo(Canvas.halfWidth, Canvas.halfHeight)\n      context.lineTo(\n        Canvas.halfWidth + hitPoint.x,\n        Canvas.halfHeight + hitPoint.y\n      )\n    context.stroke()\n    context.lineWidth = 1\n  }\n\n  public static determineIfThereAreObstaclesBetweenTwoPoints(p1: RaycastablePoint, p2: RaycastablePoint): boolean {\n    const angleBetweenTwoGivenPoints = angleBetweenPoints(p2, p1)\n    const results = Raycaster.cast(p1, angleBetweenTwoGivenPoints, p2)\n\n    // I have to check if results exist because sometimes .cast() can return 'undefined'..\n    // Why .cast() sometimes returns 'undefined' could be worth investigating in the future..\n    if (results) {\n      return results.wallHit !== null\n    }\n    else {\n      return true\n    }\n  }\n\n  // This function is very computationaly expensive, see if it can be optimized\n  public static determineIfThereAreObstaclesBetweenTwoPathNodes(n1: PathNode | Enemy, n2: PathNode | Player) {\n    const angleBetweenNodes: number = +angleBetweenPoints(n2, n1).toFixed(2)\n\n    if (angleBetweenNodes === 0) { // 0deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > 0 && angleBetweenNodes < Math.PI / 2) { // between 0deg and 90deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === (Math.PI / 2)) { // 90deg\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > Math.PI / 2 && angleBetweenNodes < Math.PI) { // between 90deg and 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (Math.abs(angleBetweenNodes) === 3.14) { // 180deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI && angleBetweenNodes < -Math.PI / 2) { // between 180deg and 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSW1, vSW2] = getVerticesSW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSW1 as RaycastablePoint, vSW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes === -1.57) { // 270deg\n      const [vNE1, vNE2] = getVerticesNE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNE1 as RaycastablePoint, vNE2 as RaycastablePoint)) {\n        return true\n      }\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n\n    else if (angleBetweenNodes > -Math.PI / 2 && angleBetweenNodes < 0) { // between 270deg and 360deg\n      const [vNW1, vNW2] = getVerticesNW(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vNW1 as RaycastablePoint, vNW2 as RaycastablePoint)) {\n        return true\n      }\n      const [vSE1, vSE2] = getVerticesSE(n1, n2)\n      if (Raycaster.determineIfThereAreObstaclesBetweenTwoPoints(vSE1 as RaycastablePoint, vSE2 as RaycastablePoint)) {\n        return true\n      }\n      return false\n    }\n  }\n\n  private static outsideOfScreenOffset = CONFIG.TILE_SIZE * 2\n  private static rangeHorizontal: number = Canvas.halfWidth  + Raycaster.outsideOfScreenOffset\n  private static rangeVertical: number   = Canvas.halfHeight + Raycaster.outsideOfScreenOffset * 2\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyBottom > (pEnd.y - p.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNE(p: RaycastablePoint, theta: number, pEnd?: RaycastablePoint): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxRight + tileStepX) * Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxRight > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxRight > (pEnd.x - p.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + p.deltas.dxRight + tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNE(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(-theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (pEnd.x - p.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y - tileStepY - p.deltas.dyTop,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNE(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: tileStepX + p.deltas.dxRight, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointNW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (p.y - pEnd.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) - yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalNW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyTop + tileStepY) / Math.tan(Math.PI - (-theta))\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyTop > Raycaster.rangeVertical) || (xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepY + p.deltas.dyTop > (p.y - pEnd.y) || Math.round(xIntercept) > (p.x - pEnd.x)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) - p.deltas.dyTop - tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - xIntercept,\n            y: Canvas.center.y - p.deltas.dyTop - tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalNW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint  : hitPointVertical,\n        wallHit : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint  : hitPointHorizontal,\n        wallHit : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: -xIntercept, y: -tileStepY - p.deltas.dyTop }\n      const hitPointVertical   = { x: - tileStepX - p.deltas.dxLeft, y: -yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  // TODO: This is a naive implementation! Add 6x optimization\n  private static getInterceptPointSW(p: Point, theta: number, pEnd?: Point): { hitPoint: Point, wallHit: Wall } {\n    // ########################################################################\n    // Vertical Intercepts\n    // ########################################################################\n    let hitPointVertical: Point = null\n    let wallHitVertical: Wall = null\n\n    let i = 0\n    let yIntercept\n    let tileStepX\n\n    while (true) {\n      tileStepX = i * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        yIntercept = 0\n      } else {\n        yIntercept = (p.deltas.dxLeft + tileStepX) * Math.tan(Math.PI - theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepX + p.deltas.dxLeft > Raycaster.rangeHorizontal) || (yIntercept > Raycaster.rangeVertical)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if (tileStepX + p.deltas.dxLeft > (p.x - pEnd.x) || yIntercept > (pEnd.y - p.y)) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y - (pEnd.y - p.y) + yIntercept,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x - p.deltas.dxLeft - tileStepX,\n            y: Canvas.center.y + yIntercept,\n          }\n        }\n        context.strokeStyle = '#4444FF'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      wallHitVertical = Raycaster.checkWallCollisionVerticalSW(i, p, yIntercept)\n\n      if (wallHitVertical) {\n        hitPointVertical = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n        break\n      }\n      ++i\n    }\n\n    // ########################################################################\n    // Horizontal Intercepts\n    // ########################################################################\n    let hitPointHorizontal: Point = null\n    let wallHitHorizontal: Wall = null\n\n    let j = 0\n    let xIntercept\n    let tileStepY\n\n    while (true) {\n      tileStepY = j * CONFIG.TILE_SIZE\n      if (theta === 0) {\n        break\n      } else {\n        xIntercept = (p.deltas.dyBottom + tileStepY) / Math.tan(theta)\n      }\n\n      // Outside of screen check\n      if ((tileStepY + p.deltas.dyBottom > Raycaster.rangeVertical) || (-xIntercept > Raycaster.rangeHorizontal)) {\n        break\n      }\n\n      // Don't cast beyond pEnd\n      if (pEnd) {\n        if ((tileStepY + p.deltas.dyBottom > (pEnd.y - p.y)) || (-xIntercept > (p.x - pEnd.x))) {\n          break\n        }\n      }\n\n      if (CONFIG.DEBUG.RAYCASTER) {\n        let coordinates: Point\n        if (pEnd) {\n          coordinates = {\n            x: Canvas.center.x - (pEnd.x - p.x) + xIntercept,\n            y: Canvas.center.y - (pEnd.y - p.y) + p.deltas.dyBottom + tileStepY,\n          }\n        } else {\n          coordinates = {\n            x: Canvas.center.x + xIntercept,\n            y: Canvas.center.y + p.deltas.dyBottom + tileStepY,\n          }\n        }\n        context.strokeStyle = '#44FF44'\n        context.beginPath()\n        context.arc(coordinates.x, coordinates.y, 2, 0, (2 * Math.PI))\n        context.stroke()\n      }\n\n      // Catch up with the horizontal intercept\n      if (yIntercept < tileStepY) {\n        break\n      }\n\n      wallHitHorizontal = Raycaster.checkWallCollisionHorizontalSW(j, p, xIntercept)\n\n      if (wallHitHorizontal) {\n        hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n        break\n      }\n      ++j\n    }\n\n    // ########################################################################\n    // Return the closer hit point & hit wall\n    // ########################################################################\n\n    if (hitPointVertical && hitPointHorizontal === null) {\n      return {\n        hitPoint : hitPointVertical,\n        wallHit  : wallHitVertical\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical === null) {\n      return {\n        hitPoint : hitPointHorizontal,\n        wallHit  : wallHitHorizontal\n      }\n    }\n    else if (hitPointHorizontal && hitPointVertical) {\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint : hitPointHorizontal,\n          wallHit  : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint : hitPointVertical,\n          wallHit  : wallHitVertical\n        }\n      }\n    }\n    else if (hitPointHorizontal === null && hitPointVertical === null) {\n      // If nothing is hit, just return the last closest point!\n      const hitPointHorizontal = { x: xIntercept, y: tileStepY + p.deltas.dyBottom }\n      const hitPointVertical   = { x: -tileStepX - p.deltas.dxLeft, y: yIntercept }\n      const verticalHitDistanceFromPlayer   = Math.sqrt(Math.pow(  hitPointVertical.x, 2) + Math.pow(  hitPointVertical.y, 2))\n      const horizontalHitDistanceFromPlayer = Math.sqrt(Math.pow(hitPointHorizontal.x, 2) + Math.pow(hitPointHorizontal.y, 2))\n      if (verticalHitDistanceFromPlayer > horizontalHitDistanceFromPlayer) {\n        return {\n          hitPoint  : hitPointHorizontal,\n          wallHit : wallHitHorizontal\n        }\n      } else {\n        return {\n          hitPoint  : hitPointVertical,\n          wallHit : wallHitVertical\n        }\n      }\n    }\n  }\n\n  private static checkWallCollisionVerticalSE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNE(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = 1 + p.col + i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNE(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col + Math.floor((p.deltas.dxLeft + xIntercept) / CONFIG.TILE_SIZE)\n    const xTile_leftByOnePixel = p.col + Math.floor((p.deltas.dxLeft + xIntercept - 1) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile][xTile_leftByOnePixel]) {\n        wallHit = Map.walls[yTile][xTile_leftByOnePixel]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalNW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = - 1 + p.col - i\n    const yTile = p.row + Math.floor((p.deltas.dyTop - yIntercept) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalNW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight + xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row - i - 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n\n  private static checkWallCollisionVerticalSW(i: number, p: Point, yIntercept: number): Wall {\n    const xTile = p.col - i - 1\n    const yTile = p.row + Math.floor((p.deltas.dyTop + yIntercept) / CONFIG.TILE_SIZE)\n    const yTile_aboveByOnePixel = p.row + Math.floor((p.deltas.dyTop + yIntercept - 1) / CONFIG.TILE_SIZE)\n\n    let wallHit = null\n    if (Map.walls[yTile]) {\n      if (Map.walls[yTile][xTile]) {\n        wallHit = Map.walls[yTile][xTile]\n      }\n      else if (Map.walls[yTile_aboveByOnePixel][xTile]) {\n        wallHit = Map.walls[yTile_aboveByOnePixel][xTile]\n      }\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 112 + i * 12)\n    }\n\n    return wallHit\n  }\n  private static checkWallCollisionHorizontalSW(i: number, p: Point, xIntercept: number): Wall {\n    const xTile = p.col - Math.floor((p.deltas.dxRight - xIntercept) / CONFIG.TILE_SIZE)\n    const yTile = p.row + i + 1\n\n    let wallHit = null\n    if (Map.walls[yTile] && Map.walls[yTile][xTile]) {\n      wallHit = Map.walls[yTile][xTile]\n    }\n\n    if (CONFIG.DEBUG.RAYCASTER) {\n      context.fillText(`col: ${xTile}, row: ${yTile}, hit: ${wallHit ? [wallHit.row, wallHit.col] : null}`, 10, 212 + i * 12)\n    }\n\n    return wallHit\n  }\n}\n\nconst blankVertex: Point = {\n  x: 0,\n  y: 0,\n  deltas: {\n    dyTop    : 0,\n    dyBottom : 0,\n    dxLeft   : 0,\n    dxRight  : 0,\n  },\n}\nconst vertexNW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexNE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSW2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE1: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\nconst vertexSE2: Point = { ...blankVertex, deltas: { ...blankVertex.deltas } }\n\nfunction getVerticesNW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexNW1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNW1.row = Math.floor(vertexNW1.y / CONFIG.TILE_SIZE)\n  vertexNW1.col = Math.floor(vertexNW1.x / CONFIG.TILE_SIZE)\n  vertexNW1.deltas.dyTop = vertexNW1.y % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW1.deltas.dyTop\n  vertexNW1.deltas.dxLeft = vertexNW1.x % CONFIG.TILE_SIZE\n  vertexNW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW1.deltas.dxLeft\n\n  vertexNW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexNW2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNW2.row = Math.floor(vertexNW2.y / CONFIG.TILE_SIZE)\n  vertexNW2.col = Math.floor(vertexNW2.x / CONFIG.TILE_SIZE)\n  vertexNW2.deltas.dyTop = vertexNW2.y % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNW2.deltas.dyTop\n  vertexNW2.deltas.dxLeft = vertexNW2.x % CONFIG.TILE_SIZE\n  vertexNW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNW2.deltas.dxLeft\n\n  return [ vertexNW1, vertexNW2 ]\n}\n\nfunction getVerticesNE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexNE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexNE1.y = n1.y - n1.collisionBox.halfHeight\n  vertexNE1.row = Math.floor(vertexNE1.y / CONFIG.TILE_SIZE)\n  vertexNE1.col = Math.floor(vertexNE1.x / CONFIG.TILE_SIZE)\n  vertexNE1.deltas.dyTop = vertexNE1.y % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE1.deltas.dyTop\n  vertexNE1.deltas.dxLeft = vertexNE1.x % CONFIG.TILE_SIZE\n  vertexNE1.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE1.deltas.dxLeft\n\n  vertexNE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexNE2.y = n2.y - n2.collisionBox.halfHeight\n  vertexNE2.row = Math.floor(vertexNE2.y / CONFIG.TILE_SIZE)\n  vertexNE2.col = Math.floor(vertexNE2.x / CONFIG.TILE_SIZE)\n  vertexNE2.deltas.dyTop = vertexNE2.y % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexNE2.deltas.dyTop\n  vertexNE2.deltas.dxLeft = vertexNE2.x % CONFIG.TILE_SIZE\n  vertexNE2.deltas.dxRight = CONFIG.TILE_SIZE - vertexNE2.deltas.dxLeft\n\n  return [ vertexNE1, vertexNE2 ]\n}\n\nfunction getVerticesSW(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSW1.x = n1.x - n1.collisionBox.halfWidth\n  vertexSW1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSW1.row = Math.floor(vertexSW1.y / CONFIG.TILE_SIZE)\n  vertexSW1.col = Math.floor(vertexSW1.x / CONFIG.TILE_SIZE)\n  vertexSW1.deltas.dyTop = vertexSW1.y % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW1.deltas.dyTop\n  vertexSW1.deltas.dxLeft = vertexSW1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW1.deltas.dxLeft\n\n  vertexSW2.x = n2.x - n2.collisionBox.halfWidth\n  vertexSW2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSW2.row = Math.floor(vertexSW2.y / CONFIG.TILE_SIZE)\n  vertexSW2.col = Math.floor(vertexSW2.x / CONFIG.TILE_SIZE)\n  vertexSW2.deltas.dyTop = vertexSW2.y % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSW2.deltas.dyTop\n  vertexSW2.deltas.dxLeft = vertexSW2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSW2.deltas.dxLeft\n\n  return [ vertexSW1, vertexSW2 ]\n}\n\nfunction getVerticesSE(n1: PathNode | Enemy, n2: PathNode | Player): [ Point, Point ] {\n  vertexSE1.x = n1.x + n1.collisionBox.halfWidth\n  vertexSE1.y = n1.y + n1.collisionBox.halfHeight\n  vertexSE1.row = Math.floor(vertexSE1.y / CONFIG.TILE_SIZE)\n  vertexSE1.col = Math.floor(vertexSE1.x / CONFIG.TILE_SIZE)\n  vertexSE1.deltas.dyTop = vertexSE1.y % CONFIG.TILE_SIZE\n  vertexSE1.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE1.deltas.dyTop\n  vertexSE1.deltas.dxLeft = vertexSE1.x % CONFIG.TILE_SIZE\n  vertexSW1.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE1.deltas.dxLeft\n\n  vertexSE2.x = n2.x + n2.collisionBox.halfWidth\n  vertexSE2.y = n2.y + n2.collisionBox.halfHeight\n  vertexSE2.row = Math.floor(vertexSE2.y / CONFIG.TILE_SIZE)\n  vertexSE2.col = Math.floor(vertexSE2.x / CONFIG.TILE_SIZE)\n  vertexSE2.deltas.dyTop = vertexSE2.y % CONFIG.TILE_SIZE\n  vertexSE2.deltas.dyBottom = CONFIG.TILE_SIZE - vertexSE2.deltas.dyTop\n  vertexSE2.deltas.dxLeft = vertexSE2.x % CONFIG.TILE_SIZE\n  vertexSW2.deltas.dxRight = CONFIG.TILE_SIZE - vertexSE2.deltas.dxLeft\n\n  return [ vertexSE1, vertexSE2 ]\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport AudioLoader from '@app/audio/AudioLoader'\nimport GraphicsLoader from '@app/graphics/GraphicsLoader'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport FrameRate from '../FrameRate'\nimport GAME_STATES from './game_states/GameStates'\nimport GameStateManager from './game_states/GameStateManager'\nimport GameAssets from '../GameAssets'\n\nexport default class Game {\n  public static loaded: boolean = false\n  public static loadedPercentage: number = 0.0\n  public static loadedPercentages: Map<GameAssets, { loaded: number, weight: number }> = new Map()\n\n  public static stateManager: GameStateManager = new GameStateManager()\n\n  constructor() {\n    window.onfocus = () => {\n      FrameRate.restart()\n    }\n\n    Game.loadedPercentages.set(GameAssets.Graphics, { weight: 0.3, loaded: 0.0 })\n    Game.loadedPercentages.set(GameAssets.Audio,    { weight: 0.7, loaded: 0.0 })\n\n    AudioLoader.load(   percentage => this.gameAssetLoaded(GameAssets.Audio, percentage))\n    GraphicsLoader.load(percentage => this.gameAssetLoaded(GameAssets.Graphics, percentage))\n  }\n\n  public start(): void {\n    const loadInterval = setInterval(() => {\n      if (Game.loaded) {\n        clearInterval(loadInterval)\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n      }\n    }, 250)\n\n    this.gameLoop()\n  }\n\n  private gameAssetLoaded(asset: GameAssets, percentage: number) {\n    const assetValue = Game.loadedPercentages.get(asset)\n    assetValue.loaded = percentage\n    Game.loadedPercentages.set(asset, assetValue)\n\n    Game.loadedPercentage = 0\n    for (const [_key, value] of Game.loadedPercentages) {\n      Game.loadedPercentage += value.loaded * value.weight\n    }\n\n    if (Game.loadedPercentage === 1.0) {\n      Game.loaded = true\n    }\n  }\n\n  private gameLoop(): void {\n    this.update()\n    this.render()\n\n    FrameRate.calculateFrameRate()\n\n    window.requestAnimationFrame(() => this.gameLoop())\n  }\n\n  private update(): void {\n    Game.stateManager.update()\n  }\n\n  private render(): void {\n    Canvas.clear()\n    Game.stateManager.render()\n    if (CONFIG.DEBUG.FPS) {\n      FrameRate.drawFPS()\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateGameOver implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#dd0000'\n      context.font = '32px Monospace'\n      context.fillText(\n        'YOU DIED!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport IGameState from './IGameState'\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nexport default class GameStateMainMenu implements IGameState {\n  public enter(): void {\n    return\n  }\n  public exit(): void {\n    return\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawLoadingDialog()\n  }\n\n  private drawLoadingDialog(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n      context.fillText(`Loading: ${+(Game.loadedPercentage * 100)}%`, CONFIG.CANVAS_WIDTH / 2 - 70, CONFIG.CANVAS_HEIGHT / 2 - 10)\n    context.stroke()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateMainMenu implements IGameState {\n  private animationCounter: number = 0\n  private animationPosition: number = 100\n  private instructionsVisible: boolean = true\n\n  public enter(): void {\n    window.addEventListener('keydown', this.handleMenuSelection)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleMenuSelection)\n  }\n\n  public update(): void {\n    this.animationCounter = (this.animationCounter + 1) % this.animationPosition\n    if (this.animationCounter >= this.animationPosition / 2) {\n      this.instructionsVisible = false\n    } else {\n      this.instructionsVisible = true\n    }\n    return\n  }\n\n  public render(): void {\n    this.drawMainMenu()\n  }\n\n  private drawMainMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n\n      context.font = '12px Monospace'\n      context.fillText('Retro 2D Top-Down Game Engine', CONFIG.CANVAS_WIDTH / 2 - 106, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      if (this.instructionsVisible) {\n        context.font = '20px Monospace'\n        context.fillText('Press Enter to start', CONFIG.CANVAS_WIDTH / 2 - 118, CONFIG.CANVAS_HEIGHT / 2 + 10)\n      }\n    context.stroke()\n  }\n\n  private handleMenuSelection = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n}\n","import IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateManager {\n  private currentState: IGameState = GAME_STATES.LOADING\n\n  public getState(): IGameState {\n    return this.currentState\n  }\n  public setState(nextState: IGameState): IGameState {\n    this.currentState.exit(nextState)\n    const previousState = this.currentState\n    nextState.enter(previousState)\n    this.currentState = nextState\n    return this.currentState\n  }\n\n  public update(): void {\n    this.currentState.update()\n  }\n  public render(): void {\n    this.currentState.render()\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport { context } from '@app/infrastructure/Canvas'\nimport Game from '@app/infrastructure/game/Game'\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePaused implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(): void {\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    GAME_STATES.PLAYING.render()\n    this.drawPauseMenu()\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n        e.preventDefault()\n        GAME_STATES.PLAYING.destroyGame()\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n      case KEYBOARD_KEYS.p:\n        Game.stateManager.setState(GAME_STATES.PLAYING)\n        break\n    }\n  }\n\n  private drawPauseMenu(): void {\n    context.beginPath()\n      context.fillStyle = '#FFC100'\n      context.font = '20px Monospace'\n\n      context.fillText(`Paused`, CONFIG.CANVAS_WIDTH / 2 - 36, CONFIG.CANVAS_HEIGHT / 2 - 54)\n      context.font = '12px Monospace'\n      context.fillText('  p - Resume',    CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 34)\n      context.fillText('ESC - Main Menu', CONFIG.CANVAS_WIDTH / 2 - 50, CONFIG.CANVAS_HEIGHT / 2 - 18)\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\n\nimport Game from '@app/infrastructure/game/Game'\nimport Canvas from '@app/infrastructure/Canvas'\n\nimport Keyboard from '@app/peripherals/Keyboard'\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\nimport Mouse from '@app/peripherals/Mouse'\nimport Gamepads from '@app/peripherals/Gamepads'\n\nimport Map from '@app/domain/map/Map'\nimport Player from '@app/domain/player/Player'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStatePlaying implements IGameState {\n  private player: Player\n  private map: Map\n\n  public enter(previousState: IGameState): void {\n    if (previousState !== GAME_STATES.PAUSED) {\n      this.startNewGame()\n    }\n    this.setupOwnEventListeners()\n  }\n\n  private setupOwnEventListeners() {\n    window.onblur = () => {\n      Game.stateManager.setState(GAME_STATES.PAUSED)\n    }\n    window.addEventListener('keydown', this.pauseHandler)\n  }\n\n  public exit(nextState: IGameState): void {\n    this.clearOwnEventListeners()\n    if (nextState !== GAME_STATES.PAUSED) {\n      this.destroyGame()\n    }\n  }\n\n  private clearOwnEventListeners() {\n    window.onblur = null\n    window.removeEventListener('keydown', this.pauseHandler)\n  }\n\n  public update(): void {\n    if (this.player.alive) {\n      Canvas.updateMousePosition()\n      Gamepads.update(this.player)\n      this.player.update()\n      this.map.update()\n      this.checkForVictoryCondition()\n    } else {\n      Game.stateManager.setState(GAME_STATES.GAME_OVER)\n    }\n  }\n\n  public render(): void {\n    this.map.draw()\n    this.player.draw()\n  }\n\n  private startNewGame(): void {\n    this.player = new Player(128, 64)\n    this.map = new Map(this.player)\n\n    Keyboard.addListenerKeydown(this.player.keydownHandler)\n    Keyboard.addListenerKeyup(this.player.keyupHandler)\n\n    Mouse.init(this.playerSetShootingTrue, this.playerSetShootingFalse)\n  }\n\n  private checkForVictoryCondition() {\n    if (\n      Map.enemiesRemaining() === 0 &&\n      this.checkIfPlayerIsInsideExitPortal()\n    ) {\n      Game.stateManager.setState(GAME_STATES.VICTORY)  \n    }\n  }\n\n  private checkIfPlayerIsInsideExitPortal(): boolean {\n    return (\n      this.player.row === Map.exitPortal.row &&\n      this.player.col === Map.exitPortal.col\n    )\n  }\n\n  public destroyGame(): void {\n    Keyboard.removeKeydownAndKeyupListeners(this.player.keydownHandler)\n    Mouse.removeMouseLeftClickListeners(this.playerSetShootingTrue, this.playerSetShootingFalse)\n\n    this.map.destroy()\n    this.map = null\n    this.player = null\n  }\n\n  public playerSetShootingTrue = (e: MouseEvent) => {\n    this.player.setShooting(true) // TODO: Move to state: player.setState(CreatureState.Attacking)\n  }\n  public playerSetShootingFalse = (e: MouseEvent) => {\n    this.player.setShooting(false)\n  }\n\n  private pauseHandler = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ESC:\n      case KEYBOARD_KEYS.p:\n        e.preventDefault()\n        Game.stateManager.setState(GAME_STATES.PAUSED)\n        break\n    }\n  }\n}\n","import * as CONFIG from '@app/configuration/config.json'\n\nimport { KEYBOARD_KEYS } from '@app/peripherals/constants/KeyCodes'\n\nimport Game from '@app/infrastructure/game/Game'\nimport { context } from '@app/infrastructure/Canvas'\n\nimport IGameState from './IGameState'\nimport GAME_STATES from './GameStates'\n\nexport default class GameStateVictory implements IGameState {\n  public enter(): void {\n    window.addEventListener('keydown', this.handleEnterPress)\n  }\n  public exit(): void {\n    window.removeEventListener('keydown', this.handleEnterPress)\n  }\n\n  public update(): void {\n    return\n  }\n\n  public render(): void {\n    this.drawGameOverScreen()\n  }\n\n  private handleEnterPress = (e: KeyboardEvent) => {\n    switch (e.keyCode) {\n      case KEYBOARD_KEYS.ENTER:\n        Game.stateManager.setState(GAME_STATES.MAIN_MENU)\n        break\n    }\n  }\n\n  private drawGameOverScreen(): void {\n    context.beginPath()\n      context.fillStyle = '#00dd00'\n      context.font = '32px Monospace'\n      context.fillText(\n        'VICTORY!',\n        CONFIG.CANVAS_WIDTH / 2 - 80,\n        (CONFIG.CANVAS_HEIGHT / 2) + 10\n      )\n    context.stroke()\n  }\n}\n","import IGameState from './IGameState'\nimport GameStateLoading from './GameStateLoading'\nimport GameStateMainMenu from './GameStateMainMenu'\nimport GameStatePlaying from './GameStatePlaying'\nimport GameStatePaused from './GameStatePaused'\nimport GameStateGameOver from './GameStateGameOver'\nimport GameStateVictory from './GameStateVictory'\n\nconst GAME_STATES: {[ key: string ]: IGameState } = {\n  LOADING   : new GameStateLoading(),\n  MAIN_MENU : new GameStateMainMenu(),\n  PLAYING   : new GameStatePlaying(),\n  PAUSED    : new GameStatePaused(),\n  GAME_OVER : new GameStateGameOver(),\n  VICTORY   : new GameStateVictory(),\n}\n\nexport default GAME_STATES","import * as CONFIG from '@app/configuration/config.json'\n\nexport default interface Point {\n  x: number\n  y: number\n  row?: number\n  col?: number\n  deltas?: {\n    dyTop    : number\n    dyBottom : number\n    dxLeft   : number\n    dxRight  : number\n  }\n}\n\nexport function pointToPointDistance(p1: Point, p2: Point) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y))\n}\n\nexport function angleBetweenPoints(p1: Point, p2: Point): number {\n  const theta = Math.atan2((p1.y - p2.y), (p1.x - p2.x))\n  return theta\n}\n\nexport function updatePointRowAndColValues(p: Point): void {\n  p.row = Math.floor(p.y / CONFIG.TILE_SIZE)\n  p.col = Math.floor(p.x / CONFIG.TILE_SIZE)\n}\n\nexport function updatePointDeltas(p: Point): void {\n  p.deltas.dyTop = p.y % CONFIG.TILE_SIZE\n  p.deltas.dyBottom = CONFIG.TILE_SIZE - p.deltas.dyTop\n  p.deltas.dxLeft = p.x % CONFIG.TILE_SIZE\n  p.deltas.dxRight = CONFIG.TILE_SIZE - p.deltas.dxLeft\n}\n","import Player from '@app/domain/player/Player'\nimport Mouse from './Mouse'\n\nexport default class Gamepads {\n  public static update(player: Player): void {\n    const gamepads = navigator.getGamepads()\n    if (gamepads[0]) {\n      this.handleMovement(gamepads[0], player)\n      this.handleAiming(gamepads[0])\n      this.handleButtons(gamepads[0], player)\n    }\n  }\n\n  private static aimModifier: number = 10\n\n  private static handleMovement(gamepad: any, player: Player): void {\n    const movementAxisX: number = +gamepad.axes[0].toFixed(2)\n    if (movementAxisX > 0) {\n      player.moving.right = true\n    }\n    else if (movementAxisX < 0) {\n      player.moving.left = true\n    }\n    else {\n      player.moving.left  = false\n      player.moving.right = false\n    }\n\n    const movementAxisY: number = +gamepad.axes[1].toFixed(2)\n    if (movementAxisY > 0) {\n      player.moving.down = true\n    }\n    else if (movementAxisY < 0) {\n      player.moving.up = true\n    }\n    else {\n      player.moving.up   = false\n      player.moving.down = false\n    }\n  }\n\n  private static handleAiming(gamepad: any): void {\n    const aimAxisX = gamepad.axes[2]\n    const aimAxisY = gamepad.axes[3]\n    if (+aimAxisX.toFixed(2) !== 0) {\n      Mouse.x += aimAxisX * this.aimModifier\n    }\n    if (+aimAxisY.toFixed(2) !== 0) {\n      Mouse.y += aimAxisY * this.aimModifier\n    }\n  }\n\n  private static handleButtons(gamepad: any, player: Player): void {\n    const R1 = gamepad.buttons[5]\n    if (R1.pressed) {\n      player.setShooting(true)\n    }\n    else {\n      player.setShooting(false)\n    }\n  }\n}\n","type KeyboardEventListener = ((e: KeyboardEvent) => void)\n\nexport default class Keyboard {\n  public static addListenerKeydown(listener: KeyboardEventListener) {\n    document.addEventListener('keydown', listener)\n  }\n  public static addListenerKeyup(listener: KeyboardEventListener) {\n    document.addEventListener('keyup', listener)\n  }\n\n  public static removeKeydownAndKeyupListeners(listener: KeyboardEventListener): void {\n    document.removeEventListener('keyup', listener)\n    document.removeEventListener('keydown', listener)\n  }\n}\n","import Canvas from '@app/infrastructure/Canvas'\n\ntype MouseEventHandler = (e: MouseEvent) => void\n\nexport default class Mouse {\n  public static x: number = window.innerWidth  / 2 + 100\n  public static y: number = window.innerHeight / 2 + 50\n  public static init(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    this.hijackRightClick()\n    this.trackMouseOnCanvas()\n    this.listenForLeftClicks(mouseDownListener, mouseUpListener)\n  }\n  private static hijackRightClick(): void {\n    window.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    }, false)\n  }\n\n  private static trackMouseOnCanvas(): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousemove', e => {\n      this.x = e.pageX\n      this.y = e.pageY\n    }, false)\n  }\n\n  private static listenForLeftClicks(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler): void {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.addEventListener('mousedown', mouseDownListener, false)\n    canvas.addEventListener('mouseup', mouseUpListener, false)\n  }\n\n  public static removeMouseLeftClickListeners(mouseDownListener: MouseEventHandler, mouseUpListener: MouseEventHandler) {\n    const canvas: HTMLCanvasElement = Canvas.getCanvasDomElement()\n    canvas.removeEventListener('mousedown', mouseDownListener)\n    canvas.removeEventListener('mouseup', mouseUpListener)\n  }\n}\n","export const KEYBOARD_KEYS = {\n  ENTER: 13,\n  ESC: 27,\n  w: 87,\n  a: 65,\n  s: 83,\n  d: 68,\n  p: 80,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Game from '@app/infrastructure/game/Game'\n\nconst game: Game = new Game()\ngame.start()\n"],"names":["URI","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","send","context","AudioContext","static","loadCallback","load","Mixer","musicVolume","this","_musicVolume","vol","soundFxVolume","_soundFxVolume","SoundFX","setLoadedPercentage","soundFxFilePromises","soundFxFiles","all","SMG","CRATE_HIT","ENEMY_HIT","ENEMY_DEATH","playSound","createBufferSource","SMG_INDEX","gainNode","createGain","gain","value","connect","destination","start","length","ENEMY_HIT_READY","ENEMY_HIT_INDEX","setTimeout","prevX","prevY","maxHealth","state","Idling","previousState","animationPosition","moving","left","right","up","down","blocked","deltas","dyTop","dyBottom","dxLeft","dxRight","resetMoving","resetBlocked","calculateNextCoordinates","nextX","x","nextY","y","maxSpeedDiagonal","maxSpeed","checkIfBlockedByCreature","c","nextCreatureState","collisionBoxesIntersect","intersectionX","intersectionY","collisionBox","halfWidth","halfHeight","adjustCollisionWithWalls","wall","walls","row","col","mapX","width","SWVertexRow","Math","floor","CONFIG","TILE_SIZE","NWVertexRow","SEVertexRow","NEVertexRow","mapY","height","NEVertexCol","NWVertexCol","SEVertexCol","SWVertexCol","updatePreviousCoordinates","push","shift","updateDirection","direction","dx","dy","Directions","S","N","E","W","directionString","join","checkIfMoving","xUnchanged","yUnchanged","initializeHealth","healthPercentage","health","getHealthColor","resetAnimation","setState","newState","CreatureState","ConcreteEnemy","constructor","pathfindingInterval","super","sprite","Zerg","attackSpeed","updateMapPosition","update","player","enemies","Dying","Decaying","target","stuck","checkIfStuck","Attacking","checkForCollisionWithPlayer","checkForCollisionWithOtherEnemies","distanceFromTarget","pointToPointDistance","targetIsInRange","targetInRange","resetAttackCooldown","attack","Moving","thereAreObstaclesBetweenPlayerAndThisEnemy","determineIfThereAreObstaclesBetweenTwoPathNodes","findPathToPlayer","shortestPath","move","updateTileDeltas","stateManager","getState","PLAYING","advanceAnimation","draw","DEBUG","ENEMY_COLLISION_BOX","debug_drawCollisionBox","ENEMY_STATE","debug_drawState","RAY_TO_PLAYER","debug_drawRayToPlayer","PATHFINDING_NODES","debug_drawPathNodes","pathfindingNodes","SHORTEST_PATH_TO_PLAYER","debug_drawShortestPathToPlayer","takeDamage","damageAmount","playEnemyHit","die","playEnemyDeath","numberOfSpritesInAnimation","attacking","walking","generatePathNodes","round","abs","findShortestPath","pathfindingPeriod","followTheShortestPath","moveTowardsPlayer","nextNodeX","nextNodeY","pop","moveTowards","strokeStyle","lineWidth","beginPath","moveTo","center","lineTo","stroke","fillStyle","font","fillText","toString","p","forEach","n","i","drawNode","visited","node","debug_drawRayFromPointToPoint","p1","p2","Enemy","sin","attackCooldown","isOnScreen","playerX","playerY","offScreenOffset","CANVAS_WIDTH","CANVAS_HEIGHT","nextEnemyState","getEnemiesOnScreen","e","sumOfCollisionBoxHalfDiagonals","sqrt","xIsStatic","every","yIsStatic","playSMG","dealDamage","getDamage","Map","loadMap","Map01","filter","destroy","splice","openPortalWhenAllEnemiesAreKilled","exitPortal","isOpen","drawGameObjects","offsetLeft","colRemainder","offsetTop","rowRemainder","rowStart","halfRows","colStart","halfCols","rows","cols","map","loadGameObjects","loadEnemies","loadWalls","loadExitPortal","gameObjects","mapKey","isWall","createWall","ExitPortal","MapKeys","startsWith","color","destructable","Portal","getColor","rect","fill","openColor","closedColor","Wall","playWallHit","WallGray","WallGreen","WallBlue","Error","canvasX","mousePosition","canvasY","offsetX","offsetY","Player","alive","rotation","sightLineLength","shooting","shootingCooldown","projectiles","keydownHandler","keyCode","KEYBOARD_KEYS","w","a","s","d","keyupHandler","checkForCollisionWithEnemies","shoot","theta","calculateTheta","drawPlayer","drawPlayerVisionRay","PLAYER_VISION_RAY_SHOTGUN","drawProjectiles","xVel","yVel","FEATURES","SCATTER_PROJECTILES","randomFactorX","random","randomFactorY","setShooting","isShooting","angleBetweenPoints","toFixed","cos","PLAYER_COLLISION_BOX","hitPoint","wallHit","cast","drawRay","nextPlayerState","enemiesOnScreen","some","directionX","directionY","speed","damage","numberOfIntermediatePositions","intermediatePositions","previousX","previousY","nearbyEnemies","getNearbyEnemies","calculateIntermediatePoints","isOffScreen","intermediatePoint","checkCollisionWithEnemies","checkCollisionWithWall","arc","PI","intermediateIntervalX","intermediateIntervalY","point","Sprites","callback","_reject","spriteSheet","Image","src","url","SpriteZerg","spriteLocations","flip","NE","SE","SW","NW","spriteSize","spriteStep","enemy","playerCoordinates","spriteOffsets","getSpriteOffsets","spriteLocation","drawSprite","enemyState","SPRITE_STEP","cBox","px","py","save","translate","scale","drawImage","restore","canvas","document","getElementById","style","SCALE","getContext","Canvas","clearRect","getCanvasDomElement","THROW_DEVELOPMENT_ERRORS","b","lastFrameTime","frameElapsedTime","FPS_ARR","FPS","now","performance","unshift","reduce","sum","current","GameAssets","startRow","startCol","path","rowEnd","colEnd","PathNode","nodeGoal","nodeStart","f","g","heuristic","nodesNotTested","nodeCurrent","sort","neighbourNodes","possiblyLowerLocalGoal","parent","coordinates","Infinity","Raycaster","pEnd","xInt","tan","xIntIsPositive","getInterceptPointNE","getInterceptPointNW","getInterceptPointSE","getInterceptPointSW","angleBetweenTwoGivenPoints","results","n1","n2","angleBetweenNodes","vNE1","vNE2","getVerticesNE","determineIfThereAreObstaclesBetweenTwoPoints","vSE1","vSE2","getVerticesSE","vSW1","vSW2","getVerticesSW","vNW1","vNW2","getVerticesNW","yIntercept","tileStepX","hitPointVertical","wallHitVertical","rangeHorizontal","rangeVertical","RAYCASTER","checkWallCollisionVerticalSE","xIntercept","tileStepY","hitPointHorizontal","wallHitHorizontal","j","checkWallCollisionHorizontalSE","pow","checkWallCollisionVerticalNE","checkWallCollisionHorizontalNE","checkWallCollisionVerticalNW","checkWallCollisionHorizontalNW","checkWallCollisionVerticalSW","checkWallCollisionHorizontalSW","xTile","yTile","yTile_aboveByOnePixel","xTile_leftByOnePixel","outsideOfScreenOffset","blankVertex","vertexNW1","vertexNW2","vertexNE1","vertexNE2","vertexSW1","vertexSW2","vertexSE1","vertexSE2","Game","window","onfocus","restart","loadedPercentages","set","Graphics","weight","loaded","Audio","percentage","gameAssetLoaded","loadInterval","setInterval","clearInterval","MAIN_MENU","gameLoop","asset","assetValue","get","loadedPercentage","_key","render","calculateFrameRate","requestAnimationFrame","clear","drawFPS","handleEnterPress","ENTER","enter","addEventListener","exit","removeEventListener","drawGameOverScreen","drawLoadingDialog","animationCounter","instructionsVisible","handleMenuSelection","drawMainMenu","currentState","LOADING","nextState","pauseHandler","ESC","preventDefault","destroyGame","drawPauseMenu","playerSetShootingTrue","playerSetShootingFalse","PAUSED","startNewGame","setupOwnEventListeners","onblur","clearOwnEventListeners","updateMousePosition","checkForVictoryCondition","GAME_OVER","addListenerKeydown","addListenerKeyup","init","enemiesRemaining","checkIfPlayerIsInsideExitPortal","VICTORY","removeKeydownAndKeyupListeners","removeMouseLeftClickListeners","GAME_STATES","atan2","Gamepads","gamepads","navigator","getGamepads","handleMovement","handleAiming","handleButtons","gamepad","movementAxisX","axes","movementAxisY","aimAxisX","aimAxisY","aimModifier","buttons","pressed","listener","Mouse","mouseDownListener","mouseUpListener","hijackRightClick","trackMouseOnCanvas","listenForLeftClicks","pageX","pageY","innerWidth","innerHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}